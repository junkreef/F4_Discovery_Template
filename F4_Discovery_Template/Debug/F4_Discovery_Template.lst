
F4_Discovery_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003ec  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08000574  08000574  00008574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08000578  08000578  00008578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000014  20000000  0800057c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000004  20000014  20000014  00010014  2**0
                  ALLOC
  6 ._user_heap_stack 00000400  20000018  20000018  00010014  2**0
                  ALLOC
  7 .ARM.attributes 0000002d  00000000  00000000  00010014  2**0
                  CONTENTS, READONLY
  8 .debug_abbrev 000030c6  00000000  00000000  00010041  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00011605  00000000  00000000  00013107  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000d2d0  00000000  00000000  0002470c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 00c67546  00000000  00000000  000319dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008516  00000000  00000000  00c98f22  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 000037d3  00000000  00000000  00ca1438  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00001718  00000000  00000000  00ca4c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000004a8  00000000  00000000  00ca6328  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006696  00000000  00000000  00ca67d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000002a  00000000  00000000  00cace66  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000047c0  00000000  00000000  00cace90  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00000020  00000000  00000000  00cb1650  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	f240 0314 	movw	r3, #20
 800018c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000190:	781a      	ldrb	r2, [r3, #0]
 8000192:	b90a      	cbnz	r2, 8000198 <__do_global_dtors_aux+0x10>
 8000194:	2001      	movs	r0, #1
 8000196:	7018      	strb	r0, [r3, #0]
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop

0800019c <frame_dummy>:
 800019c:	f240 0014 	movw	r0, #20
 80001a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80001a4:	b508      	push	{r3, lr}
 80001a6:	6803      	ldr	r3, [r0, #0]
 80001a8:	b12b      	cbz	r3, 80001b6 <frame_dummy+0x1a>
 80001aa:	f240 0300 	movw	r3, #0
 80001ae:	f2c0 0300 	movt	r3, #0
 80001b2:	b103      	cbz	r3, 80001b6 <frame_dummy+0x1a>
 80001b4:	4798      	blx	r3
 80001b6:	bd08      	pop	{r3, pc}

080001b8 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
  int i = 0;
 80001be:	f04f 0300 	mov.w	r3, #0
 80001c2:	607b      	str	r3, [r7, #4]


  /* Infinite loop */
  while (1)
  {
	i++;
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	f103 0301 	add.w	r3, r3, #1
 80001ca:	607b      	str	r3, [r7, #4]
  }
 80001cc:	e7fa      	b.n	80001c4 <main+0xc>
 80001ce:	bf00      	nop

080001d0 <EVAL_AUDIO_TransferComplete_CallBack>:
}


void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
 80001d8:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
}
 80001da:	f107 070c 	add.w	r7, r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr

080001e4 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 80001e4:	b480      	push	{r7}
 80001e6:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 80001e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80001ec:	4618      	mov	r0, r3
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr

080001f4 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
}
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop

08000200 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000204:	e7fe      	b.n	8000204 <HardFault_Handler+0x4>
 8000206:	bf00      	nop

08000208 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 800020c:	e7fe      	b.n	800020c <MemManage_Handler+0x4>
 800020e:	bf00      	nop

08000210 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000214:	e7fe      	b.n	8000214 <BusFault_Handler+0x4>
 8000216:	bf00      	nop

08000218 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 800021c:	e7fe      	b.n	800021c <UsageFault_Handler+0x4>
 800021e:	bf00      	nop

08000220 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
}
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop

0800022c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
}
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop

08000238 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
}
 800023c:	46bd      	mov	sp, r7
 800023e:	bc80      	pop	{r7}
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop

08000244 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
}
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000254:	4b12      	ldr	r3, [pc, #72]	; (80002a0 <SystemInit+0x50>)
 8000256:	4a12      	ldr	r2, [pc, #72]	; (80002a0 <SystemInit+0x50>)
 8000258:	6812      	ldr	r2, [r2, #0]
 800025a:	f042 0201 	orr.w	r2, r2, #1
 800025e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000260:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <SystemInit+0x50>)
 8000262:	f04f 0200 	mov.w	r2, #0
 8000266:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000268:	4a0d      	ldr	r2, [pc, #52]	; (80002a0 <SystemInit+0x50>)
 800026a:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <SystemInit+0x50>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000276:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000278:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <SystemInit+0x50>)
 800027a:	4a0a      	ldr	r2, [pc, #40]	; (80002a4 <SystemInit+0x54>)
 800027c:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800027e:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <SystemInit+0x50>)
 8000280:	4a07      	ldr	r2, [pc, #28]	; (80002a0 <SystemInit+0x50>)
 8000282:	6812      	ldr	r2, [r2, #0]
 8000284:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000288:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800028a:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <SystemInit+0x50>)
 800028c:	f04f 0200 	mov.w	r2, #0
 8000290:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000292:	f000 f895 	bl	80003c0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000296:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <SystemInit+0x58>)
 8000298:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800029c:	609a      	str	r2, [r3, #8]
#endif
}
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40023800 	.word	0x40023800
 80002a4:	24003010 	.word	0x24003010
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b087      	sub	sp, #28
 80002b0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80002b2:	f04f 0300 	mov.w	r3, #0
 80002b6:	613b      	str	r3, [r7, #16]
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]
 80002be:	f04f 0302 	mov.w	r3, #2
 80002c2:	60fb      	str	r3, [r7, #12]
 80002c4:	f04f 0300 	mov.w	r3, #0
 80002c8:	60bb      	str	r3, [r7, #8]
 80002ca:	f04f 0302 	mov.w	r3, #2
 80002ce:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80002d0:	4b36      	ldr	r3, [pc, #216]	; (80003ac <SystemCoreClockUpdate+0x100>)
 80002d2:	689b      	ldr	r3, [r3, #8]
 80002d4:	f003 030c 	and.w	r3, r3, #12
 80002d8:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80002da:	693b      	ldr	r3, [r7, #16]
 80002dc:	2b04      	cmp	r3, #4
 80002de:	d007      	beq.n	80002f0 <SystemCoreClockUpdate+0x44>
 80002e0:	2b08      	cmp	r3, #8
 80002e2:	d009      	beq.n	80002f8 <SystemCoreClockUpdate+0x4c>
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d147      	bne.n	8000378 <SystemCoreClockUpdate+0xcc>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80002e8:	4b31      	ldr	r3, [pc, #196]	; (80003b0 <SystemCoreClockUpdate+0x104>)
 80002ea:	4a32      	ldr	r2, [pc, #200]	; (80003b4 <SystemCoreClockUpdate+0x108>)
 80002ec:	601a      	str	r2, [r3, #0]
      break;
 80002ee:	e047      	b.n	8000380 <SystemCoreClockUpdate+0xd4>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80002f0:	4b2f      	ldr	r3, [pc, #188]	; (80003b0 <SystemCoreClockUpdate+0x104>)
 80002f2:	4a31      	ldr	r2, [pc, #196]	; (80003b8 <SystemCoreClockUpdate+0x10c>)
 80002f4:	601a      	str	r2, [r3, #0]
      break;
 80002f6:	e043      	b.n	8000380 <SystemCoreClockUpdate+0xd4>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80002f8:	4b2c      	ldr	r3, [pc, #176]	; (80003ac <SystemCoreClockUpdate+0x100>)
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000300:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8000304:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000306:	4b29      	ldr	r3, [pc, #164]	; (80003ac <SystemCoreClockUpdate+0x100>)
 8000308:	685b      	ldr	r3, [r3, #4]
 800030a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800030e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d00f      	beq.n	8000336 <SystemCoreClockUpdate+0x8a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000316:	4a28      	ldr	r2, [pc, #160]	; (80003b8 <SystemCoreClockUpdate+0x10c>)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	fbb2 f2f3 	udiv	r2, r2, r3
 800031e:	4b23      	ldr	r3, [pc, #140]	; (80003ac <SystemCoreClockUpdate+0x100>)
 8000320:	6859      	ldr	r1, [r3, #4]
 8000322:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000326:	ea01 0303 	and.w	r3, r1, r3
 800032a:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800032e:	fb03 f302 	mul.w	r3, r3, r2
 8000332:	617b      	str	r3, [r7, #20]
 8000334:	e00e      	b.n	8000354 <SystemCoreClockUpdate+0xa8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000336:	4a1f      	ldr	r2, [pc, #124]	; (80003b4 <SystemCoreClockUpdate+0x108>)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	fbb2 f2f3 	udiv	r2, r2, r3
 800033e:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <SystemCoreClockUpdate+0x100>)
 8000340:	6859      	ldr	r1, [r3, #4]
 8000342:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000346:	ea01 0303 	and.w	r3, r1, r3
 800034a:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800034e:	fb03 f302 	mul.w	r3, r3, r2
 8000352:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000354:	4b15      	ldr	r3, [pc, #84]	; (80003ac <SystemCoreClockUpdate+0x100>)
 8000356:	685b      	ldr	r3, [r3, #4]
 8000358:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800035c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8000360:	f103 0301 	add.w	r3, r3, #1
 8000364:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000368:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800036a:	697a      	ldr	r2, [r7, #20]
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000372:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <SystemCoreClockUpdate+0x104>)
 8000374:	601a      	str	r2, [r3, #0]
      break;
 8000376:	e003      	b.n	8000380 <SystemCoreClockUpdate+0xd4>
    default:
      SystemCoreClock = HSI_VALUE;
 8000378:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <SystemCoreClockUpdate+0x104>)
 800037a:	4a0e      	ldr	r2, [pc, #56]	; (80003b4 <SystemCoreClockUpdate+0x108>)
 800037c:	601a      	str	r2, [r3, #0]
      break;
 800037e:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000380:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <SystemCoreClockUpdate+0x100>)
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000388:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800038c:	4a0b      	ldr	r2, [pc, #44]	; (80003bc <SystemCoreClockUpdate+0x110>)
 800038e:	5cd3      	ldrb	r3, [r2, r3]
 8000390:	b2db      	uxtb	r3, r3
 8000392:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <SystemCoreClockUpdate+0x104>)
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	693b      	ldr	r3, [r7, #16]
 800039a:	fa22 f203 	lsr.w	r2, r2, r3
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <SystemCoreClockUpdate+0x104>)
 80003a0:	601a      	str	r2, [r3, #0]
}
 80003a2:	f107 071c 	add.w	r7, r7, #28
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	40023800 	.word	0x40023800
 80003b0:	20000000 	.word	0x20000000
 80003b4:	00f42400 	.word	0x00f42400
 80003b8:	007a1200 	.word	0x007a1200
 80003bc:	20000004 	.word	0x20000004

080003c0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80003c6:	f04f 0300 	mov.w	r3, #0
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	f04f 0300 	mov.w	r3, #0
 80003d0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80003d2:	4b37      	ldr	r3, [pc, #220]	; (80004b0 <SetSysClock+0xf0>)
 80003d4:	4a36      	ldr	r2, [pc, #216]	; (80004b0 <SetSysClock+0xf0>)
 80003d6:	6812      	ldr	r2, [r2, #0]
 80003d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80003dc:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80003de:	4b34      	ldr	r3, [pc, #208]	; (80004b0 <SetSysClock+0xf0>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003e6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f103 0301 	add.w	r3, r3, #1
 80003ee:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d103      	bne.n	80003fe <SetSysClock+0x3e>
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80003fc:	d1ef      	bne.n	80003de <SetSysClock+0x1e>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80003fe:	4b2c      	ldr	r3, [pc, #176]	; (80004b0 <SetSysClock+0xf0>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000406:	2b00      	cmp	r3, #0
 8000408:	d003      	beq.n	8000412 <SetSysClock+0x52>
  {
    HSEStatus = (uint32_t)0x01;
 800040a:	f04f 0301 	mov.w	r3, #1
 800040e:	603b      	str	r3, [r7, #0]
 8000410:	e002      	b.n	8000418 <SetSysClock+0x58>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000412:	f04f 0300 	mov.w	r3, #0
 8000416:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d142      	bne.n	80004a4 <SetSysClock+0xe4>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800041e:	4b24      	ldr	r3, [pc, #144]	; (80004b0 <SetSysClock+0xf0>)
 8000420:	4a23      	ldr	r2, [pc, #140]	; (80004b0 <SetSysClock+0xf0>)
 8000422:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000424:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000428:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 800042a:	4b22      	ldr	r3, [pc, #136]	; (80004b4 <SetSysClock+0xf4>)
 800042c:	4a21      	ldr	r2, [pc, #132]	; (80004b4 <SetSysClock+0xf4>)
 800042e:	6812      	ldr	r2, [r2, #0]
 8000430:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000434:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000436:	4b1e      	ldr	r3, [pc, #120]	; (80004b0 <SetSysClock+0xf0>)
 8000438:	4a1d      	ldr	r2, [pc, #116]	; (80004b0 <SetSysClock+0xf0>)
 800043a:	6892      	ldr	r2, [r2, #8]
 800043c:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800043e:	4b1c      	ldr	r3, [pc, #112]	; (80004b0 <SetSysClock+0xf0>)
 8000440:	4a1b      	ldr	r2, [pc, #108]	; (80004b0 <SetSysClock+0xf0>)
 8000442:	6892      	ldr	r2, [r2, #8]
 8000444:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000448:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800044a:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <SetSysClock+0xf0>)
 800044c:	4a18      	ldr	r2, [pc, #96]	; (80004b0 <SetSysClock+0xf0>)
 800044e:	6892      	ldr	r2, [r2, #8]
 8000450:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000454:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000456:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <SetSysClock+0xf0>)
 8000458:	4a17      	ldr	r2, [pc, #92]	; (80004b8 <SetSysClock+0xf8>)
 800045a:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800045c:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <SetSysClock+0xf0>)
 800045e:	4a14      	ldr	r2, [pc, #80]	; (80004b0 <SetSysClock+0xf0>)
 8000460:	6812      	ldr	r2, [r2, #0]
 8000462:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000466:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000468:	bf00      	nop
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <SetSysClock+0xf0>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000472:	2b00      	cmp	r3, #0
 8000474:	d0f9      	beq.n	800046a <SetSysClock+0xaa>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000476:	4b11      	ldr	r3, [pc, #68]	; (80004bc <SetSysClock+0xfc>)
 8000478:	f240 6205 	movw	r2, #1541	; 0x605
 800047c:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <SetSysClock+0xf0>)
 8000480:	4a0b      	ldr	r2, [pc, #44]	; (80004b0 <SetSysClock+0xf0>)
 8000482:	6892      	ldr	r2, [r2, #8]
 8000484:	f022 0203 	bic.w	r2, r2, #3
 8000488:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <SetSysClock+0xf0>)
 800048c:	4a08      	ldr	r2, [pc, #32]	; (80004b0 <SetSysClock+0xf0>)
 800048e:	6892      	ldr	r2, [r2, #8]
 8000490:	f042 0202 	orr.w	r2, r2, #2
 8000494:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000496:	bf00      	nop
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <SetSysClock+0xf0>)
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	f003 030c 	and.w	r3, r3, #12
 80004a0:	2b08      	cmp	r3, #8
 80004a2:	d1f9      	bne.n	8000498 <SetSysClock+0xd8>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80004a4:	f107 070c 	add.w	r7, r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40023800 	.word	0x40023800
 80004b4:	40007000 	.word	0x40007000
 80004b8:	07405408 	.word	0x07405408
 80004bc:	40023c00 	.word	0x40023c00

080004c0 <__libc_init_array>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f240 5674 	movw	r6, #1396	; 0x574
 80004c6:	f240 5574 	movw	r5, #1396	; 0x574
 80004ca:	f6c0 0600 	movt	r6, #2048	; 0x800
 80004ce:	f6c0 0500 	movt	r5, #2048	; 0x800
 80004d2:	1b76      	subs	r6, r6, r5
 80004d4:	10b6      	asrs	r6, r6, #2
 80004d6:	d006      	beq.n	80004e6 <__libc_init_array+0x26>
 80004d8:	2400      	movs	r4, #0
 80004da:	f855 3b04 	ldr.w	r3, [r5], #4
 80004de:	3401      	adds	r4, #1
 80004e0:	4798      	blx	r3
 80004e2:	42a6      	cmp	r6, r4
 80004e4:	d1f9      	bne.n	80004da <__libc_init_array+0x1a>
 80004e6:	f240 5678 	movw	r6, #1400	; 0x578
 80004ea:	f240 5574 	movw	r5, #1396	; 0x574
 80004ee:	f6c0 0600 	movt	r6, #2048	; 0x800
 80004f2:	f6c0 0500 	movt	r5, #2048	; 0x800
 80004f6:	1b76      	subs	r6, r6, r5
 80004f8:	f000 f830 	bl	800055c <_init>
 80004fc:	10b6      	asrs	r6, r6, #2
 80004fe:	d006      	beq.n	800050e <__libc_init_array+0x4e>
 8000500:	2400      	movs	r4, #0
 8000502:	f855 3b04 	ldr.w	r3, [r5], #4
 8000506:	3401      	adds	r4, #1
 8000508:	4798      	blx	r3
 800050a:	42a6      	cmp	r6, r4
 800050c:	d1f9      	bne.n	8000502 <__libc_init_array+0x42>
 800050e:	bd70      	pop	{r4, r5, r6, pc}

08000510 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000510:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000512:	e003      	b.n	800051c <LoopCopyDataInit>

08000514 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000516:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000518:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800051a:	3104      	adds	r1, #4

0800051c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800051c:	480a      	ldr	r0, [pc, #40]	; (8000548 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800051e:	4b0b      	ldr	r3, [pc, #44]	; (800054c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000520:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000522:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000524:	d3f6      	bcc.n	8000514 <CopyDataInit>
  ldr  r2, =_sbss
 8000526:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000528:	e002      	b.n	8000530 <LoopFillZerobss>

0800052a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800052a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800052c:	f842 3b04 	str.w	r3, [r2], #4

08000530 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000532:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000534:	d3f9      	bcc.n	800052a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000536:	f7ff fe8b 	bl	8000250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800053a:	f7ff ffc1 	bl	80004c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800053e:	f7ff fe3b 	bl	80001b8 <main>
  bx  lr    
 8000542:	4770      	bx	lr
 8000544:	0800057c 	.word	0x0800057c
 8000548:	20000000 	.word	0x20000000
 800054c:	20000014 	.word	0x20000014
 8000550:	20000014 	.word	0x20000014
 8000554:	20000018 	.word	0x20000018

08000558 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000558:	e7fe      	b.n	8000558 <ADC_IRQHandler>
	...

0800055c <_init>:
 800055c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055e:	bf00      	nop
 8000560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000562:	bc08      	pop	{r3}
 8000564:	469e      	mov	lr, r3
 8000566:	4770      	bx	lr

08000568 <_fini>:
 8000568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056a:	bf00      	nop
 800056c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800056e:	bc08      	pop	{r3}
 8000570:	469e      	mov	lr, r3
 8000572:	4770      	bx	lr
