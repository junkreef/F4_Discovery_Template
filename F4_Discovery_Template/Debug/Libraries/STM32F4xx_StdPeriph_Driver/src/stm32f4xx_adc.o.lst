   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f4xx_adc.c"
  23              	.Ltext0:
  24              		.file 1 "../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c"
 24623              		.align	2
 24624              		.global	ADC_DeInit
 24625              		.thumb
 24626              		.thumb_func
 24628              	ADC_DeInit:
 24629              	.LFB110:
   1:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
   2:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************
   3:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @file    stm32f4xx_adc.c
   4:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @version V1.0.2
   6:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @date    05-March-2012
   7:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   9:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Initialization and Configuration (in addition to ADC multi mode 
  10:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             selection)
  11:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Analog Watchdog configuration
  12:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Temperature Sensor & Vrefint (Voltage Reference internal) & VBAT
  13:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             management 
  14:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Regular Channels Configuration
  15:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Regular Channels DMA Configuration
  16:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Injected channels Configuration
  17:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Interrupts and flags management
  18:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         
  19:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *  @verbatim
  20:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  21:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===================================================================
  22:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                   How to use this driver
  23:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===================================================================
  24:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
  25:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          1.  Enable the ADC interface clock using 
  26:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADCx, ENABLE); 
  27:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *     
  28:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          2. ADC pins configuration
  29:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *               - Enable the clock for the ADC GPIOs using the following function:
  30:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                   RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  31:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                - Configure these ADC pins in analog mode using GPIO_Init();  
  32:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  33:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          3. Configure the ADC Prescaler, conversion resolution and data 
  34:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              alignment using the ADC_Init() function.
  35:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          4. Activate the ADC peripheral using ADC_Cmd() function.
  36:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  37:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Regular channels group configuration
  38:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ====================================    
  39:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configure the ADC regular channels group features, use 
  40:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_Init() and ADC_RegularChannelConfig() functions.
  41:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  42:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  43:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configurate and activate the Discontinuous mode, use the 
  44:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_DiscModeChannelCountConfig() and ADC_DiscModeCmd() functions.
  45:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetConversionValue()
  46:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  47:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  48:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Multi mode ADCs Regular channels configuration
  49:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===============================================
  50:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Refer to "Regular channels group configuration" description to
  51:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              configure the ADC1, ADC2 and ADC3 regular channels.        
  52:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Select the Multi mode ADC regular channels features (dual or 
  53:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              triple mode) using ADC_CommonInit() function and configure 
  54:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              the DMA mode using ADC_MultiModeDMARequestAfterLastTransferCmd() 
  55:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              functions.        
  56:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Read the ADCs converted values using the 
  57:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_GetMultiModeConversionValue() function.
  58:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  59:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          DMA for Regular channels group features configuration
  60:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ====================================================== 
  61:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - To enable the DMA mode for regular channels group, use the 
  62:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             ADC_DMACmd() function.
  63:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - To enable the generation of DMA requests continuously at the end
  64:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             of the last DMA transfer, use the ADC_DMARequestAfterLastTransferCmd() 
  65:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             function.
  66:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  67:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Injected channels group configuration
  68:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          =====================================    
  69:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configure the ADC Injected channels group features, use 
  70:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_InjectedChannelConfig() and  ADC_InjectedSequencerLengthConfig()
  71:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              functions.
  72:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  73:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  74:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the Injected Discontinuous mode, use the 
  75:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_InjectedDiscModeCmd() function.  
  76:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the AutoInjected mode, use the ADC_AutoInjectedConvCmd() 
  77:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.        
  78:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetInjectedConversionValue() 
  79:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  80:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  81:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *  @endverbatim
  82:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  83:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************
  84:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @attention
  85:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  86:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  87:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  88:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  89:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * You may not use this file except in compliance with the License.
  90:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * You may obtain a copy of the License at:
  91:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  92:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  93:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  94:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * Unless required by applicable law or agreed to in writing, software 
  95:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  96:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  97:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * See the License for the specific language governing permissions and
  98:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * limitations under the License.
  99:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
 100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************
 101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
 102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Includes ------------------------------------------------------------------*/
 104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #include "stm32f4xx_adc.h"
 105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #include "stm32f4xx_rcc.h"
 106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC 
 112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief ADC driver modules
 113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
 115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private typedef -----------------------------------------------------------*/
 117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private define ------------------------------------------------------------*/ 
 118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC DISCNUM mask */
 120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_DISCNUM_RESET         ((uint32_t)0xFFFF1FFF)
 121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC AWDCH mask */
 123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_AWDCH_RESET           ((uint32_t)0xFFFFFFE0)   
 124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC Analog watchdog enable mode mask */
 126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_AWDMode_RESET         ((uint32_t)0xFF3FFDFF)   
 127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* CR1 register Mask */
 129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_CLEAR_MASK            ((uint32_t)0xFCFFFEFF)
 130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC EXTEN mask */
 132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_EXTEN_RESET           ((uint32_t)0xCFFFFFFF)  
 133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JEXTEN mask */
 135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_JEXTEN_RESET          ((uint32_t)0xFFCFFFFF)  
 136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JEXTSEL mask */
 138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_JEXTSEL_RESET         ((uint32_t)0xFFF0FFFF)  
 139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* CR2 register Mask */
 141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_CLEAR_MASK            ((uint32_t)0xC0FFF7FD)
 142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC SQx mask */
 144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR3_SQ_SET               ((uint32_t)0x0000001F)  
 145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR2_SQ_SET               ((uint32_t)0x0000001F)  
 146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR1_SQ_SET               ((uint32_t)0x0000001F)  
 147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC L Mask */
 149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR1_L_RESET              ((uint32_t)0xFF0FFFFF) 
 150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JSQx mask */
 152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JSQ_SET              ((uint32_t)0x0000001F) 
 153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JL mask */
 155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JL_SET               ((uint32_t)0x00300000) 
 156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JL_RESET             ((uint32_t)0xFFCFFFFF) 
 157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC SMPx mask */
 159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SMPR1_SMP_SET             ((uint32_t)0x00000007)  
 160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SMPR2_SMP_SET             ((uint32_t)0x00000007) 
 161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JDRx registers offset */
 163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JDR_OFFSET                ((uint8_t)0x28) 
 164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC CDR register base address */
 166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CDR_ADDRESS               ((uint32_t)0x40012308)   
 167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC CCR register Mask */
 169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR_CLEAR_MASK             ((uint32_t)0xFFFC30E0)  
 170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private macro -------------------------------------------------------------*/
 172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private variables ---------------------------------------------------------*/
 173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private function prototypes -----------------------------------------------*/
 174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private functions ---------------------------------------------------------*/
 175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Private_Functions
 177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
 179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group1 Initialization and Configuration functions
 181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief    Initialization and Configuration functions 
 182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim    
 184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                       Initialization and Configuration functions
 186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to:
 188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Initialize and configure the ADC Prescaler
 189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - ADC Conversion Resolution (12bit..6bit)
 190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Scan Conversion Mode (multichannels or one channel) for regular group
 191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - ADC Continuous Conversion Mode (Continuous or Single conversion) for 
 192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular group
 193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - External trigger Edge and source of regular group, 
 194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Converted data alignment (left or right)
 195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - The number of ADC conversions that will be done using the sequencer for 
 196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular channel group
 197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Multi ADC mode selection
 198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Direct memory access mode selection for multi ADC mode  
 199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Delay between 2 sampling phases (used in dual or triple interleaved modes)
 200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Enable or disable the ADC peripheral
 201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    
 202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Deinitializes all ADCs peripherals registers to their default reset 
 208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         values.
 209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  None
 210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DeInit(void)
 213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 24630              		.loc 1 213 0
 24631              		.cfi_startproc
 24632              		@ args = 0, pretend = 0, frame = 0
 24633              		@ frame_needed = 1, uses_anonymous_args = 0
 24634 0000 80B5     		push	{r7, lr}
 24635              	.LCFI0:
 24636              		.cfi_def_cfa_offset 8
 24637 0002 00AF     		add	r7, sp, #0
 24638              		.cfi_offset 14, -4
 24639              		.cfi_offset 7, -8
 24640              	.LCFI1:
 24641              		.cfi_def_cfa_register 7
 214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable all ADCs reset state */
 215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 24642              		.loc 1 215 0
 24643 0004 4FF48070 		mov	r0, #256
 24644 0008 4FF00101 		mov	r1, #1
 24645 000c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Release all ADCs from reset state */
 218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 24646              		.loc 1 218 0
 24647 0010 4FF48070 		mov	r0, #256
 24648 0014 4FF00001 		mov	r1, #0
 24649 0018 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 24650              		.loc 1 219 0
 24651 001c 80BD     		pop	{r7, pc}
 24652              		.cfi_endproc
 24653              	.LFE110:
 24655 001e 00BF     		.align	2
 24656              		.global	ADC_Init
 24657              		.thumb
 24658              		.thumb_func
 24660              	ADC_Init:
 24661              	.LFB111:
 220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
 223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         in the ADC_InitStruct.
 224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   This function is used to configure the global features of the ADC ( 
 225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
 231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         the configuration information for the specified ADC peripheral.
 232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
 235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 24662              		.loc 1 235 0
 24663              		.cfi_startproc
 24664              		@ args = 0, pretend = 0, frame = 16
 24665              		@ frame_needed = 1, uses_anonymous_args = 0
 24666              		@ link register save eliminated.
 24667 0020 80B4     		push	{r7}
 24668              	.LCFI2:
 24669              		.cfi_def_cfa_offset 4
 24670 0022 85B0     		sub	sp, sp, #20
 24671              	.LCFI3:
 24672              		.cfi_def_cfa_offset 24
 24673 0024 00AF     		add	r7, sp, #0
 24674              		.cfi_offset 7, -4
 24675              	.LCFI4:
 24676              		.cfi_def_cfa_register 7
 24677 0026 7860     		str	r0, [r7, #4]
 24678 0028 3960     		str	r1, [r7, #0]
 236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 24679              		.loc 1 236 0
 24680 002a 4FF00003 		mov	r3, #0
 24681 002e FB60     		str	r3, [r7, #12]
 237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint8_t tmpreg2 = 0;
 24682              		.loc 1 237 0
 24683 0030 4FF00003 		mov	r3, #0
 24684 0034 FB72     		strb	r3, [r7, #11]
 238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_RESOLUTION(ADC_InitStruct->ADC_Resolution)); 
 241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ScanConvMode));
 242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ContinuousConvMode)); 
 243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(ADC_InitStruct->ADC_ExternalTrigConvEdge)); 
 244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConv));    
 245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
 246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
 247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR1 Configuration -----------------*/
 249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx CR1 value */
 250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
 24685              		.loc 1 250 0
 24686 0036 7B68     		ldr	r3, [r7, #4]
 24687 0038 5B68     		ldr	r3, [r3, #4]
 24688 003a FB60     		str	r3, [r7, #12]
 251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear RES and SCAN bits */
 253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_CLEAR_MASK;
 24689              		.loc 1 253 0
 24690 003c FB68     		ldr	r3, [r7, #12]
 24691 003e 23F04073 		bic	r3, r3, #50331648
 24692 0042 23F48073 		bic	r3, r3, #256
 24693 0046 FB60     		str	r3, [r7, #12]
 254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: scan conversion mode and resolution */
 256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set SCAN bit according to ADC_ScanConvMode value */
 257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set RES bit according to ADC_Resolution value */ 
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 24694              		.loc 1 258 0
 24695 0048 3B68     		ldr	r3, [r7, #0]
 24696 004a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 24697 004c 4FEA0322 		lsl	r2, r3, #8
 259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
 24698              		.loc 1 259 0
 24699 0050 3B68     		ldr	r3, [r7, #0]
 24700 0052 1B68     		ldr	r3, [r3, #0]
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 24701              		.loc 1 258 0
 24702 0054 42EA0303 		orr	r3, r2, r3
 24703 0058 FA68     		ldr	r2, [r7, #12]
 24704 005a 42EA0303 		orr	r3, r2, r3
 24705 005e FB60     		str	r3, [r7, #12]
 260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx CR1 */
 261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 24706              		.loc 1 261 0
 24707 0060 7B68     		ldr	r3, [r7, #4]
 24708 0062 FA68     		ldr	r2, [r7, #12]
 24709 0064 5A60     		str	r2, [r3, #4]
 262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR2 Configuration -----------------*/
 263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx CR2 value */
 264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR2;
 24710              		.loc 1 264 0
 24711 0066 7B68     		ldr	r3, [r7, #4]
 24712 0068 9B68     		ldr	r3, [r3, #8]
 24713 006a FB60     		str	r3, [r7, #12]
 265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
 267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR2_CLEAR_MASK;
 24714              		.loc 1 267 0
 24715 006c FA68     		ldr	r2, [r7, #12]
 24716 006e 1C4B     		ldr	r3, .L3
 24717 0070 02EA0303 		and	r3, r2, r3
 24718 0074 FB60     		str	r3, [r7, #12]
 268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: external trigger event and edge, data alignment and 
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      continuous conversion mode */
 271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set ALIGN bit according to ADC_DataAlign value */
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
 273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
 274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set CONT bit according to ADC_ContinuousConvMode value */
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 24719              		.loc 1 275 0
 24720 0076 3B68     		ldr	r3, [r7, #0]
 24721 0078 1A69     		ldr	r2, [r3, #16]
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 24722              		.loc 1 276 0
 24723 007a 3B68     		ldr	r3, [r7, #0]
 24724 007c DB68     		ldr	r3, [r3, #12]
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 24725              		.loc 1 275 0
 24726 007e 1A43     		orrs	r2, r2, r3
 277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 24727              		.loc 1 277 0
 24728 0080 3B68     		ldr	r3, [r7, #0]
 24729 0082 9B68     		ldr	r3, [r3, #8]
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 24730              		.loc 1 276 0
 24731 0084 1A43     		orrs	r2, r2, r3
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 24732              		.loc 1 278 0
 24733 0086 3B68     		ldr	r3, [r7, #0]
 24734 0088 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 24735 008a 4FEA4303 		lsl	r3, r3, #1
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 24736              		.loc 1 275 0
 24737 008e 42EA0303 		orr	r3, r2, r3
 24738 0092 FA68     		ldr	r2, [r7, #12]
 24739 0094 42EA0303 		orr	r3, r2, r3
 24740 0098 FB60     		str	r3, [r7, #12]
 279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         
 280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx CR2 */
 281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg1;
 24741              		.loc 1 281 0
 24742 009a 7B68     		ldr	r3, [r7, #4]
 24743 009c FA68     		ldr	r2, [r7, #12]
 24744 009e 9A60     		str	r2, [r3, #8]
 282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx SQR1 Configuration -----------------*/
 283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx SQR1 value */
 284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->SQR1;
 24745              		.loc 1 284 0
 24746 00a0 7B68     		ldr	r3, [r7, #4]
 24747 00a2 DB6A     		ldr	r3, [r3, #44]
 24748 00a4 FB60     		str	r3, [r7, #12]
 285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear L bits */
 287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= SQR1_L_RESET;
 24749              		.loc 1 287 0
 24750 00a6 FB68     		ldr	r3, [r7, #12]
 24751 00a8 23F47003 		bic	r3, r3, #15728640
 24752 00ac FB60     		str	r3, [r7, #12]
 288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: regular channel sequence length */
 290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set L bits according to ADC_NbrOfConversion value */
 291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 24753              		.loc 1 291 0
 24754 00ae 3B68     		ldr	r3, [r7, #0]
 24755 00b0 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 24756 00b2 03F1FF33 		add	r3, r3, #-1
 24757 00b6 DAB2     		uxtb	r2, r3
 24758 00b8 FB7A     		ldrb	r3, [r7, #11]
 24759 00ba 42EA0303 		orr	r3, r2, r3
 24760 00be FB72     		strb	r3, [r7, #11]
 292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 24761              		.loc 1 292 0
 24762 00c0 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 24763 00c2 4FEA0353 		lsl	r3, r3, #20
 24764 00c6 FA68     		ldr	r2, [r7, #12]
 24765 00c8 42EA0303 		orr	r3, r2, r3
 24766 00cc FB60     		str	r3, [r7, #12]
 293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx SQR1 */
 295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SQR1 = tmpreg1;
 24767              		.loc 1 295 0
 24768 00ce 7B68     		ldr	r3, [r7, #4]
 24769 00d0 FA68     		ldr	r2, [r7, #12]
 24770 00d2 DA62     		str	r2, [r3, #44]
 296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 24771              		.loc 1 296 0
 24772 00d4 07F11407 		add	r7, r7, #20
 24773 00d8 BD46     		mov	sp, r7
 24774 00da 80BC     		pop	{r7}
 24775 00dc 7047     		bx	lr
 24776              	.L4:
 24777 00de 00BF     		.align	2
 24778              	.L3:
 24779 00e0 FDF7FFC0 		.word	-1056966659
 24780              		.cfi_endproc
 24781              	.LFE111:
 24783              		.align	2
 24784              		.global	ADC_StructInit
 24785              		.thumb
 24786              		.thumb_func
 24788              	ADC_StructInit:
 24789              	.LFB112:
 297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_InitStruct member with its default value.
 300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   This function is used to initialize the global features of the ADC ( 
 301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
 306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         be initialized.
 307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
 310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 24790              		.loc 1 310 0
 24791              		.cfi_startproc
 24792              		@ args = 0, pretend = 0, frame = 8
 24793              		@ frame_needed = 1, uses_anonymous_args = 0
 24794              		@ link register save eliminated.
 24795 00e4 80B4     		push	{r7}
 24796              	.LCFI5:
 24797              		.cfi_def_cfa_offset 4
 24798 00e6 83B0     		sub	sp, sp, #12
 24799              	.LCFI6:
 24800              		.cfi_def_cfa_offset 16
 24801 00e8 00AF     		add	r7, sp, #0
 24802              		.cfi_offset 7, -4
 24803              	.LCFI7:
 24804              		.cfi_def_cfa_register 7
 24805 00ea 7860     		str	r0, [r7, #4]
 311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 24806              		.loc 1 312 0
 24807 00ec 7B68     		ldr	r3, [r7, #4]
 24808 00ee 4FF00002 		mov	r2, #0
 24809 00f2 1A60     		str	r2, [r3, #0]
 313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* initialize the ADC_ScanConvMode member */
 315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 24810              		.loc 1 315 0
 24811 00f4 7B68     		ldr	r3, [r7, #4]
 24812 00f6 4FF00002 		mov	r2, #0
 24813 00fa 1A71     		strb	r2, [r3, #4]
 316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ContinuousConvMode member */
 318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 24814              		.loc 1 318 0
 24815 00fc 7B68     		ldr	r3, [r7, #4]
 24816 00fe 4FF00002 		mov	r2, #0
 24817 0102 5A71     		strb	r2, [r3, #5]
 319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConvEdge member */
 321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 24818              		.loc 1 321 0
 24819 0104 7B68     		ldr	r3, [r7, #4]
 24820 0106 4FF00002 		mov	r2, #0
 24821 010a 9A60     		str	r2, [r3, #8]
 322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConv member */
 324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 24822              		.loc 1 324 0
 24823 010c 7B68     		ldr	r3, [r7, #4]
 24824 010e 4FF00002 		mov	r2, #0
 24825 0112 DA60     		str	r2, [r3, #12]
 325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DataAlign member */
 327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 24826              		.loc 1 327 0
 24827 0114 7B68     		ldr	r3, [r7, #4]
 24828 0116 4FF00002 		mov	r2, #0
 24829 011a 1A61     		str	r2, [r3, #16]
 328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_NbrOfConversion member */
 330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_NbrOfConversion = 1;
 24830              		.loc 1 330 0
 24831 011c 7B68     		ldr	r3, [r7, #4]
 24832 011e 4FF00102 		mov	r2, #1
 24833 0122 1A75     		strb	r2, [r3, #20]
 331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 24834              		.loc 1 331 0
 24835 0124 07F10C07 		add	r7, r7, #12
 24836 0128 BD46     		mov	sp, r7
 24837 012a 80BC     		pop	{r7}
 24838 012c 7047     		bx	lr
 24839              		.cfi_endproc
 24840              	.LFE112:
 24842 012e 00BF     		.align	2
 24843              		.global	ADC_CommonInit
 24844              		.thumb
 24845              		.thumb_func
 24847              	ADC_CommonInit:
 24848              	.LFB113:
 332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCs peripherals according to the specified parameters 
 335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         in the ADC_CommonInitStruct.
 336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
 337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         that contains the configuration information for  All ADCs peripherals.
 338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 24849              		.loc 1 341 0
 24850              		.cfi_startproc
 24851              		@ args = 0, pretend = 0, frame = 16
 24852              		@ frame_needed = 1, uses_anonymous_args = 0
 24853              		@ link register save eliminated.
 24854 0130 80B4     		push	{r7}
 24855              	.LCFI8:
 24856              		.cfi_def_cfa_offset 4
 24857 0132 85B0     		sub	sp, sp, #20
 24858              	.LCFI9:
 24859              		.cfi_def_cfa_offset 24
 24860 0134 00AF     		add	r7, sp, #0
 24861              		.cfi_offset 7, -4
 24862              	.LCFI10:
 24863              		.cfi_def_cfa_register 7
 24864 0136 7860     		str	r0, [r7, #4]
 342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 24865              		.loc 1 342 0
 24866 0138 4FF00003 		mov	r3, #0
 24867 013c FB60     		str	r3, [r7, #12]
 343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_MODE(ADC_CommonInitStruct->ADC_Mode));
 345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
 346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
 347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
 348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADC CCR Configuration -----------------*/
 349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC CCR value */
 350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADC->CCR;
 24868              		.loc 1 350 0
 24869 013e 104B     		ldr	r3, .L7
 24870 0140 5B68     		ldr	r3, [r3, #4]
 24871 0142 FB60     		str	r3, [r7, #12]
 351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear MULTI, DELAY, DMA and ADCPRE bits */
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR_CLEAR_MASK;
 24872              		.loc 1 353 0
 24873 0144 FA68     		ldr	r2, [r7, #12]
 24874 0146 0F4B     		ldr	r3, .L7+4
 24875 0148 02EA0303 		and	r3, r2, r3
 24876 014c FB60     		str	r3, [r7, #12]
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: Multi mode, Delay between two sampling time, ADC prescaler,
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      and DMA access mode for multimode */
 357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set MULTI bits according to ADC_Mode value */
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set ADCPRE bits according to ADC_Prescaler value */
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set DMA bits according to ADC_DMAAccessMode value */
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 24877              		.loc 1 361 0
 24878 014e 7B68     		ldr	r3, [r7, #4]
 24879 0150 1A68     		ldr	r2, [r3, #0]
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 24880              		.loc 1 362 0
 24881 0152 7B68     		ldr	r3, [r7, #4]
 24882 0154 5B68     		ldr	r3, [r3, #4]
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 24883              		.loc 1 361 0
 24884 0156 1A43     		orrs	r2, r2, r3
 363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_DMAAccessMode | 
 24885              		.loc 1 363 0
 24886 0158 7B68     		ldr	r3, [r7, #4]
 24887 015a 9B68     		ldr	r3, [r3, #8]
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 24888              		.loc 1 362 0
 24889 015c 1A43     		orrs	r2, r2, r3
 364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 24890              		.loc 1 364 0
 24891 015e 7B68     		ldr	r3, [r7, #4]
 24892 0160 DB68     		ldr	r3, [r3, #12]
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 24893              		.loc 1 361 0
 24894 0162 42EA0303 		orr	r3, r2, r3
 24895 0166 FA68     		ldr	r2, [r7, #12]
 24896 0168 42EA0303 		orr	r3, r2, r3
 24897 016c FB60     		str	r3, [r7, #12]
 365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         
 366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADC CCR */
 367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC->CCR = tmpreg1;
 24898              		.loc 1 367 0
 24899 016e 044B     		ldr	r3, .L7
 24900 0170 FA68     		ldr	r2, [r7, #12]
 24901 0172 5A60     		str	r2, [r3, #4]
 368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 24902              		.loc 1 368 0
 24903 0174 07F11407 		add	r7, r7, #20
 24904 0178 BD46     		mov	sp, r7
 24905 017a 80BC     		pop	{r7}
 24906 017c 7047     		bx	lr
 24907              	.L8:
 24908 017e 00BF     		.align	2
 24909              	.L7:
 24910 0180 00230140 		.word	1073816320
 24911 0184 E030FCFF 		.word	-249632
 24912              		.cfi_endproc
 24913              	.LFE113:
 24915              		.align	2
 24916              		.global	ADC_CommonStructInit
 24917              		.thumb
 24918              		.thumb_func
 24920              	ADC_CommonStructInit:
 24921              	.LFB114:
 369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_CommonInitStruct member with its default value.
 372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
 373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         which will be initialized.
 374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 24922              		.loc 1 377 0
 24923              		.cfi_startproc
 24924              		@ args = 0, pretend = 0, frame = 8
 24925              		@ frame_needed = 1, uses_anonymous_args = 0
 24926              		@ link register save eliminated.
 24927 0188 80B4     		push	{r7}
 24928              	.LCFI11:
 24929              		.cfi_def_cfa_offset 4
 24930 018a 83B0     		sub	sp, sp, #12
 24931              	.LCFI12:
 24932              		.cfi_def_cfa_offset 16
 24933 018c 00AF     		add	r7, sp, #0
 24934              		.cfi_offset 7, -4
 24935              	.LCFI13:
 24936              		.cfi_def_cfa_register 7
 24937 018e 7860     		str	r0, [r7, #4]
 378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 24938              		.loc 1 379 0
 24939 0190 7B68     		ldr	r3, [r7, #4]
 24940 0192 4FF00002 		mov	r2, #0
 24941 0196 1A60     		str	r2, [r3, #0]
 380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* initialize the ADC_Prescaler member */
 382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 24942              		.loc 1 382 0
 24943 0198 7B68     		ldr	r3, [r7, #4]
 24944 019a 4FF00002 		mov	r2, #0
 24945 019e 5A60     		str	r2, [r3, #4]
 383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DMAAccessMode member */
 385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 24946              		.loc 1 385 0
 24947 01a0 7B68     		ldr	r3, [r7, #4]
 24948 01a2 4FF00002 		mov	r2, #0
 24949 01a6 9A60     		str	r2, [r3, #8]
 386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_TwoSamplingDelay member */
 388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 24950              		.loc 1 388 0
 24951 01a8 7B68     		ldr	r3, [r7, #4]
 24952 01aa 4FF00002 		mov	r2, #0
 24953 01ae DA60     		str	r2, [r3, #12]
 389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 24954              		.loc 1 389 0
 24955 01b0 07F10C07 		add	r7, r7, #12
 24956 01b4 BD46     		mov	sp, r7
 24957 01b6 80BC     		pop	{r7}
 24958 01b8 7047     		bx	lr
 24959              		.cfi_endproc
 24960              	.LFE114:
 24962 01ba 00BF     		.align	2
 24963              		.global	ADC_Cmd
 24964              		.thumb
 24965              		.thumb_func
 24967              	ADC_Cmd:
 24968              	.LFB115:
 390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC peripheral.
 393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the ADCx peripheral. 
 395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 24969              		.loc 1 399 0
 24970              		.cfi_startproc
 24971              		@ args = 0, pretend = 0, frame = 8
 24972              		@ frame_needed = 1, uses_anonymous_args = 0
 24973              		@ link register save eliminated.
 24974 01bc 80B4     		push	{r7}
 24975              	.LCFI14:
 24976              		.cfi_def_cfa_offset 4
 24977 01be 83B0     		sub	sp, sp, #12
 24978              	.LCFI15:
 24979              		.cfi_def_cfa_offset 16
 24980 01c0 00AF     		add	r7, sp, #0
 24981              		.cfi_offset 7, -4
 24982              	.LCFI16:
 24983              		.cfi_def_cfa_register 7
 24984 01c2 7860     		str	r0, [r7, #4]
 24985 01c4 0B46     		mov	r3, r1
 24986 01c6 FB70     		strb	r3, [r7, #3]
 400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 24987              		.loc 1 403 0
 24988 01c8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24989 01ca 002B     		cmp	r3, #0
 24990 01cc 06D0     		beq	.L11
 404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the ADON bit to wake up the ADC from power down mode */
 406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 24991              		.loc 1 406 0
 24992 01ce 7B68     		ldr	r3, [r7, #4]
 24993 01d0 9B68     		ldr	r3, [r3, #8]
 24994 01d2 43F00102 		orr	r2, r3, #1
 24995 01d6 7B68     		ldr	r3, [r7, #4]
 24996 01d8 9A60     		str	r2, [r3, #8]
 24997 01da 05E0     		b	.L10
 24998              	.L11:
 407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC peripheral */
 411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 24999              		.loc 1 411 0
 25000 01dc 7B68     		ldr	r3, [r7, #4]
 25001 01de 9B68     		ldr	r3, [r3, #8]
 25002 01e0 23F00102 		bic	r2, r3, #1
 25003 01e4 7B68     		ldr	r3, [r7, #4]
 25004 01e6 9A60     		str	r2, [r3, #8]
 25005              	.L10:
 412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25006              		.loc 1 413 0
 25007 01e8 07F10C07 		add	r7, r7, #12
 25008 01ec BD46     		mov	sp, r7
 25009 01ee 80BC     		pop	{r7}
 25010 01f0 7047     		bx	lr
 25011              		.cfi_endproc
 25012              	.LFE115:
 25014 01f2 00BF     		.align	2
 25015              		.global	ADC_AnalogWatchdogCmd
 25016              		.thumb
 25017              		.thumb_func
 25019              	ADC_AnalogWatchdogCmd:
 25020              	.LFB116:
 414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group2 Analog Watchdog configuration functions
 419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief    Analog Watchdog configuration functions 
 420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                     Analog Watchdog configuration functions
 424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the Analog Watchdog
 427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   (AWD) feature in the ADC.
 428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration Analog Watchdog is done following these steps :
 430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. the ADC guarded channel(s) is (are) selected using the 
 431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_AnalogWatchdogSingleChannelConfig() function.
 432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. The Analog watchdog lower and higher threshold are configured using the  
 433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      ADC_AnalogWatchdogThresholdsConfig() function.
 434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. The Analog watchdog is enabled and configured to enable the check, on one
 435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       or more channels, using the  ADC_AnalogWatchdogCmd() function.
 436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the analog watchdog on single/all regular or 
 443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         injected channels
 444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_AnalogWatchdog: the ADC analog watchdog configuration.
 446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         This parameter can be one of the following values:
 447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegEnable: Analog watchdog on a single regular channel
 448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleInjecEnable: Analog watchdog on a single injected chan
 449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegOrInjecEnable: Analog watchdog on a single regular 
 450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegEnable: Analog watchdog on all regular channel
 451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllInjecEnable: Analog watchdog on all injected channel
 452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and inj
 453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
 454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None	  
 455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
 457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25021              		.loc 1 457 0
 25022              		.cfi_startproc
 25023              		@ args = 0, pretend = 0, frame = 16
 25024              		@ frame_needed = 1, uses_anonymous_args = 0
 25025              		@ link register save eliminated.
 25026 01f4 80B4     		push	{r7}
 25027              	.LCFI17:
 25028              		.cfi_def_cfa_offset 4
 25029 01f6 85B0     		sub	sp, sp, #20
 25030              	.LCFI18:
 25031              		.cfi_def_cfa_offset 24
 25032 01f8 00AF     		add	r7, sp, #0
 25033              		.cfi_offset 7, -4
 25034              	.LCFI19:
 25035              		.cfi_def_cfa_register 7
 25036 01fa 7860     		str	r0, [r7, #4]
 25037 01fc 3960     		str	r1, [r7, #0]
 458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 25038              		.loc 1 458 0
 25039 01fe 4FF00003 		mov	r3, #0
 25040 0202 FB60     		str	r3, [r7, #12]
 459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
 462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 25041              		.loc 1 464 0
 25042 0204 7B68     		ldr	r3, [r7, #4]
 25043 0206 5B68     		ldr	r3, [r3, #4]
 25044 0208 FB60     		str	r3, [r7, #12]
 465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear AWDEN, JAWDEN and AWDSGL bits */
 467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDMode_RESET;
 25045              		.loc 1 467 0
 25046 020a FB68     		ldr	r3, [r7, #12]
 25047 020c 23F44003 		bic	r3, r3, #12582912
 25048 0210 23F40073 		bic	r3, r3, #512
 25049 0214 FB60     		str	r3, [r7, #12]
 468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the analog watchdog enable mode */
 470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_AnalogWatchdog;
 25050              		.loc 1 470 0
 25051 0216 FA68     		ldr	r2, [r7, #12]
 25052 0218 3B68     		ldr	r3, [r7, #0]
 25053 021a 42EA0303 		orr	r3, r2, r3
 25054 021e FB60     		str	r3, [r7, #12]
 471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 25055              		.loc 1 473 0
 25056 0220 7B68     		ldr	r3, [r7, #4]
 25057 0222 FA68     		ldr	r2, [r7, #12]
 25058 0224 5A60     		str	r2, [r3, #4]
 474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25059              		.loc 1 474 0
 25060 0226 07F11407 		add	r7, r7, #20
 25061 022a BD46     		mov	sp, r7
 25062 022c 80BC     		pop	{r7}
 25063 022e 7047     		bx	lr
 25064              		.cfi_endproc
 25065              	.LFE116:
 25067              		.align	2
 25068              		.global	ADC_AnalogWatchdogThresholdsConfig
 25069              		.thumb
 25070              		.thumb_func
 25072              	ADC_AnalogWatchdogThresholdsConfig:
 25073              	.LFB117:
 475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the high and low thresholds of the analog watchdog.
 478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  HighThreshold: the ADC analog watchdog High threshold value.
 480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  LowThreshold:  the ADC analog watchdog Low threshold value.
 482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
 486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                         uint16_t LowThreshold)
 487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25074              		.loc 1 487 0
 25075              		.cfi_startproc
 25076              		@ args = 0, pretend = 0, frame = 8
 25077              		@ frame_needed = 1, uses_anonymous_args = 0
 25078              		@ link register save eliminated.
 25079 0230 80B4     		push	{r7}
 25080              	.LCFI20:
 25081              		.cfi_def_cfa_offset 4
 25082 0232 83B0     		sub	sp, sp, #12
 25083              	.LCFI21:
 25084              		.cfi_def_cfa_offset 16
 25085 0234 00AF     		add	r7, sp, #0
 25086              		.cfi_offset 7, -4
 25087              	.LCFI22:
 25088              		.cfi_def_cfa_register 7
 25089 0236 7860     		str	r0, [r7, #4]
 25090 0238 1346     		mov	r3, r2
 25091 023a 0A46     		mov	r2, r1	@ movhi
 25092 023c 7A80     		strh	r2, [r7, #2]	@ movhi
 25093 023e 3B80     		strh	r3, [r7, #0]	@ movhi
 488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(HighThreshold));
 491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(LowThreshold));
 492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the ADCx high threshold */
 494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->HTR = HighThreshold;
 25094              		.loc 1 494 0
 25095 0240 7A88     		ldrh	r2, [r7, #2]
 25096 0242 7B68     		ldr	r3, [r7, #4]
 25097 0244 5A62     		str	r2, [r3, #36]
 495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the ADCx low threshold */
 497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->LTR = LowThreshold;
 25098              		.loc 1 497 0
 25099 0246 3A88     		ldrh	r2, [r7, #0]
 25100 0248 7B68     		ldr	r3, [r7, #4]
 25101 024a 9A62     		str	r2, [r3, #40]
 498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25102              		.loc 1 498 0
 25103 024c 07F10C07 		add	r7, r7, #12
 25104 0250 BD46     		mov	sp, r7
 25105 0252 80BC     		pop	{r7}
 25106 0254 7047     		bx	lr
 25107              		.cfi_endproc
 25108              	.LFE117:
 25110 0256 00BF     		.align	2
 25111              		.global	ADC_AnalogWatchdogSingleChannelConfig
 25112              		.thumb
 25113              		.thumb_func
 25115              	ADC_AnalogWatchdogSingleChannelConfig:
 25116              	.LFB118:
 499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the analog watchdog guarded single channel
 502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
 504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected
 524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
 527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25117              		.loc 1 527 0
 25118              		.cfi_startproc
 25119              		@ args = 0, pretend = 0, frame = 16
 25120              		@ frame_needed = 1, uses_anonymous_args = 0
 25121              		@ link register save eliminated.
 25122 0258 80B4     		push	{r7}
 25123              	.LCFI23:
 25124              		.cfi_def_cfa_offset 4
 25125 025a 85B0     		sub	sp, sp, #20
 25126              	.LCFI24:
 25127              		.cfi_def_cfa_offset 24
 25128 025c 00AF     		add	r7, sp, #0
 25129              		.cfi_offset 7, -4
 25130              	.LCFI25:
 25131              		.cfi_def_cfa_register 7
 25132 025e 7860     		str	r0, [r7, #4]
 25133 0260 0B46     		mov	r3, r1
 25134 0262 FB70     		strb	r3, [r7, #3]
 528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 25135              		.loc 1 528 0
 25136 0264 4FF00003 		mov	r3, #0
 25137 0268 FB60     		str	r3, [r7, #12]
 529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 25138              		.loc 1 534 0
 25139 026a 7B68     		ldr	r3, [r7, #4]
 25140 026c 5B68     		ldr	r3, [r3, #4]
 25141 026e FB60     		str	r3, [r7, #12]
 535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the Analog watchdog channel select bits */
 537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDCH_RESET;
 25142              		.loc 1 537 0
 25143 0270 FB68     		ldr	r3, [r7, #12]
 25144 0272 23F01F03 		bic	r3, r3, #31
 25145 0276 FB60     		str	r3, [r7, #12]
 538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the Analog watchdog channel */
 540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_Channel;
 25146              		.loc 1 540 0
 25147 0278 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25148 027a FA68     		ldr	r2, [r7, #12]
 25149 027c 42EA0303 		orr	r3, r2, r3
 25150 0280 FB60     		str	r3, [r7, #12]
 541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 25151              		.loc 1 543 0
 25152 0282 7B68     		ldr	r3, [r7, #4]
 25153 0284 FA68     		ldr	r2, [r7, #12]
 25154 0286 5A60     		str	r2, [r3, #4]
 544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25155              		.loc 1 544 0
 25156 0288 07F11407 		add	r7, r7, #20
 25157 028c BD46     		mov	sp, r7
 25158 028e 80BC     		pop	{r7}
 25159 0290 7047     		bx	lr
 25160              		.cfi_endproc
 25161              	.LFE118:
 25163 0292 00BF     		.align	2
 25164              		.global	ADC_TempSensorVrefintCmd
 25165              		.thumb
 25166              		.thumb_func
 25168              	ADC_TempSensorVrefintCmd:
 25169              	.LFB119:
 545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group3 Temperature Sensor, Vrefint (Voltage Reference internal) 
 550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *            and VBAT (Voltage BATtery) management functions
 551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Temperature Sensor, Vrefint and VBAT management functions 
 552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                Temperature Sensor, Vrefint and VBAT management functions
 556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to enable/ disable the internal 
 559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   connections between the ADC and the Temperature Sensor, the Vrefint and the
 560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Vbat sources.
 561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration to get the Temperature sensor and Vrefint channels 
 563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   voltages is done following these steps :
 564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. Enable the internal connection of Temperature sensor and Vrefint sources 
 565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       with the ADC channels using ADC_TempSensorVrefintCmd() function. 
 566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Select the ADC_Channel_TempSensor and/or ADC_Channel_Vrefint using 
 567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_RegularChannelConfig() or  ADC_InjectedChannelConfig() functions 
 568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. Get the voltage values, using ADC_GetConversionValue() or  
 569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_GetInjectedConversionValue().
 570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration to get the VBAT channel voltage is done following 
 572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   these steps :
 573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. Enable the internal connection of VBAT source with the ADC channel using 
 574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_VBATCmd() function. 
 575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Select the ADC_Channel_Vbat using ADC_RegularChannelConfig() or  
 576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_InjectedChannelConfig() functions 
 577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. Get the voltage value, using ADC_GetConversionValue() or  
 578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_GetInjectedConversionValue().
 579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  
 580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the temperature sensor and Vrefint channels.
 587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the temperature sensor and Vrefint channels.
 588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
 592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25170              		.loc 1 592 0
 25171              		.cfi_startproc
 25172              		@ args = 0, pretend = 0, frame = 8
 25173              		@ frame_needed = 1, uses_anonymous_args = 0
 25174              		@ link register save eliminated.
 25175 0294 80B4     		push	{r7}
 25176              	.LCFI26:
 25177              		.cfi_def_cfa_offset 4
 25178 0296 83B0     		sub	sp, sp, #12
 25179              	.LCFI27:
 25180              		.cfi_def_cfa_offset 16
 25181 0298 00AF     		add	r7, sp, #0
 25182              		.cfi_offset 7, -4
 25183              	.LCFI28:
 25184              		.cfi_def_cfa_register 7
 25185 029a 0346     		mov	r3, r0
 25186 029c FB71     		strb	r3, [r7, #7]
 593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 25187              		.loc 1 595 0
 25188 029e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 25189 02a0 002B     		cmp	r3, #0
 25190 02a2 06D0     		beq	.L17
 596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the temperature sensor and Vrefint channel*/
 598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 25191              		.loc 1 598 0
 25192 02a4 084B     		ldr	r3, .L19
 25193 02a6 084A     		ldr	r2, .L19
 25194 02a8 5268     		ldr	r2, [r2, #4]
 25195 02aa 42F40002 		orr	r2, r2, #8388608
 25196 02ae 5A60     		str	r2, [r3, #4]
 25197 02b0 05E0     		b	.L16
 25198              	.L17:
 599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the temperature sensor and Vrefint channel*/
 603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 25199              		.loc 1 603 0
 25200 02b2 054B     		ldr	r3, .L19
 25201 02b4 044A     		ldr	r2, .L19
 25202 02b6 5268     		ldr	r2, [r2, #4]
 25203 02b8 22F40002 		bic	r2, r2, #8388608
 25204 02bc 5A60     		str	r2, [r3, #4]
 25205              	.L16:
 604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25206              		.loc 1 605 0
 25207 02be 07F10C07 		add	r7, r7, #12
 25208 02c2 BD46     		mov	sp, r7
 25209 02c4 80BC     		pop	{r7}
 25210 02c6 7047     		bx	lr
 25211              	.L20:
 25212              		.align	2
 25213              	.L19:
 25214 02c8 00230140 		.word	1073816320
 25215              		.cfi_endproc
 25216              	.LFE119:
 25218              		.align	2
 25219              		.global	ADC_VBATCmd
 25220              		.thumb
 25221              		.thumb_func
 25223              	ADC_VBATCmd:
 25224              	.LFB120:
 606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the VBAT (Voltage Battery) channel.
 609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the VBAT channel.
 610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_VBATCmd(FunctionalState NewState)                             
 614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25225              		.loc 1 614 0
 25226              		.cfi_startproc
 25227              		@ args = 0, pretend = 0, frame = 8
 25228              		@ frame_needed = 1, uses_anonymous_args = 0
 25229              		@ link register save eliminated.
 25230 02cc 80B4     		push	{r7}
 25231              	.LCFI29:
 25232              		.cfi_def_cfa_offset 4
 25233 02ce 83B0     		sub	sp, sp, #12
 25234              	.LCFI30:
 25235              		.cfi_def_cfa_offset 16
 25236 02d0 00AF     		add	r7, sp, #0
 25237              		.cfi_offset 7, -4
 25238              	.LCFI31:
 25239              		.cfi_def_cfa_register 7
 25240 02d2 0346     		mov	r3, r0
 25241 02d4 FB71     		strb	r3, [r7, #7]
 615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 25242              		.loc 1 617 0
 25243 02d6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 25244 02d8 002B     		cmp	r3, #0
 25245 02da 06D0     		beq	.L22
 618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the VBAT channel*/
 620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 25246              		.loc 1 620 0
 25247 02dc 084B     		ldr	r3, .L24
 25248 02de 084A     		ldr	r2, .L24
 25249 02e0 5268     		ldr	r2, [r2, #4]
 25250 02e2 42F48002 		orr	r2, r2, #4194304
 25251 02e6 5A60     		str	r2, [r3, #4]
 25252 02e8 05E0     		b	.L21
 25253              	.L22:
 621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the VBAT channel*/
 625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 25254              		.loc 1 625 0
 25255 02ea 054B     		ldr	r3, .L24
 25256 02ec 044A     		ldr	r2, .L24
 25257 02ee 5268     		ldr	r2, [r2, #4]
 25258 02f0 22F48002 		bic	r2, r2, #4194304
 25259 02f4 5A60     		str	r2, [r3, #4]
 25260              	.L21:
 626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25261              		.loc 1 627 0
 25262 02f6 07F10C07 		add	r7, r7, #12
 25263 02fa BD46     		mov	sp, r7
 25264 02fc 80BC     		pop	{r7}
 25265 02fe 7047     		bx	lr
 25266              	.L25:
 25267              		.align	2
 25268              	.L24:
 25269 0300 00230140 		.word	1073816320
 25270              		.cfi_endproc
 25271              	.LFE120:
 25273              		.align	2
 25274              		.global	ADC_RegularChannelConfig
 25275              		.thumb
 25276              		.thumb_func
 25278              	ADC_RegularChannelConfig:
 25279              	.LFB121:
 628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group4 Regular Channels Configuration functions
 634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels Configuration functions 
 635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                   Regular Channels Configuration functions
 639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to manage the ADC's regular channels,
 642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is composed of 2 sub sections : 
 643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   1. Configuration and management functions for regular channels: This subsection 
 645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      provides functions allowing to configure the ADC regular channels :    
 646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Configure the rank in the regular group sequencer for each channel
 647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Configure the sampling time for each channel
 648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - select the conversion Trigger for regular channels
 649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - select the desired EOC event behavior configuration
 650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Activate the continuous Mode  (*)
 651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Activate the Discontinuous Mode 
 652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      Please Note that the following features for regular channels are configurated
 653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      using the ADC_Init() function : 
 654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - scan mode activation 
 655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - continuous mode activation (**) 
 656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - External trigger source  
 657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - External trigger edge 
 658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - number of conversion in the regular channels group sequencer.
 659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      @note (*) and (**) are performing the same configuration
 661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   2. Get the conversion data: This subsection provides an important function in 
 663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      the ADC peripheral since it returns the converted data of the current 
 664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular channel. When the Conversion value is read, the EOC Flag is 
 665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      automatically cleared.
 666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      @note For multi ADC mode, the last ADC1, ADC2 and ADC3 regular conversions 
 668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****            results data (in the selected multi mode) can be returned in the same 
 669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****            time using ADC_GetMultiModeConversionValue() function. 
 670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****        
 671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
 677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
 678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
 700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the regular group sequencer.
 701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 16.
 702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
 705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
 706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
 707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
 708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
 709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
 710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
 711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
 712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sam
 715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25280              		.loc 1 715 0
 25281              		.cfi_startproc
 25282              		@ args = 0, pretend = 0, frame = 16
 25283              		@ frame_needed = 1, uses_anonymous_args = 0
 25284              		@ link register save eliminated.
 25285 0304 80B4     		push	{r7}
 25286              	.LCFI32:
 25287              		.cfi_def_cfa_offset 4
 25288 0306 85B0     		sub	sp, sp, #20
 25289              	.LCFI33:
 25290              		.cfi_def_cfa_offset 24
 25291 0308 00AF     		add	r7, sp, #0
 25292              		.cfi_offset 7, -4
 25293              	.LCFI34:
 25294              		.cfi_def_cfa_register 7
 25295 030a 7860     		str	r0, [r7, #4]
 25296 030c F970     		strb	r1, [r7, #3]
 25297 030e BA70     		strb	r2, [r7, #2]
 25298 0310 7B70     		strb	r3, [r7, #1]
 716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
 25299              		.loc 1 716 0
 25300 0312 4FF00003 		mov	r3, #0
 25301 0316 FB60     		str	r3, [r7, #12]
 25302 0318 4FF00003 		mov	r3, #0
 25303 031c BB60     		str	r3, [r7, #8]
 717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(Rank));
 721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
 724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 25304              		.loc 1 724 0
 25305 031e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25306 0320 092B     		cmp	r3, #9
 25307 0322 29D9     		bls	.L27
 725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 25308              		.loc 1 727 0
 25309 0324 7B68     		ldr	r3, [r7, #4]
 25310 0326 DB68     		ldr	r3, [r3, #12]
 25311 0328 FB60     		str	r3, [r7, #12]
 728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 25312              		.loc 1 730 0
 25313 032a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 25314 032c 1346     		mov	r3, r2
 25315 032e 4FEA4303 		lsl	r3, r3, #1
 25316 0332 9B18     		adds	r3, r3, r2
 25317 0334 A3F11E03 		sub	r3, r3, #30
 25318 0338 4FF00702 		mov	r2, #7
 25319 033c 02FA03F3 		lsl	r3, r2, r3
 25320 0340 BB60     		str	r3, [r7, #8]
 731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 25321              		.loc 1 733 0
 25322 0342 BB68     		ldr	r3, [r7, #8]
 25323 0344 6FEA0303 		mvn	r3, r3
 25324 0348 FA68     		ldr	r2, [r7, #12]
 25325 034a 02EA0303 		and	r3, r2, r3
 25326 034e FB60     		str	r3, [r7, #12]
 734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 25327              		.loc 1 736 0
 25328 0350 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 25329 0352 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 25330 0354 1346     		mov	r3, r2
 25331 0356 4FEA4303 		lsl	r3, r3, #1
 25332 035a 9B18     		adds	r3, r3, r2
 25333 035c A3F11E03 		sub	r3, r3, #30
 25334 0360 01FA03F3 		lsl	r3, r1, r3
 25335 0364 BB60     		str	r3, [r7, #8]
 737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 25336              		.loc 1 739 0
 25337 0366 FA68     		ldr	r2, [r7, #12]
 25338 0368 BB68     		ldr	r3, [r7, #8]
 25339 036a 42EA0303 		orr	r3, r2, r3
 25340 036e FB60     		str	r3, [r7, #12]
 740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 25341              		.loc 1 742 0
 25342 0370 7B68     		ldr	r3, [r7, #4]
 25343 0372 FA68     		ldr	r2, [r7, #12]
 25344 0374 DA60     		str	r2, [r3, #12]
 25345 0376 24E0     		b	.L28
 25346              	.L27:
 743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 25347              		.loc 1 747 0
 25348 0378 7B68     		ldr	r3, [r7, #4]
 25349 037a 1B69     		ldr	r3, [r3, #16]
 25350 037c FB60     		str	r3, [r7, #12]
 748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 25351              		.loc 1 750 0
 25352 037e FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 25353 0380 1346     		mov	r3, r2
 25354 0382 4FEA4303 		lsl	r3, r3, #1
 25355 0386 9B18     		adds	r3, r3, r2
 25356 0388 4FF00702 		mov	r2, #7
 25357 038c 02FA03F3 		lsl	r3, r2, r3
 25358 0390 BB60     		str	r3, [r7, #8]
 751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 25359              		.loc 1 753 0
 25360 0392 BB68     		ldr	r3, [r7, #8]
 25361 0394 6FEA0303 		mvn	r3, r3
 25362 0398 FA68     		ldr	r2, [r7, #12]
 25363 039a 02EA0303 		and	r3, r2, r3
 25364 039e FB60     		str	r3, [r7, #12]
 754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 25365              		.loc 1 756 0
 25366 03a0 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 25367 03a2 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 25368 03a4 1346     		mov	r3, r2
 25369 03a6 4FEA4303 		lsl	r3, r3, #1
 25370 03aa 9B18     		adds	r3, r3, r2
 25371 03ac 01FA03F3 		lsl	r3, r1, r3
 25372 03b0 BB60     		str	r3, [r7, #8]
 757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 25373              		.loc 1 759 0
 25374 03b2 FA68     		ldr	r2, [r7, #12]
 25375 03b4 BB68     		ldr	r3, [r7, #8]
 25376 03b6 42EA0303 		orr	r3, r2, r3
 25377 03ba FB60     		str	r3, [r7, #12]
 760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 25378              		.loc 1 762 0
 25379 03bc 7B68     		ldr	r3, [r7, #4]
 25380 03be FA68     		ldr	r2, [r7, #12]
 25381 03c0 1A61     		str	r2, [r3, #16]
 25382              	.L28:
 763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 1 to 6 */
 765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (Rank < 7)
 25383              		.loc 1 765 0
 25384 03c2 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 25385 03c4 062B     		cmp	r3, #6
 25386 03c6 29D8     		bhi	.L29
 766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR3;
 25387              		.loc 1 768 0
 25388 03c8 7B68     		ldr	r3, [r7, #4]
 25389 03ca 5B6B     		ldr	r3, [r3, #52]
 25390 03cc FB60     		str	r3, [r7, #12]
 769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 25391              		.loc 1 771 0
 25392 03ce BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 25393 03d0 03F1FF32 		add	r2, r3, #-1
 25394 03d4 1346     		mov	r3, r2
 25395 03d6 4FEA8303 		lsl	r3, r3, #2
 25396 03da 9B18     		adds	r3, r3, r2
 25397 03dc 4FF01F02 		mov	r2, #31
 25398 03e0 02FA03F3 		lsl	r3, r2, r3
 25399 03e4 BB60     		str	r3, [r7, #8]
 772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 25400              		.loc 1 774 0
 25401 03e6 BB68     		ldr	r3, [r7, #8]
 25402 03e8 6FEA0303 		mvn	r3, r3
 25403 03ec FA68     		ldr	r2, [r7, #12]
 25404 03ee 02EA0303 		and	r3, r2, r3
 25405 03f2 FB60     		str	r3, [r7, #12]
 775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 25406              		.loc 1 777 0
 25407 03f4 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 25408 03f6 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 25409 03f8 03F1FF32 		add	r2, r3, #-1
 25410 03fc 1346     		mov	r3, r2
 25411 03fe 4FEA8303 		lsl	r3, r3, #2
 25412 0402 9B18     		adds	r3, r3, r2
 25413 0404 01FA03F3 		lsl	r3, r1, r3
 25414 0408 BB60     		str	r3, [r7, #8]
 778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 25415              		.loc 1 780 0
 25416 040a FA68     		ldr	r2, [r7, #12]
 25417 040c BB68     		ldr	r3, [r7, #8]
 25418 040e 42EA0303 		orr	r3, r2, r3
 25419 0412 FB60     		str	r3, [r7, #12]
 781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR3 = tmpreg1;
 25420              		.loc 1 783 0
 25421 0414 7B68     		ldr	r3, [r7, #4]
 25422 0416 FA68     		ldr	r2, [r7, #12]
 25423 0418 5A63     		str	r2, [r3, #52]
 25424 041a 55E0     		b	.L26
 25425              	.L29:
 784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 7 to 12 */
 786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else if (Rank < 13)
 25426              		.loc 1 786 0
 25427 041c BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 25428 041e 0C2B     		cmp	r3, #12
 25429 0420 29D8     		bhi	.L31
 787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR2;
 25430              		.loc 1 789 0
 25431 0422 7B68     		ldr	r3, [r7, #4]
 25432 0424 1B6B     		ldr	r3, [r3, #48]
 25433 0426 FB60     		str	r3, [r7, #12]
 790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 25434              		.loc 1 792 0
 25435 0428 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 25436 042a 1346     		mov	r3, r2
 25437 042c 4FEA8303 		lsl	r3, r3, #2
 25438 0430 9B18     		adds	r3, r3, r2
 25439 0432 A3F12303 		sub	r3, r3, #35
 25440 0436 4FF01F02 		mov	r2, #31
 25441 043a 02FA03F3 		lsl	r3, r2, r3
 25442 043e BB60     		str	r3, [r7, #8]
 793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 25443              		.loc 1 795 0
 25444 0440 BB68     		ldr	r3, [r7, #8]
 25445 0442 6FEA0303 		mvn	r3, r3
 25446 0446 FA68     		ldr	r2, [r7, #12]
 25447 0448 02EA0303 		and	r3, r2, r3
 25448 044c FB60     		str	r3, [r7, #12]
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 25449              		.loc 1 798 0
 25450 044e F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 25451 0450 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 25452 0452 1346     		mov	r3, r2
 25453 0454 4FEA8303 		lsl	r3, r3, #2
 25454 0458 9B18     		adds	r3, r3, r2
 25455 045a A3F12303 		sub	r3, r3, #35
 25456 045e 01FA03F3 		lsl	r3, r1, r3
 25457 0462 BB60     		str	r3, [r7, #8]
 799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 25458              		.loc 1 801 0
 25459 0464 FA68     		ldr	r2, [r7, #12]
 25460 0466 BB68     		ldr	r3, [r7, #8]
 25461 0468 42EA0303 		orr	r3, r2, r3
 25462 046c FB60     		str	r3, [r7, #12]
 802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR2 = tmpreg1;
 25463              		.loc 1 804 0
 25464 046e 7B68     		ldr	r3, [r7, #4]
 25465 0470 FA68     		ldr	r2, [r7, #12]
 25466 0472 1A63     		str	r2, [r3, #48]
 25467 0474 28E0     		b	.L26
 25468              	.L31:
 805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 13 to 16 */
 807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR1;
 25469              		.loc 1 810 0
 25470 0476 7B68     		ldr	r3, [r7, #4]
 25471 0478 DB6A     		ldr	r3, [r3, #44]
 25472 047a FB60     		str	r3, [r7, #12]
 811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 25473              		.loc 1 813 0
 25474 047c BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 25475 047e 1346     		mov	r3, r2
 25476 0480 4FEA8303 		lsl	r3, r3, #2
 25477 0484 9B18     		adds	r3, r3, r2
 25478 0486 A3F14103 		sub	r3, r3, #65
 25479 048a 4FF01F02 		mov	r2, #31
 25480 048e 02FA03F3 		lsl	r3, r2, r3
 25481 0492 BB60     		str	r3, [r7, #8]
 814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 25482              		.loc 1 816 0
 25483 0494 BB68     		ldr	r3, [r7, #8]
 25484 0496 6FEA0303 		mvn	r3, r3
 25485 049a FA68     		ldr	r2, [r7, #12]
 25486 049c 02EA0303 		and	r3, r2, r3
 25487 04a0 FB60     		str	r3, [r7, #12]
 817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 25488              		.loc 1 819 0
 25489 04a2 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 25490 04a4 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 25491 04a6 1346     		mov	r3, r2
 25492 04a8 4FEA8303 		lsl	r3, r3, #2
 25493 04ac 9B18     		adds	r3, r3, r2
 25494 04ae A3F14103 		sub	r3, r3, #65
 25495 04b2 01FA03F3 		lsl	r3, r1, r3
 25496 04b6 BB60     		str	r3, [r7, #8]
 820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 25497              		.loc 1 822 0
 25498 04b8 FA68     		ldr	r2, [r7, #12]
 25499 04ba BB68     		ldr	r3, [r7, #8]
 25500 04bc 42EA0303 		orr	r3, r2, r3
 25501 04c0 FB60     		str	r3, [r7, #12]
 823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR1 = tmpreg1;
 25502              		.loc 1 825 0
 25503 04c2 7B68     		ldr	r3, [r7, #4]
 25504 04c4 FA68     		ldr	r2, [r7, #12]
 25505 04c6 DA62     		str	r2, [r3, #44]
 25506              	.L26:
 826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25507              		.loc 1 827 0
 25508 04c8 07F11407 		add	r7, r7, #20
 25509 04cc BD46     		mov	sp, r7
 25510 04ce 80BC     		pop	{r7}
 25511 04d0 7047     		bx	lr
 25512              		.cfi_endproc
 25513              	.LFE121:
 25515 04d2 00BF     		.align	2
 25516              		.global	ADC_SoftwareStartConv
 25517              		.thumb
 25518              		.thumb_func
 25520              	ADC_SoftwareStartConv:
 25521              	.LFB122:
 828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the regular channels.
 831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
 835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25522              		.loc 1 835 0
 25523              		.cfi_startproc
 25524              		@ args = 0, pretend = 0, frame = 8
 25525              		@ frame_needed = 1, uses_anonymous_args = 0
 25526              		@ link register save eliminated.
 25527 04d4 80B4     		push	{r7}
 25528              	.LCFI35:
 25529              		.cfi_def_cfa_offset 4
 25530 04d6 83B0     		sub	sp, sp, #12
 25531              	.LCFI36:
 25532              		.cfi_def_cfa_offset 16
 25533 04d8 00AF     		add	r7, sp, #0
 25534              		.cfi_offset 7, -4
 25535              	.LCFI37:
 25536              		.cfi_def_cfa_register 7
 25537 04da 7860     		str	r0, [r7, #4]
 836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for regular group */
 840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 25538              		.loc 1 840 0
 25539 04dc 7B68     		ldr	r3, [r7, #4]
 25540 04de 9B68     		ldr	r3, [r3, #8]
 25541 04e0 43F08042 		orr	r2, r3, #1073741824
 25542 04e4 7B68     		ldr	r3, [r7, #4]
 25543 04e6 9A60     		str	r2, [r3, #8]
 841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25544              		.loc 1 841 0
 25545 04e8 07F10C07 		add	r7, r7, #12
 25546 04ec BD46     		mov	sp, r7
 25547 04ee 80BC     		pop	{r7}
 25548 04f0 7047     		bx	lr
 25549              		.cfi_endproc
 25550              	.LFE122:
 25552 04f2 00BF     		.align	2
 25553              		.global	ADC_GetSoftwareStartConvStatus
 25554              		.thumb
 25555              		.thumb_func
 25557              	ADC_GetSoftwareStartConvStatus:
 25558              	.LFB123:
 842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start regular conversion Status.
 845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start conversion (SET or RESET).
 847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
 849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25559              		.loc 1 849 0
 25560              		.cfi_startproc
 25561              		@ args = 0, pretend = 0, frame = 16
 25562              		@ frame_needed = 1, uses_anonymous_args = 0
 25563              		@ link register save eliminated.
 25564 04f4 80B4     		push	{r7}
 25565              	.LCFI38:
 25566              		.cfi_def_cfa_offset 4
 25567 04f6 85B0     		sub	sp, sp, #20
 25568              	.LCFI39:
 25569              		.cfi_def_cfa_offset 24
 25570 04f8 00AF     		add	r7, sp, #0
 25571              		.cfi_offset 7, -4
 25572              	.LCFI40:
 25573              		.cfi_def_cfa_register 7
 25574 04fa 7860     		str	r0, [r7, #4]
 850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 25575              		.loc 1 850 0
 25576 04fc 4FF00003 		mov	r3, #0
 25577 0500 FB73     		strb	r3, [r7, #15]
 851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of SWSTART bit */
 855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 25578              		.loc 1 855 0
 25579 0502 7B68     		ldr	r3, [r7, #4]
 25580 0504 9B68     		ldr	r3, [r3, #8]
 25581 0506 03F48003 		and	r3, r3, #4194304
 25582 050a 002B     		cmp	r3, #0
 25583 050c 03D0     		beq	.L34
 856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* SWSTART bit is set */
 858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 25584              		.loc 1 858 0
 25585 050e 4FF00103 		mov	r3, #1
 25586 0512 FB73     		strb	r3, [r7, #15]
 25587 0514 02E0     		b	.L35
 25588              	.L34:
 859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* SWSTART bit is reset */
 863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 25589              		.loc 1 863 0
 25590 0516 4FF00003 		mov	r3, #0
 25591 051a FB73     		strb	r3, [r7, #15]
 25592              	.L35:
 864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the SWSTART bit status */
 867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 25593              		.loc 1 867 0
 25594 051c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25595              		.loc 1 868 0
 25596 051e 1846     		mov	r0, r3
 25597 0520 07F11407 		add	r7, r7, #20
 25598 0524 BD46     		mov	sp, r7
 25599 0526 80BC     		pop	{r7}
 25600 0528 7047     		bx	lr
 25601              		.cfi_endproc
 25602              	.LFE123:
 25604 052a 00BF     		.align	2
 25605              		.global	ADC_EOCOnEachRegularChannelCmd
 25606              		.thumb
 25607              		.thumb_func
 25609              	ADC_EOCOnEachRegularChannelCmd:
 25610              	.LFB124:
 869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the EOC on each regular channel conversion
 873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC EOC flag rising
 875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25611              		.loc 1 879 0
 25612              		.cfi_startproc
 25613              		@ args = 0, pretend = 0, frame = 8
 25614              		@ frame_needed = 1, uses_anonymous_args = 0
 25615              		@ link register save eliminated.
 25616 052c 80B4     		push	{r7}
 25617              	.LCFI41:
 25618              		.cfi_def_cfa_offset 4
 25619 052e 83B0     		sub	sp, sp, #12
 25620              	.LCFI42:
 25621              		.cfi_def_cfa_offset 16
 25622 0530 00AF     		add	r7, sp, #0
 25623              		.cfi_offset 7, -4
 25624              	.LCFI43:
 25625              		.cfi_def_cfa_register 7
 25626 0532 7860     		str	r0, [r7, #4]
 25627 0534 0B46     		mov	r3, r1
 25628 0536 FB70     		strb	r3, [r7, #3]
 880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 25629              		.loc 1 884 0
 25630 0538 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25631 053a 002B     		cmp	r3, #0
 25632 053c 06D0     		beq	.L37
 885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC EOC rising on each regular channel conversion */
 887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 25633              		.loc 1 887 0
 25634 053e 7B68     		ldr	r3, [r7, #4]
 25635 0540 9B68     		ldr	r3, [r3, #8]
 25636 0542 43F48062 		orr	r2, r3, #1024
 25637 0546 7B68     		ldr	r3, [r7, #4]
 25638 0548 9A60     		str	r2, [r3, #8]
 25639 054a 05E0     		b	.L36
 25640              	.L37:
 888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC EOC rising on each regular channel conversion */
 892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 25641              		.loc 1 892 0
 25642 054c 7B68     		ldr	r3, [r7, #4]
 25643 054e 9B68     		ldr	r3, [r3, #8]
 25644 0550 23F48062 		bic	r2, r3, #1024
 25645 0554 7B68     		ldr	r3, [r7, #4]
 25646 0556 9A60     		str	r2, [r3, #8]
 25647              	.L36:
 893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25648              		.loc 1 894 0
 25649 0558 07F10C07 		add	r7, r7, #12
 25650 055c BD46     		mov	sp, r7
 25651 055e 80BC     		pop	{r7}
 25652 0560 7047     		bx	lr
 25653              		.cfi_endproc
 25654              	.LFE124:
 25656 0562 00BF     		.align	2
 25657              		.global	ADC_ContinuousModeCmd
 25658              		.thumb
 25659              		.thumb_func
 25661              	ADC_ContinuousModeCmd:
 25662              	.LFB125:
 895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC continuous conversion mode 
 898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC continuous conversion mode
 900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25663              		.loc 1 904 0
 25664              		.cfi_startproc
 25665              		@ args = 0, pretend = 0, frame = 8
 25666              		@ frame_needed = 1, uses_anonymous_args = 0
 25667              		@ link register save eliminated.
 25668 0564 80B4     		push	{r7}
 25669              	.LCFI44:
 25670              		.cfi_def_cfa_offset 4
 25671 0566 83B0     		sub	sp, sp, #12
 25672              	.LCFI45:
 25673              		.cfi_def_cfa_offset 16
 25674 0568 00AF     		add	r7, sp, #0
 25675              		.cfi_offset 7, -4
 25676              	.LCFI46:
 25677              		.cfi_def_cfa_register 7
 25678 056a 7860     		str	r0, [r7, #4]
 25679 056c 0B46     		mov	r3, r1
 25680 056e FB70     		strb	r3, [r7, #3]
 905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 25681              		.loc 1 909 0
 25682 0570 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25683 0572 002B     		cmp	r3, #0
 25684 0574 06D0     		beq	.L40
 910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC continuous conversion mode */
 912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 25685              		.loc 1 912 0
 25686 0576 7B68     		ldr	r3, [r7, #4]
 25687 0578 9B68     		ldr	r3, [r3, #8]
 25688 057a 43F00202 		orr	r2, r3, #2
 25689 057e 7B68     		ldr	r3, [r7, #4]
 25690 0580 9A60     		str	r2, [r3, #8]
 25691 0582 05E0     		b	.L39
 25692              	.L40:
 913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC continuous conversion mode */
 917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 25693              		.loc 1 917 0
 25694 0584 7B68     		ldr	r3, [r7, #4]
 25695 0586 9B68     		ldr	r3, [r3, #8]
 25696 0588 23F00202 		bic	r2, r3, #2
 25697 058c 7B68     		ldr	r3, [r7, #4]
 25698 058e 9A60     		str	r2, [r3, #8]
 25699              	.L39:
 918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25700              		.loc 1 919 0
 25701 0590 07F10C07 		add	r7, r7, #12
 25702 0594 BD46     		mov	sp, r7
 25703 0596 80BC     		pop	{r7}
 25704 0598 7047     		bx	lr
 25705              		.cfi_endproc
 25706              	.LFE125:
 25708 059a 00BF     		.align	2
 25709              		.global	ADC_DiscModeChannelCountConfig
 25710              		.thumb
 25711              		.thumb_func
 25713              	ADC_DiscModeChannelCountConfig:
 25714              	.LFB126:
 920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the discontinuous mode for the selected ADC regular group 
 923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         channel.
 924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Number: specifies the discontinuous mode regular channel count value.
 926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This number must be between 1 and 8.
 927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
 930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25715              		.loc 1 930 0
 25716              		.cfi_startproc
 25717              		@ args = 0, pretend = 0, frame = 16
 25718              		@ frame_needed = 1, uses_anonymous_args = 0
 25719              		@ link register save eliminated.
 25720 059c 80B4     		push	{r7}
 25721              	.LCFI47:
 25722              		.cfi_def_cfa_offset 4
 25723 059e 85B0     		sub	sp, sp, #20
 25724              	.LCFI48:
 25725              		.cfi_def_cfa_offset 24
 25726 05a0 00AF     		add	r7, sp, #0
 25727              		.cfi_offset 7, -4
 25728              	.LCFI49:
 25729              		.cfi_def_cfa_register 7
 25730 05a2 7860     		str	r0, [r7, #4]
 25731 05a4 0B46     		mov	r3, r1
 25732 05a6 FB70     		strb	r3, [r7, #3]
 931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 25733              		.loc 1 931 0
 25734 05a8 4FF00003 		mov	r3, #0
 25735 05ac FB60     		str	r3, [r7, #12]
 932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 25736              		.loc 1 932 0
 25737 05ae 4FF00003 		mov	r3, #0
 25738 05b2 BB60     		str	r3, [r7, #8]
 933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
 937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
 25739              		.loc 1 939 0
 25740 05b4 7B68     		ldr	r3, [r7, #4]
 25741 05b6 5B68     		ldr	r3, [r3, #4]
 25742 05b8 FB60     		str	r3, [r7, #12]
 940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old discontinuous mode channel count */
 942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_DISCNUM_RESET;
 25743              		.loc 1 942 0
 25744 05ba FB68     		ldr	r3, [r7, #12]
 25745 05bc 23F46043 		bic	r3, r3, #57344
 25746 05c0 FB60     		str	r3, [r7, #12]
 943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the discontinuous mode channel count */
 945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = Number - 1;
 25747              		.loc 1 945 0
 25748 05c2 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25749 05c4 03F1FF33 		add	r3, r3, #-1
 25750 05c8 BB60     		str	r3, [r7, #8]
 946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 13;
 25751              		.loc 1 946 0
 25752 05ca BB68     		ldr	r3, [r7, #8]
 25753 05cc 4FEA4333 		lsl	r3, r3, #13
 25754 05d0 FA68     		ldr	r2, [r7, #12]
 25755 05d2 42EA0303 		orr	r3, r2, r3
 25756 05d6 FB60     		str	r3, [r7, #12]
 947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 25757              		.loc 1 949 0
 25758 05d8 7B68     		ldr	r3, [r7, #4]
 25759 05da FA68     		ldr	r2, [r7, #12]
 25760 05dc 5A60     		str	r2, [r3, #4]
 950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25761              		.loc 1 950 0
 25762 05de 07F11407 		add	r7, r7, #20
 25763 05e2 BD46     		mov	sp, r7
 25764 05e4 80BC     		pop	{r7}
 25765 05e6 7047     		bx	lr
 25766              		.cfi_endproc
 25767              	.LFE126:
 25769              		.align	2
 25770              		.global	ADC_DiscModeCmd
 25771              		.thumb
 25772              		.thumb_func
 25774              	ADC_DiscModeCmd:
 25775              	.LFB127:
 951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode on regular group channel 
 954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         for the specified ADC
 955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on 
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         regular group channel.
 958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25776              		.loc 1 962 0
 25777              		.cfi_startproc
 25778              		@ args = 0, pretend = 0, frame = 8
 25779              		@ frame_needed = 1, uses_anonymous_args = 0
 25780              		@ link register save eliminated.
 25781 05e8 80B4     		push	{r7}
 25782              	.LCFI50:
 25783              		.cfi_def_cfa_offset 4
 25784 05ea 83B0     		sub	sp, sp, #12
 25785              	.LCFI51:
 25786              		.cfi_def_cfa_offset 16
 25787 05ec 00AF     		add	r7, sp, #0
 25788              		.cfi_offset 7, -4
 25789              	.LCFI52:
 25790              		.cfi_def_cfa_register 7
 25791 05ee 7860     		str	r0, [r7, #4]
 25792 05f0 0B46     		mov	r3, r1
 25793 05f2 FB70     		strb	r3, [r7, #3]
 963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 25794              		.loc 1 967 0
 25795 05f4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25796 05f6 002B     		cmp	r3, #0
 25797 05f8 06D0     		beq	.L44
 968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
 970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 25798              		.loc 1 970 0
 25799 05fa 7B68     		ldr	r3, [r7, #4]
 25800 05fc 5B68     		ldr	r3, [r3, #4]
 25801 05fe 43F40062 		orr	r2, r3, #2048
 25802 0602 7B68     		ldr	r3, [r7, #4]
 25803 0604 5A60     		str	r2, [r3, #4]
 25804 0606 05E0     		b	.L43
 25805              	.L44:
 971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
 975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 25806              		.loc 1 975 0
 25807 0608 7B68     		ldr	r3, [r7, #4]
 25808 060a 5B68     		ldr	r3, [r3, #4]
 25809 060c 23F40062 		bic	r2, r3, #2048
 25810 0610 7B68     		ldr	r3, [r7, #4]
 25811 0612 5A60     		str	r2, [r3, #4]
 25812              	.L43:
 976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25813              		.loc 1 977 0
 25814 0614 07F10C07 		add	r7, r7, #12
 25815 0618 BD46     		mov	sp, r7
 25816 061a 80BC     		pop	{r7}
 25817 061c 7047     		bx	lr
 25818              		.cfi_endproc
 25819              	.LFE127:
 25821 061e 00BF     		.align	2
 25822              		.global	ADC_GetConversionValue
 25823              		.thumb
 25824              		.thumb_func
 25826              	ADC_GetConversionValue:
 25827              	.LFB128:
 978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADCx conversion result data for regular channel.
 981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
 985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25828              		.loc 1 985 0
 25829              		.cfi_startproc
 25830              		@ args = 0, pretend = 0, frame = 8
 25831              		@ frame_needed = 1, uses_anonymous_args = 0
 25832              		@ link register save eliminated.
 25833 0620 80B4     		push	{r7}
 25834              	.LCFI53:
 25835              		.cfi_def_cfa_offset 4
 25836 0622 83B0     		sub	sp, sp, #12
 25837              	.LCFI54:
 25838              		.cfi_def_cfa_offset 16
 25839 0624 00AF     		add	r7, sp, #0
 25840              		.cfi_offset 7, -4
 25841              	.LCFI55:
 25842              		.cfi_def_cfa_register 7
 25843 0626 7860     		str	r0, [r7, #4]
 986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the selected ADC conversion value */
 990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (uint16_t) ADCx->DR;
 25844              		.loc 1 990 0
 25845 0628 7B68     		ldr	r3, [r7, #4]
 25846 062a DB6C     		ldr	r3, [r3, #76]
 25847 062c 9BB2     		uxth	r3, r3
 991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25848              		.loc 1 991 0
 25849 062e 1846     		mov	r0, r3
 25850 0630 07F10C07 		add	r7, r7, #12
 25851 0634 BD46     		mov	sp, r7
 25852 0636 80BC     		pop	{r7}
 25853 0638 7047     		bx	lr
 25854              		.cfi_endproc
 25855              	.LFE128:
 25857 063a 00BF     		.align	2
 25858              		.global	ADC_GetMultiModeConversionValue
 25859              		.thumb
 25860              		.thumb_func
 25862              	ADC_GetMultiModeConversionValue:
 25863              	.LFB129:
 992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADC1, ADC2 and ADC3 regular conversions results 
 995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         data in the selected multi mode.
 996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  None  
 997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   In dual mode, the value returned by this function is as following
 999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain the regular data of ADC1.
1000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain the regular data of ADC2.
1001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   In triple mode, the value returned by this function is as following
1002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2
1003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3
1004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint32_t ADC_GetMultiModeConversionValue(void)
1006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25864              		.loc 1 1006 0
 25865              		.cfi_startproc
 25866              		@ args = 0, pretend = 0, frame = 0
 25867              		@ frame_needed = 1, uses_anonymous_args = 0
 25868              		@ link register save eliminated.
 25869 063c 80B4     		push	{r7}
 25870              	.LCFI56:
 25871              		.cfi_def_cfa_offset 4
 25872 063e 00AF     		add	r7, sp, #0
 25873              		.cfi_offset 7, -4
 25874              	.LCFI57:
 25875              		.cfi_def_cfa_register 7
1007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the multi mode conversion value */
1008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (*(__IO uint32_t *) CDR_ADDRESS);
 25876              		.loc 1 1008 0
 25877 0640 024B     		ldr	r3, .L48
 25878 0642 1B68     		ldr	r3, [r3, #0]
1009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25879              		.loc 1 1009 0
 25880 0644 1846     		mov	r0, r3
 25881 0646 BD46     		mov	sp, r7
 25882 0648 80BC     		pop	{r7}
 25883 064a 7047     		bx	lr
 25884              	.L49:
 25885              		.align	2
 25886              	.L48:
 25887 064c 08230140 		.word	1073816328
 25888              		.cfi_endproc
 25889              	.LFE129:
 25891              		.align	2
 25892              		.global	ADC_DMACmd
 25893              		.thumb
 25894              		.thumb_func
 25896              	ADC_DMACmd:
 25897              	.LFB130:
1010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group5 Regular Channels DMA Configuration functions
1015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels DMA Configuration functions 
1016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                    Regular Channels DMA Configuration functions
1020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the DMA for ADC regular 
1023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   channels.
1024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Since converted regular channel values are stored into a unique data register, 
1025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is useful to use DMA for conversion of more than one regular channel. This 
1026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   avoids the loss of the data already stored in the ADC Data register. 
1027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   When the DMA mode is enabled (using the ADC_DMACmd() function), after each
1029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   conversion of a regular channel, a DMA request is generated.
1030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Depending on the "DMA disable selection for Independent ADC mode" 
1032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   configuration (using the ADC_DMARequestAfterLastTransferCmd() function), 
1033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Depending on the "DMA disable selection for multi ADC mode" configuration 
1038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   (using the void ADC_MultiModeDMARequestAfterLastTransferCmd() function), 
1039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  /**
1048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC DMA request.
1049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA transfer.
1051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25898              		.loc 1 1055 0
 25899              		.cfi_startproc
 25900              		@ args = 0, pretend = 0, frame = 8
 25901              		@ frame_needed = 1, uses_anonymous_args = 0
 25902              		@ link register save eliminated.
 25903 0650 80B4     		push	{r7}
 25904              	.LCFI58:
 25905              		.cfi_def_cfa_offset 4
 25906 0652 83B0     		sub	sp, sp, #12
 25907              	.LCFI59:
 25908              		.cfi_def_cfa_offset 16
 25909 0654 00AF     		add	r7, sp, #0
 25910              		.cfi_offset 7, -4
 25911              	.LCFI60:
 25912              		.cfi_def_cfa_register 7
 25913 0656 7860     		str	r0, [r7, #4]
 25914 0658 0B46     		mov	r3, r1
 25915 065a FB70     		strb	r3, [r7, #3]
1056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 25916              		.loc 1 1059 0
 25917 065c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25918 065e 002B     		cmp	r3, #0
 25919 0660 06D0     		beq	.L51
1060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request */
1062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 25920              		.loc 1 1062 0
 25921 0662 7B68     		ldr	r3, [r7, #4]
 25922 0664 9B68     		ldr	r3, [r3, #8]
 25923 0666 43F48072 		orr	r2, r3, #256
 25924 066a 7B68     		ldr	r3, [r7, #4]
 25925 066c 9A60     		str	r2, [r3, #8]
 25926 066e 05E0     		b	.L50
 25927              	.L51:
1063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request */
1067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 25928              		.loc 1 1067 0
 25929 0670 7B68     		ldr	r3, [r7, #4]
 25930 0672 9B68     		ldr	r3, [r3, #8]
 25931 0674 23F48072 		bic	r2, r3, #256
 25932 0678 7B68     		ldr	r3, [r7, #4]
 25933 067a 9A60     		str	r2, [r3, #8]
 25934              	.L50:
1068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25935              		.loc 1 1069 0
 25936 067c 07F10C07 		add	r7, r7, #12
 25937 0680 BD46     		mov	sp, r7
 25938 0682 80BC     		pop	{r7}
 25939 0684 7047     		bx	lr
 25940              		.cfi_endproc
 25941              	.LFE130:
 25943 0686 00BF     		.align	2
 25944              		.global	ADC_DMARequestAfterLastTransferCmd
 25945              		.thumb
 25946              		.thumb_func
 25948              	ADC_DMARequestAfterLastTransferCmd:
 25949              	.LFB131:
1070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer (Single-ADC mode)  
1073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25950              		.loc 1 1079 0
 25951              		.cfi_startproc
 25952              		@ args = 0, pretend = 0, frame = 8
 25953              		@ frame_needed = 1, uses_anonymous_args = 0
 25954              		@ link register save eliminated.
 25955 0688 80B4     		push	{r7}
 25956              	.LCFI61:
 25957              		.cfi_def_cfa_offset 4
 25958 068a 83B0     		sub	sp, sp, #12
 25959              	.LCFI62:
 25960              		.cfi_def_cfa_offset 16
 25961 068c 00AF     		add	r7, sp, #0
 25962              		.cfi_offset 7, -4
 25963              	.LCFI63:
 25964              		.cfi_def_cfa_register 7
 25965 068e 7860     		str	r0, [r7, #4]
 25966 0690 0B46     		mov	r3, r1
 25967 0692 FB70     		strb	r3, [r7, #3]
1080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 25968              		.loc 1 1083 0
 25969 0694 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25970 0696 002B     		cmp	r3, #0
 25971 0698 06D0     		beq	.L54
1084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 25972              		.loc 1 1086 0
 25973 069a 7B68     		ldr	r3, [r7, #4]
 25974 069c 9B68     		ldr	r3, [r3, #8]
 25975 069e 43F40072 		orr	r2, r3, #512
 25976 06a2 7B68     		ldr	r3, [r7, #4]
 25977 06a4 9A60     		str	r2, [r3, #8]
 25978 06a6 05E0     		b	.L53
 25979              	.L54:
1087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 25980              		.loc 1 1091 0
 25981 06a8 7B68     		ldr	r3, [r7, #4]
 25982 06aa 9B68     		ldr	r3, [r3, #8]
 25983 06ac 23F40072 		bic	r2, r3, #512
 25984 06b0 7B68     		ldr	r3, [r7, #4]
 25985 06b2 9A60     		str	r2, [r3, #8]
 25986              	.L53:
1092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25987              		.loc 1 1093 0
 25988 06b4 07F10C07 		add	r7, r7, #12
 25989 06b8 BD46     		mov	sp, r7
 25990 06ba 80BC     		pop	{r7}
 25991 06bc 7047     		bx	lr
 25992              		.cfi_endproc
 25993              	.LFE131:
 25995 06be 00BF     		.align	2
 25996              		.global	ADC_MultiModeDMARequestAfterLastTransferCmd
 25997              		.thumb
 25998              		.thumb_func
 26000              	ADC_MultiModeDMARequestAfterLastTransferCmd:
 26001              	.LFB132:
1094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer in multi ADC mode       
1097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   if Enabled, DMA requests are issued as long as data are converted and 
1100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         DMA mode for multi ADC mode (selected using ADC_CommonInit() function 
1101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
1102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
1103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
1106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26002              		.loc 1 1106 0
 26003              		.cfi_startproc
 26004              		@ args = 0, pretend = 0, frame = 8
 26005              		@ frame_needed = 1, uses_anonymous_args = 0
 26006              		@ link register save eliminated.
 26007 06c0 80B4     		push	{r7}
 26008              	.LCFI64:
 26009              		.cfi_def_cfa_offset 4
 26010 06c2 83B0     		sub	sp, sp, #12
 26011              	.LCFI65:
 26012              		.cfi_def_cfa_offset 16
 26013 06c4 00AF     		add	r7, sp, #0
 26014              		.cfi_offset 7, -4
 26015              	.LCFI66:
 26016              		.cfi_def_cfa_register 7
 26017 06c6 0346     		mov	r3, r0
 26018 06c8 FB71     		strb	r3, [r7, #7]
1107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 26019              		.loc 1 1109 0
 26020 06ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 26021 06cc 002B     		cmp	r3, #0
 26022 06ce 06D0     		beq	.L57
1110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 26023              		.loc 1 1112 0
 26024 06d0 084B     		ldr	r3, .L59
 26025 06d2 084A     		ldr	r2, .L59
 26026 06d4 5268     		ldr	r2, [r2, #4]
 26027 06d6 42F40052 		orr	r2, r2, #8192
 26028 06da 5A60     		str	r2, [r3, #4]
 26029 06dc 05E0     		b	.L56
 26030              	.L57:
1113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 26031              		.loc 1 1117 0
 26032 06de 054B     		ldr	r3, .L59
 26033 06e0 044A     		ldr	r2, .L59
 26034 06e2 5268     		ldr	r2, [r2, #4]
 26035 06e4 22F40052 		bic	r2, r2, #8192
 26036 06e8 5A60     		str	r2, [r3, #4]
 26037              	.L56:
1118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26038              		.loc 1 1119 0
 26039 06ea 07F10C07 		add	r7, r7, #12
 26040 06ee BD46     		mov	sp, r7
 26041 06f0 80BC     		pop	{r7}
 26042 06f2 7047     		bx	lr
 26043              	.L60:
 26044              		.align	2
 26045              	.L59:
 26046 06f4 00230140 		.word	1073816320
 26047              		.cfi_endproc
 26048              	.LFE132:
 26050              		.align	2
 26051              		.global	ADC_InjectedChannelConfig
 26052              		.thumb
 26053              		.thumb_func
 26055              	ADC_InjectedChannelConfig:
 26056              	.LFB133:
1120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group6 Injected channels Configuration functions
1125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Injected channels Configuration functions 
1126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                      Injected channels Configuration functions
1130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provide functions allowing to configure the ADC Injected channels,
1133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is composed of 2 sub sections : 
1134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
1135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   1. Configuration functions for Injected channels: This subsection provides 
1136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      functions allowing to configure the ADC injected channels :    
1137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Configure the rank in the injected group sequencer for each channel
1138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Configure the sampling time for each channel    
1139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Activate the Auto injected Mode  
1140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Activate the Discontinuous Mode 
1141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - scan mode activation  
1142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - External/software trigger source   
1143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - External trigger edge 
1144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - injected channels sequencer.
1145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
1146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Get the Specified Injected channel conversion data: This subsection 
1147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       provides an important function in the ADC peripheral since it returns the 
1148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       converted data of the specific injected channel.
1149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
1153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC injected channel its corresponding
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
1156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
1158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
1160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
1161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
1162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
1163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
1164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
1166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
1167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
1168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
1169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
1170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
1171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
1172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
1173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
1174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
1175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
1176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
1177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
1178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the injected group sequencer. 
1179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 4.
1180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
1181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
1183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
1184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
1185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
1186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
1187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
1188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
1189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
1190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sa
1193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26057              		.loc 1 1193 0
 26058              		.cfi_startproc
 26059              		@ args = 0, pretend = 0, frame = 24
 26060              		@ frame_needed = 1, uses_anonymous_args = 0
 26061              		@ link register save eliminated.
 26062 06f8 80B4     		push	{r7}
 26063              	.LCFI67:
 26064              		.cfi_def_cfa_offset 4
 26065 06fa 87B0     		sub	sp, sp, #28
 26066              	.LCFI68:
 26067              		.cfi_def_cfa_offset 32
 26068 06fc 00AF     		add	r7, sp, #0
 26069              		.cfi_offset 7, -4
 26070              	.LCFI69:
 26071              		.cfi_def_cfa_register 7
 26072 06fe 7860     		str	r0, [r7, #4]
 26073 0700 F970     		strb	r1, [r7, #3]
 26074 0702 BA70     		strb	r2, [r7, #2]
 26075 0704 7B70     		strb	r3, [r7, #1]
1194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 26076              		.loc 1 1194 0
 26077 0706 4FF00003 		mov	r3, #0
 26078 070a 7B61     		str	r3, [r7, #20]
 26079 070c 4FF00003 		mov	r3, #0
 26080 0710 3B61     		str	r3, [r7, #16]
 26081 0712 4FF00003 		mov	r3, #0
 26082 0716 FB60     		str	r3, [r7, #12]
1195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
1198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_RANK(Rank));
1199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
1200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
1201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 26083              		.loc 1 1201 0
 26084 0718 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26085 071a 092B     		cmp	r3, #9
 26086 071c 29D9     		bls	.L62
1202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
1204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 26087              		.loc 1 1204 0
 26088 071e 7B68     		ldr	r3, [r7, #4]
 26089 0720 DB68     		ldr	r3, [r3, #12]
 26090 0722 7B61     		str	r3, [r7, #20]
1205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 26091              		.loc 1 1206 0
 26092 0724 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 26093 0726 1346     		mov	r3, r2
 26094 0728 4FEA4303 		lsl	r3, r3, #1
 26095 072c 9B18     		adds	r3, r3, r2
 26096 072e A3F11E03 		sub	r3, r3, #30
 26097 0732 4FF00702 		mov	r2, #7
 26098 0736 02FA03F3 		lsl	r3, r2, r3
 26099 073a 3B61     		str	r3, [r7, #16]
1207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 26100              		.loc 1 1208 0
 26101 073c 3B69     		ldr	r3, [r7, #16]
 26102 073e 6FEA0303 		mvn	r3, r3
 26103 0742 7A69     		ldr	r2, [r7, #20]
 26104 0744 02EA0303 		and	r3, r2, r3
 26105 0748 7B61     		str	r3, [r7, #20]
1209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 26106              		.loc 1 1210 0
 26107 074a 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 26108 074c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 26109 074e 1346     		mov	r3, r2
 26110 0750 4FEA4303 		lsl	r3, r3, #1
 26111 0754 9B18     		adds	r3, r3, r2
 26112 0756 A3F11E03 		sub	r3, r3, #30
 26113 075a 01FA03F3 		lsl	r3, r1, r3
 26114 075e 3B61     		str	r3, [r7, #16]
1211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 26115              		.loc 1 1212 0
 26116 0760 7A69     		ldr	r2, [r7, #20]
 26117 0762 3B69     		ldr	r3, [r7, #16]
 26118 0764 42EA0303 		orr	r3, r2, r3
 26119 0768 7B61     		str	r3, [r7, #20]
1213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
1214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 26120              		.loc 1 1214 0
 26121 076a 7B68     		ldr	r3, [r7, #4]
 26122 076c 7A69     		ldr	r2, [r7, #20]
 26123 076e DA60     		str	r2, [r3, #12]
 26124 0770 24E0     		b	.L63
 26125              	.L62:
1215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
1217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
1219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 26126              		.loc 1 1219 0
 26127 0772 7B68     		ldr	r3, [r7, #4]
 26128 0774 1B69     		ldr	r3, [r3, #16]
 26129 0776 7B61     		str	r3, [r7, #20]
1220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 26130              		.loc 1 1221 0
 26131 0778 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 26132 077a 1346     		mov	r3, r2
 26133 077c 4FEA4303 		lsl	r3, r3, #1
 26134 0780 9B18     		adds	r3, r3, r2
 26135 0782 4FF00702 		mov	r2, #7
 26136 0786 02FA03F3 		lsl	r3, r2, r3
 26137 078a 3B61     		str	r3, [r7, #16]
1222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 26138              		.loc 1 1223 0
 26139 078c 3B69     		ldr	r3, [r7, #16]
 26140 078e 6FEA0303 		mvn	r3, r3
 26141 0792 7A69     		ldr	r2, [r7, #20]
 26142 0794 02EA0303 		and	r3, r2, r3
 26143 0798 7B61     		str	r3, [r7, #20]
1224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 26144              		.loc 1 1225 0
 26145 079a 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 26146 079c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 26147 079e 1346     		mov	r3, r2
 26148 07a0 4FEA4303 		lsl	r3, r3, #1
 26149 07a4 9B18     		adds	r3, r3, r2
 26150 07a6 01FA03F3 		lsl	r3, r1, r3
 26151 07aa 3B61     		str	r3, [r7, #16]
1226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 26152              		.loc 1 1227 0
 26153 07ac 7A69     		ldr	r2, [r7, #20]
 26154 07ae 3B69     		ldr	r3, [r7, #16]
 26155 07b0 42EA0303 		orr	r3, r2, r3
 26156 07b4 7B61     		str	r3, [r7, #20]
1228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
1229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 26157              		.loc 1 1229 0
 26158 07b6 7B68     		ldr	r3, [r7, #4]
 26159 07b8 7A69     		ldr	r2, [r7, #20]
 26160 07ba 1A61     		str	r2, [r3, #16]
 26161              	.L63:
1230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Rank configuration */
1232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 26162              		.loc 1 1233 0
 26163 07bc 7B68     		ldr	r3, [r7, #4]
 26164 07be 9B6B     		ldr	r3, [r3, #56]
 26165 07c0 7B61     		str	r3, [r7, #20]
1234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get JL value: Number = JL+1 */
1235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 26166              		.loc 1 1235 0
 26167 07c2 7B69     		ldr	r3, [r7, #20]
 26168 07c4 03F44013 		and	r3, r3, #3145728
 26169 07c8 4FEA1353 		lsr	r3, r3, #20
 26170 07cc FB60     		str	r3, [r7, #12]
1236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
1237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 26171              		.loc 1 1237 0
 26172 07ce FB68     		ldr	r3, [r7, #12]
 26173 07d0 DBB2     		uxtb	r3, r3
 26174 07d2 6FEA0303 		mvn	r3, r3
 26175 07d6 DAB2     		uxtb	r2, r3
 26176 07d8 BB78     		ldrb	r3, [r7, #2]
 26177 07da D318     		adds	r3, r2, r3
 26178 07dc DBB2     		uxtb	r3, r3
 26179 07de 03F10303 		add	r3, r3, #3
 26180 07e2 DBB2     		uxtb	r3, r3
 26181 07e4 1A46     		mov	r2, r3
 26182 07e6 1346     		mov	r3, r2
 26183 07e8 4FEA8303 		lsl	r3, r3, #2
 26184 07ec 9B18     		adds	r3, r3, r2
 26185 07ee 4FF01F02 		mov	r2, #31
 26186 07f2 02FA03F3 		lsl	r3, r2, r3
 26187 07f6 3B61     		str	r3, [r7, #16]
1238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old JSQx bits for the selected rank */
1239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= ~tmpreg2;
 26188              		.loc 1 1239 0
 26189 07f8 3B69     		ldr	r3, [r7, #16]
 26190 07fa 6FEA0303 		mvn	r3, r3
 26191 07fe 7A69     		ldr	r2, [r7, #20]
 26192 0800 02EA0303 		and	r3, r2, r3
 26193 0804 7B61     		str	r3, [r7, #20]
1240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
1241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 26194              		.loc 1 1241 0
 26195 0806 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 26196 0808 FB68     		ldr	r3, [r7, #12]
 26197 080a DBB2     		uxtb	r3, r3
 26198 080c 6FEA0303 		mvn	r3, r3
 26199 0810 DAB2     		uxtb	r2, r3
 26200 0812 BB78     		ldrb	r3, [r7, #2]
 26201 0814 D318     		adds	r3, r2, r3
 26202 0816 DBB2     		uxtb	r3, r3
 26203 0818 03F10303 		add	r3, r3, #3
 26204 081c DBB2     		uxtb	r3, r3
 26205 081e 1A46     		mov	r2, r3
 26206 0820 1346     		mov	r3, r2
 26207 0822 4FEA8303 		lsl	r3, r3, #2
 26208 0826 9B18     		adds	r3, r3, r2
 26209 0828 01FA03F3 		lsl	r3, r1, r3
 26210 082c 3B61     		str	r3, [r7, #16]
1242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the JSQx bits for the selected rank */
1243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2;
 26211              		.loc 1 1243 0
 26212 082e 7A69     		ldr	r2, [r7, #20]
 26213 0830 3B69     		ldr	r3, [r7, #16]
 26214 0832 42EA0303 		orr	r3, r2, r3
 26215 0836 7B61     		str	r3, [r7, #20]
1244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 26216              		.loc 1 1245 0
 26217 0838 7B68     		ldr	r3, [r7, #4]
 26218 083a 7A69     		ldr	r2, [r7, #20]
 26219 083c 9A63     		str	r2, [r3, #56]
1246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26220              		.loc 1 1246 0
 26221 083e 07F11C07 		add	r7, r7, #28
 26222 0842 BD46     		mov	sp, r7
 26223 0844 80BC     		pop	{r7}
 26224 0846 7047     		bx	lr
 26225              		.cfi_endproc
 26226              	.LFE133:
 26228              		.align	2
 26229              		.global	ADC_InjectedSequencerLengthConfig
 26230              		.thumb
 26231              		.thumb_func
 26233              	ADC_InjectedSequencerLengthConfig:
 26234              	.LFB134:
1247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the sequencer length for injected channels
1250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Length: The sequencer length. 
1252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a number between 1 to 4.
1253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
1256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26235              		.loc 1 1256 0
 26236              		.cfi_startproc
 26237              		@ args = 0, pretend = 0, frame = 16
 26238              		@ frame_needed = 1, uses_anonymous_args = 0
 26239              		@ link register save eliminated.
 26240 0848 80B4     		push	{r7}
 26241              	.LCFI70:
 26242              		.cfi_def_cfa_offset 4
 26243 084a 85B0     		sub	sp, sp, #20
 26244              	.LCFI71:
 26245              		.cfi_def_cfa_offset 24
 26246 084c 00AF     		add	r7, sp, #0
 26247              		.cfi_offset 7, -4
 26248              	.LCFI72:
 26249              		.cfi_def_cfa_register 7
 26250 084e 7860     		str	r0, [r7, #4]
 26251 0850 0B46     		mov	r3, r1
 26252 0852 FB70     		strb	r3, [r7, #3]
1257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 26253              		.loc 1 1257 0
 26254 0854 4FF00003 		mov	r3, #0
 26255 0858 FB60     		str	r3, [r7, #12]
1258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 26256              		.loc 1 1258 0
 26257 085a 4FF00003 		mov	r3, #0
 26258 085e BB60     		str	r3, [r7, #8]
1259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_LENGTH(Length));
1262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 26259              		.loc 1 1264 0
 26260 0860 7B68     		ldr	r3, [r7, #4]
 26261 0862 9B6B     		ldr	r3, [r3, #56]
 26262 0864 FB60     		str	r3, [r7, #12]
1265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old injected sequence length JL bits */
1267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= JSQR_JL_RESET;
 26263              		.loc 1 1267 0
 26264 0866 FB68     		ldr	r3, [r7, #12]
 26265 0868 23F44013 		bic	r3, r3, #3145728
 26266 086c FB60     		str	r3, [r7, #12]
1268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the injected sequence length JL bits */
1270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = Length - 1; 
 26267              		.loc 1 1270 0
 26268 086e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26269 0870 03F1FF33 		add	r3, r3, #-1
 26270 0874 BB60     		str	r3, [r7, #8]
1271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 20;
 26271              		.loc 1 1271 0
 26272 0876 BB68     		ldr	r3, [r7, #8]
 26273 0878 4FEA0353 		lsl	r3, r3, #20
 26274 087c FA68     		ldr	r2, [r7, #12]
 26275 087e 42EA0303 		orr	r3, r2, r3
 26276 0882 FB60     		str	r3, [r7, #12]
1272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 26277              		.loc 1 1274 0
 26278 0884 7B68     		ldr	r3, [r7, #4]
 26279 0886 FA68     		ldr	r2, [r7, #12]
 26280 0888 9A63     		str	r2, [r3, #56]
1275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26281              		.loc 1 1275 0
 26282 088a 07F11407 		add	r7, r7, #20
 26283 088e BD46     		mov	sp, r7
 26284 0890 80BC     		pop	{r7}
 26285 0892 7047     		bx	lr
 26286              		.cfi_endproc
 26287              	.LFE134:
 26289              		.align	2
 26290              		.global	ADC_SetInjectedOffset
 26291              		.thumb
 26292              		.thumb_func
 26294              	ADC_SetInjectedOffset:
 26295              	.LFB135:
1276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Set the injected channels conversion value offset
1279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the ADC injected channel to set its offset. 
1281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Offset: the offset value for the selected ADC injected channel
1287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12bit value.
1288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
1291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26296              		.loc 1 1291 0
 26297              		.cfi_startproc
 26298              		@ args = 0, pretend = 0, frame = 16
 26299              		@ frame_needed = 1, uses_anonymous_args = 0
 26300              		@ link register save eliminated.
 26301 0894 80B4     		push	{r7}
 26302              	.LCFI73:
 26303              		.cfi_def_cfa_offset 4
 26304 0896 85B0     		sub	sp, sp, #20
 26305              	.LCFI74:
 26306              		.cfi_def_cfa_offset 24
 26307 0898 00AF     		add	r7, sp, #0
 26308              		.cfi_offset 7, -4
 26309              	.LCFI75:
 26310              		.cfi_def_cfa_register 7
 26311 089a 7860     		str	r0, [r7, #4]
 26312 089c 1346     		mov	r3, r2
 26313 089e 0A46     		mov	r2, r1
 26314 08a0 FA70     		strb	r2, [r7, #3]
 26315 08a2 3B80     		strh	r3, [r7, #0]	@ movhi
1292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     __IO uint32_t tmp = 0;
 26316              		.loc 1 1292 0
 26317 08a4 4FF00003 		mov	r3, #0
 26318 08a8 FB60     		str	r3, [r7, #12]
1293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));
1297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 26319              		.loc 1 1298 0
 26320 08aa 7B68     		ldr	r3, [r7, #4]
 26321 08ac FB60     		str	r3, [r7, #12]
1299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel;
 26322              		.loc 1 1299 0
 26323 08ae FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 26324 08b0 FB68     		ldr	r3, [r7, #12]
 26325 08b2 D318     		adds	r3, r2, r3
 26326 08b4 FB60     		str	r3, [r7, #12]
1300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the selected injected channel data offset */
1302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *(__IO uint32_t *) tmp = (uint32_t)Offset;
 26327              		.loc 1 1302 0
 26328 08b6 FB68     		ldr	r3, [r7, #12]
 26329 08b8 3A88     		ldrh	r2, [r7, #0]
 26330 08ba 1A60     		str	r2, [r3, #0]
1303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26331              		.loc 1 1303 0
 26332 08bc 07F11407 		add	r7, r7, #20
 26333 08c0 BD46     		mov	sp, r7
 26334 08c2 80BC     		pop	{r7}
 26335 08c4 7047     		bx	lr
 26336              		.cfi_endproc
 26337              	.LFE135:
 26339 08c6 00BF     		.align	2
 26340              		.global	ADC_ExternalTrigInjectedConvConfig
 26341              		.thumb
 26342              		.thumb_func
 26344              	ADC_ExternalTrigInjectedConvConfig:
 26345              	.LFB136:
1304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  /**
1306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger for injected channels conversion.
1307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConv: specifies the ADC trigger to start injected conversion.
1309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:                    
1310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_CC4: Timer1 capture compare4 selected 
1311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_TRGO: Timer1 TRGO event selected 
1312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_CC1: Timer2 capture compare1 selected 
1313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_TRGO: Timer2 TRGO event selected 
1314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC2: Timer3 capture compare2 selected 
1315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC4: Timer3 capture compare4 selected 
1316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC1: Timer4 capture compare1 selected             
1317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC2: Timer4 capture compare2 selected 
1318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC3: Timer4 capture compare3 selected             
1319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_TRGO: Timer4 TRGO event selected 
1320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_CC4: Timer5 capture compare4 selected             
1321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_TRGO: Timer5 TRGO event selected                  
1322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC2: Timer8 capture compare2 selected
1323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC3: Timer8 capture compare3 selected             
1324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
1325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected  
1326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
1329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26346              		.loc 1 1329 0
 26347              		.cfi_startproc
 26348              		@ args = 0, pretend = 0, frame = 16
 26349              		@ frame_needed = 1, uses_anonymous_args = 0
 26350              		@ link register save eliminated.
 26351 08c8 80B4     		push	{r7}
 26352              	.LCFI76:
 26353              		.cfi_def_cfa_offset 4
 26354 08ca 85B0     		sub	sp, sp, #20
 26355              	.LCFI77:
 26356              		.cfi_def_cfa_offset 24
 26357 08cc 00AF     		add	r7, sp, #0
 26358              		.cfi_offset 7, -4
 26359              	.LCFI78:
 26360              		.cfi_def_cfa_register 7
 26361 08ce 7860     		str	r0, [r7, #4]
 26362 08d0 3960     		str	r1, [r7, #0]
1330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 26363              		.loc 1 1330 0
 26364 08d2 4FF00003 		mov	r3, #0
 26365 08d6 FB60     		str	r3, [r7, #12]
1331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
1334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 26366              		.loc 1 1336 0
 26367 08d8 7B68     		ldr	r3, [r7, #4]
 26368 08da 9B68     		ldr	r3, [r3, #8]
 26369 08dc FB60     		str	r3, [r7, #12]
1337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old external event selection for injected group */
1339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTSEL_RESET;
 26370              		.loc 1 1339 0
 26371 08de FB68     		ldr	r3, [r7, #12]
 26372 08e0 23F47023 		bic	r3, r3, #983040
 26373 08e4 FB60     		str	r3, [r7, #12]
1340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the external event selection for injected group */
1342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConv;
 26374              		.loc 1 1342 0
 26375 08e6 FA68     		ldr	r2, [r7, #12]
 26376 08e8 3B68     		ldr	r3, [r7, #0]
 26377 08ea 42EA0303 		orr	r3, r2, r3
 26378 08ee FB60     		str	r3, [r7, #12]
1343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 26379              		.loc 1 1345 0
 26380 08f0 7B68     		ldr	r3, [r7, #4]
 26381 08f2 FA68     		ldr	r2, [r7, #12]
 26382 08f4 9A60     		str	r2, [r3, #8]
1346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26383              		.loc 1 1346 0
 26384 08f6 07F11407 		add	r7, r7, #20
 26385 08fa BD46     		mov	sp, r7
 26386 08fc 80BC     		pop	{r7}
 26387 08fe 7047     		bx	lr
 26388              		.cfi_endproc
 26389              	.LFE136:
 26391              		.align	2
 26392              		.global	ADC_ExternalTrigInjectedConvEdgeConfig
 26393              		.thumb
 26394              		.thumb_func
 26396              	ADC_ExternalTrigInjectedConvEdgeConfig:
 26397              	.LFB137:
1347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger edge for injected channels conversion.
1350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConvEdge: specifies the ADC external trigger edge
1352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         to start injected conversion. 
1353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_None: external trigger disabled for 
1355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                                     injected conversion
1356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Rising: detection on rising edge
1357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Falling: detection on falling edge
1358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
1359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                                               and falling edge
1360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEd
1363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26398              		.loc 1 1363 0
 26399              		.cfi_startproc
 26400              		@ args = 0, pretend = 0, frame = 16
 26401              		@ frame_needed = 1, uses_anonymous_args = 0
 26402              		@ link register save eliminated.
 26403 0900 80B4     		push	{r7}
 26404              	.LCFI79:
 26405              		.cfi_def_cfa_offset 4
 26406 0902 85B0     		sub	sp, sp, #20
 26407              	.LCFI80:
 26408              		.cfi_def_cfa_offset 24
 26409 0904 00AF     		add	r7, sp, #0
 26410              		.cfi_offset 7, -4
 26411              	.LCFI81:
 26412              		.cfi_def_cfa_register 7
 26413 0906 7860     		str	r0, [r7, #4]
 26414 0908 3960     		str	r1, [r7, #0]
1364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 26415              		.loc 1 1364 0
 26416 090a 4FF00003 		mov	r3, #0
 26417 090e FB60     		str	r3, [r7, #12]
1365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
1368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 26418              		.loc 1 1369 0
 26419 0910 7B68     		ldr	r3, [r7, #4]
 26420 0912 9B68     		ldr	r3, [r3, #8]
 26421 0914 FB60     		str	r3, [r7, #12]
1370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old external trigger edge for injected group */
1371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTEN_RESET;
 26422              		.loc 1 1371 0
 26423 0916 FB68     		ldr	r3, [r7, #12]
 26424 0918 23F44013 		bic	r3, r3, #3145728
 26425 091c FB60     		str	r3, [r7, #12]
1372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the new external trigger edge for injected group */
1373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConvEdge;
 26426              		.loc 1 1373 0
 26427 091e FA68     		ldr	r2, [r7, #12]
 26428 0920 3B68     		ldr	r3, [r7, #0]
 26429 0922 42EA0303 		orr	r3, r2, r3
 26430 0926 FB60     		str	r3, [r7, #12]
1374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 26431              		.loc 1 1375 0
 26432 0928 7B68     		ldr	r3, [r7, #4]
 26433 092a FA68     		ldr	r2, [r7, #12]
 26434 092c 9A60     		str	r2, [r3, #8]
1376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26435              		.loc 1 1376 0
 26436 092e 07F11407 		add	r7, r7, #20
 26437 0932 BD46     		mov	sp, r7
 26438 0934 80BC     		pop	{r7}
 26439 0936 7047     		bx	lr
 26440              		.cfi_endproc
 26441              	.LFE137:
 26443              		.align	2
 26444              		.global	ADC_SoftwareStartInjectedConv
 26445              		.thumb
 26446              		.thumb_func
 26448              	ADC_SoftwareStartInjectedConv:
 26449              	.LFB138:
1377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the injected channels.
1380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
1384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26450              		.loc 1 1384 0
 26451              		.cfi_startproc
 26452              		@ args = 0, pretend = 0, frame = 8
 26453              		@ frame_needed = 1, uses_anonymous_args = 0
 26454              		@ link register save eliminated.
 26455 0938 80B4     		push	{r7}
 26456              	.LCFI82:
 26457              		.cfi_def_cfa_offset 4
 26458 093a 83B0     		sub	sp, sp, #12
 26459              	.LCFI83:
 26460              		.cfi_def_cfa_offset 16
 26461 093c 00AF     		add	r7, sp, #0
 26462              		.cfi_offset 7, -4
 26463              	.LCFI84:
 26464              		.cfi_def_cfa_register 7
 26465 093e 7860     		str	r0, [r7, #4]
1385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for injected group */
1388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 26466              		.loc 1 1388 0
 26467 0940 7B68     		ldr	r3, [r7, #4]
 26468 0942 9B68     		ldr	r3, [r3, #8]
 26469 0944 43F48002 		orr	r2, r3, #4194304
 26470 0948 7B68     		ldr	r3, [r7, #4]
 26471 094a 9A60     		str	r2, [r3, #8]
1389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26472              		.loc 1 1389 0
 26473 094c 07F10C07 		add	r7, r7, #12
 26474 0950 BD46     		mov	sp, r7
 26475 0952 80BC     		pop	{r7}
 26476 0954 7047     		bx	lr
 26477              		.cfi_endproc
 26478              	.LFE138:
 26480 0956 00BF     		.align	2
 26481              		.global	ADC_GetSoftwareStartInjectedConvCmdStatus
 26482              		.thumb
 26483              		.thumb_func
 26485              	ADC_GetSoftwareStartInjectedConvCmdStatus:
 26486              	.LFB139:
1390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start injected conversion Status.
1393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start injected conversion (SET or RESET).
1395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
1397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26487              		.loc 1 1397 0
 26488              		.cfi_startproc
 26489              		@ args = 0, pretend = 0, frame = 16
 26490              		@ frame_needed = 1, uses_anonymous_args = 0
 26491              		@ link register save eliminated.
 26492 0958 80B4     		push	{r7}
 26493              	.LCFI85:
 26494              		.cfi_def_cfa_offset 4
 26495 095a 85B0     		sub	sp, sp, #20
 26496              	.LCFI86:
 26497              		.cfi_def_cfa_offset 24
 26498 095c 00AF     		add	r7, sp, #0
 26499              		.cfi_offset 7, -4
 26500              	.LCFI87:
 26501              		.cfi_def_cfa_register 7
 26502 095e 7860     		str	r0, [r7, #4]
1398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 26503              		.loc 1 1398 0
 26504 0960 4FF00003 		mov	r3, #0
 26505 0964 FB73     		strb	r3, [r7, #15]
1399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of JSWSTART bit */
1403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 26506              		.loc 1 1403 0
 26507 0966 7B68     		ldr	r3, [r7, #4]
 26508 0968 9B68     		ldr	r3, [r3, #8]
 26509 096a 03F48003 		and	r3, r3, #4194304
 26510 096e 002B     		cmp	r3, #0
 26511 0970 03D0     		beq	.L70
1404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* JSWSTART bit is set */
1406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 26512              		.loc 1 1406 0
 26513 0972 4FF00103 		mov	r3, #1
 26514 0976 FB73     		strb	r3, [r7, #15]
 26515 0978 02E0     		b	.L71
 26516              	.L70:
1407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* JSWSTART bit is reset */
1411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 26517              		.loc 1 1411 0
 26518 097a 4FF00003 		mov	r3, #0
 26519 097e FB73     		strb	r3, [r7, #15]
 26520              	.L71:
1412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the JSWSTART bit status */
1414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 26521              		.loc 1 1414 0
 26522 0980 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26523              		.loc 1 1415 0
 26524 0982 1846     		mov	r0, r3
 26525 0984 07F11407 		add	r7, r7, #20
 26526 0988 BD46     		mov	sp, r7
 26527 098a 80BC     		pop	{r7}
 26528 098c 7047     		bx	lr
 26529              		.cfi_endproc
 26530              	.LFE139:
 26532 098e 00BF     		.align	2
 26533              		.global	ADC_AutoInjectedConvCmd
 26534              		.thumb
 26535              		.thumb_func
 26537              	ADC_AutoInjectedConvCmd:
 26538              	.LFB140:
1416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the selected ADC automatic injected group 
1419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         conversion after regular one.
1420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC auto injected conversion
1422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26539              		.loc 1 1426 0
 26540              		.cfi_startproc
 26541              		@ args = 0, pretend = 0, frame = 8
 26542              		@ frame_needed = 1, uses_anonymous_args = 0
 26543              		@ link register save eliminated.
 26544 0990 80B4     		push	{r7}
 26545              	.LCFI88:
 26546              		.cfi_def_cfa_offset 4
 26547 0992 83B0     		sub	sp, sp, #12
 26548              	.LCFI89:
 26549              		.cfi_def_cfa_offset 16
 26550 0994 00AF     		add	r7, sp, #0
 26551              		.cfi_offset 7, -4
 26552              	.LCFI90:
 26553              		.cfi_def_cfa_register 7
 26554 0996 7860     		str	r0, [r7, #4]
 26555 0998 0B46     		mov	r3, r1
 26556 099a FB70     		strb	r3, [r7, #3]
1427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 26557              		.loc 1 1430 0
 26558 099c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26559 099e 002B     		cmp	r3, #0
 26560 09a0 06D0     		beq	.L73
1431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC automatic injected group conversion */
1433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 26561              		.loc 1 1433 0
 26562 09a2 7B68     		ldr	r3, [r7, #4]
 26563 09a4 5B68     		ldr	r3, [r3, #4]
 26564 09a6 43F48062 		orr	r2, r3, #1024
 26565 09aa 7B68     		ldr	r3, [r7, #4]
 26566 09ac 5A60     		str	r2, [r3, #4]
 26567 09ae 05E0     		b	.L72
 26568              	.L73:
1434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC automatic injected group conversion */
1438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 26569              		.loc 1 1438 0
 26570 09b0 7B68     		ldr	r3, [r7, #4]
 26571 09b2 5B68     		ldr	r3, [r3, #4]
 26572 09b4 23F48062 		bic	r2, r3, #1024
 26573 09b8 7B68     		ldr	r3, [r7, #4]
 26574 09ba 5A60     		str	r2, [r3, #4]
 26575              	.L72:
1439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26576              		.loc 1 1440 0
 26577 09bc 07F10C07 		add	r7, r7, #12
 26578 09c0 BD46     		mov	sp, r7
 26579 09c2 80BC     		pop	{r7}
 26580 09c4 7047     		bx	lr
 26581              		.cfi_endproc
 26582              	.LFE140:
 26584 09c6 00BF     		.align	2
 26585              		.global	ADC_InjectedDiscModeCmd
 26586              		.thumb
 26587              		.thumb_func
 26589              	ADC_InjectedDiscModeCmd:
 26590              	.LFB141:
1441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode for injected group 
1444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         channel for the specified ADC
1445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on injected
1447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         group channel.
1448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26591              		.loc 1 1452 0
 26592              		.cfi_startproc
 26593              		@ args = 0, pretend = 0, frame = 8
 26594              		@ frame_needed = 1, uses_anonymous_args = 0
 26595              		@ link register save eliminated.
 26596 09c8 80B4     		push	{r7}
 26597              	.LCFI91:
 26598              		.cfi_def_cfa_offset 4
 26599 09ca 83B0     		sub	sp, sp, #12
 26600              	.LCFI92:
 26601              		.cfi_def_cfa_offset 16
 26602 09cc 00AF     		add	r7, sp, #0
 26603              		.cfi_offset 7, -4
 26604              	.LCFI93:
 26605              		.cfi_def_cfa_register 7
 26606 09ce 7860     		str	r0, [r7, #4]
 26607 09d0 0B46     		mov	r3, r1
 26608 09d2 FB70     		strb	r3, [r7, #3]
1453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 26609              		.loc 1 1456 0
 26610 09d4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26611 09d6 002B     		cmp	r3, #0
 26612 09d8 06D0     		beq	.L76
1457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC injected discontinuous mode */
1459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 26613              		.loc 1 1459 0
 26614 09da 7B68     		ldr	r3, [r7, #4]
 26615 09dc 5B68     		ldr	r3, [r3, #4]
 26616 09de 43F48052 		orr	r2, r3, #4096
 26617 09e2 7B68     		ldr	r3, [r7, #4]
 26618 09e4 5A60     		str	r2, [r3, #4]
 26619 09e6 05E0     		b	.L75
 26620              	.L76:
1460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC injected discontinuous mode */
1464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 26621              		.loc 1 1464 0
 26622 09e8 7B68     		ldr	r3, [r7, #4]
 26623 09ea 5B68     		ldr	r3, [r3, #4]
 26624 09ec 23F48052 		bic	r2, r3, #4096
 26625 09f0 7B68     		ldr	r3, [r7, #4]
 26626 09f2 5A60     		str	r2, [r3, #4]
 26627              	.L75:
1465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26628              		.loc 1 1466 0
 26629 09f4 07F10C07 		add	r7, r7, #12
 26630 09f8 BD46     		mov	sp, r7
 26631 09fa 80BC     		pop	{r7}
 26632 09fc 7047     		bx	lr
 26633              		.cfi_endproc
 26634              	.LFE141:
 26636 09fe 00BF     		.align	2
 26637              		.global	ADC_GetInjectedConversionValue
 26638              		.thumb
 26639              		.thumb_func
 26641              	ADC_GetInjectedConversionValue:
 26642              	.LFB142:
1467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the ADC injected channel conversion result
1470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the converted ADC injected channel.
1472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
1478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
1480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26643              		.loc 1 1480 0
 26644              		.cfi_startproc
 26645              		@ args = 0, pretend = 0, frame = 16
 26646              		@ frame_needed = 1, uses_anonymous_args = 0
 26647              		@ link register save eliminated.
 26648 0a00 80B4     		push	{r7}
 26649              	.LCFI94:
 26650              		.cfi_def_cfa_offset 4
 26651 0a02 85B0     		sub	sp, sp, #20
 26652              	.LCFI95:
 26653              		.cfi_def_cfa_offset 24
 26654 0a04 00AF     		add	r7, sp, #0
 26655              		.cfi_offset 7, -4
 26656              	.LCFI96:
 26657              		.cfi_def_cfa_register 7
 26658 0a06 7860     		str	r0, [r7, #4]
 26659 0a08 0B46     		mov	r3, r1
 26660 0a0a FB70     		strb	r3, [r7, #3]
1481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   __IO uint32_t tmp = 0;
 26661              		.loc 1 1481 0
 26662 0a0c 4FF00003 		mov	r3, #0
 26663 0a10 FB60     		str	r3, [r7, #12]
1482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 26664              		.loc 1 1487 0
 26665 0a12 7B68     		ldr	r3, [r7, #4]
 26666 0a14 FB60     		str	r3, [r7, #12]
1488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel + JDR_OFFSET;
 26667              		.loc 1 1488 0
 26668 0a16 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 26669 0a18 FB68     		ldr	r3, [r7, #12]
 26670 0a1a D318     		adds	r3, r2, r3
 26671 0a1c 03F12803 		add	r3, r3, #40
 26672 0a20 FB60     		str	r3, [r7, #12]
1489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Returns the selected injected channel conversion data value */
1491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (uint16_t) (*(__IO uint32_t*)  tmp); 
 26673              		.loc 1 1491 0
 26674 0a22 FB68     		ldr	r3, [r7, #12]
 26675 0a24 1B68     		ldr	r3, [r3, #0]
 26676 0a26 9BB2     		uxth	r3, r3
1492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26677              		.loc 1 1492 0
 26678 0a28 1846     		mov	r0, r3
 26679 0a2a 07F11407 		add	r7, r7, #20
 26680 0a2e BD46     		mov	sp, r7
 26681 0a30 80BC     		pop	{r7}
 26682 0a32 7047     		bx	lr
 26683              		.cfi_endproc
 26684              	.LFE142:
 26686              		.align	2
 26687              		.global	ADC_ITConfig
 26688              		.thumb
 26689              		.thumb_func
 26691              	ADC_ITConfig:
 26692              	.LFB143:
1493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group7 Interrupts and flags management functions
1498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Interrupts and flags management functions
1499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                    Interrupts and flags management functions
1503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the ADC Interrupts and 
1506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   to get the status and clear flags and Interrupts pending bits.
1507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Each ADC provides 4 Interrupts sources and 6 Flags which can be divided into 
1509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   3 groups:
1510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   I. Flags and Interrupts for ADC regular channels
1512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   =================================================
1513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_OVR : Overrun detection when regular converted data are lost
1516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_FLAG_EOC : Regular channel end of conversion ==> to indicate (depending 
1518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               on EOCS bit, managed by ADC_EOCOnEachRegularChannelCmd() ) the end of:
1519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                ==> a regular CHANNEL conversion 
1520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                ==> sequence of regular GROUP conversions .
1521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      3. ADC_FLAG_STRT: Regular channel start ==> to indicate when regular CHANNEL 
1523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               conversion starts.
1524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_OVR : specifies the interrupt source for Overrun detection event.  
1528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_IT_EOC : specifies the interrupt source for Regular channel end of 
1529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                      conversion event.
1530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   II. Flags and Interrupts for ADC Injected channels
1533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   =================================================
1534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_JEOC : Injected channel end of conversion ==> to indicate at 
1537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                the end of injected GROUP conversion  
1538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               
1539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_FLAG_JSTRT: Injected channel start ==> to indicate hardware when 
1540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                injected GROUP conversion starts.
1541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_JEOC : specifies the interrupt source for Injected channel end of 
1545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                       conversion event.     
1546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   III. General Flags and Interrupts for the ADC
1548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ================================================= 
1549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_AWD: Analog watchdog ==> to indicate if the converted voltage 
1552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               crosses the programmed thresholds values.
1553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               
1554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_AWD : specifies the interrupt source for Analog watchdog event. 
1557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   The user should identify which mode will be used in his application to manage 
1560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   the ADC controller events: Polling mode or Interrupt mode.
1561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   In the Polling Mode it is advised to use the following functions:
1563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       - ADC_GetFlagStatus() : to check if flags events occur. 
1564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       - ADC_ClearFlag()     : to clear the flags events.
1565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       
1566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   In the Interrupt Mode it is advised to use the following functions:
1567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_ITConfig()          : to enable or disable the interrupt source.
1568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_GetITStatus()       : to check if Interrupt occurs.
1569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_ClearITPendingBit() : to clear the Interrupt pending Bit 
1570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                  (corresponding Flag). 
1571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
1574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC interrupts.
1576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt sources to be enabled or disabled. 
1578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt enable                       
1583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the specified ADC interrupts.
1584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
1588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26693              		.loc 1 1588 0
 26694              		.cfi_startproc
 26695              		@ args = 0, pretend = 0, frame = 16
 26696              		@ frame_needed = 1, uses_anonymous_args = 0
 26697              		@ link register save eliminated.
 26698 0a34 80B4     		push	{r7}
 26699              	.LCFI97:
 26700              		.cfi_def_cfa_offset 4
 26701 0a36 85B0     		sub	sp, sp, #20
 26702              	.LCFI98:
 26703              		.cfi_def_cfa_offset 24
 26704 0a38 00AF     		add	r7, sp, #0
 26705              		.cfi_offset 7, -4
 26706              	.LCFI99:
 26707              		.cfi_def_cfa_register 7
 26708 0a3a 7860     		str	r0, [r7, #4]
 26709 0a3c 1346     		mov	r3, r2
 26710 0a3e 0A46     		mov	r2, r1	@ movhi
 26711 0a40 7A80     		strh	r2, [r7, #2]	@ movhi
 26712 0a42 7B70     		strb	r3, [r7, #1]
1589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t itmask = 0;
 26713              		.loc 1 1589 0
 26714 0a44 4FF00003 		mov	r3, #0
 26715 0a48 FB60     		str	r3, [r7, #12]
1590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint8_t)ADC_IT;
 26716              		.loc 1 1596 0
 26717 0a4a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 26718 0a4c DBB2     		uxtb	r3, r3
 26719 0a4e FB60     		str	r3, [r7, #12]
1597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint32_t)0x01 << itmask;    
 26720              		.loc 1 1597 0
 26721 0a50 FB68     		ldr	r3, [r7, #12]
 26722 0a52 4FF00102 		mov	r2, #1
 26723 0a56 02FA03F3 		lsl	r3, r2, r3
 26724 0a5a FB60     		str	r3, [r7, #12]
1598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 26725              		.loc 1 1599 0
 26726 0a5c 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 26727 0a5e 002B     		cmp	r3, #0
 26728 0a60 06D0     		beq	.L80
1600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC interrupts */
1602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= itmask;
 26729              		.loc 1 1602 0
 26730 0a62 7B68     		ldr	r3, [r7, #4]
 26731 0a64 5A68     		ldr	r2, [r3, #4]
 26732 0a66 FB68     		ldr	r3, [r7, #12]
 26733 0a68 1A43     		orrs	r2, r2, r3
 26734 0a6a 7B68     		ldr	r3, [r7, #4]
 26735 0a6c 5A60     		str	r2, [r3, #4]
 26736 0a6e 07E0     		b	.L79
 26737              	.L80:
1603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC interrupts */
1607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (~(uint32_t)itmask);
 26738              		.loc 1 1607 0
 26739 0a70 7B68     		ldr	r3, [r7, #4]
 26740 0a72 5A68     		ldr	r2, [r3, #4]
 26741 0a74 FB68     		ldr	r3, [r7, #12]
 26742 0a76 6FEA0303 		mvn	r3, r3
 26743 0a7a 1A40     		ands	r2, r2, r3
 26744 0a7c 7B68     		ldr	r3, [r7, #4]
 26745 0a7e 5A60     		str	r2, [r3, #4]
 26746              	.L79:
1608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26747              		.loc 1 1609 0
 26748 0a80 07F11407 		add	r7, r7, #20
 26749 0a84 BD46     		mov	sp, r7
 26750 0a86 80BC     		pop	{r7}
 26751 0a88 7047     		bx	lr
 26752              		.cfi_endproc
 26753              	.LFE143:
 26755 0a8a 00BF     		.align	2
 26756              		.global	ADC_GetFlagStatus
 26757              		.thumb
 26758              		.thumb_func
 26760              	ADC_GetFlagStatus:
 26761              	.LFB144:
1610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC flag is set or not.
1613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to check. 
1615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                                                 
1622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_FLAG (SET or RESET).
1623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26762              		.loc 1 1625 0
 26763              		.cfi_startproc
 26764              		@ args = 0, pretend = 0, frame = 16
 26765              		@ frame_needed = 1, uses_anonymous_args = 0
 26766              		@ link register save eliminated.
 26767 0a8c 80B4     		push	{r7}
 26768              	.LCFI100:
 26769              		.cfi_def_cfa_offset 4
 26770 0a8e 85B0     		sub	sp, sp, #20
 26771              	.LCFI101:
 26772              		.cfi_def_cfa_offset 24
 26773 0a90 00AF     		add	r7, sp, #0
 26774              		.cfi_offset 7, -4
 26775              	.LCFI102:
 26776              		.cfi_def_cfa_register 7
 26777 0a92 7860     		str	r0, [r7, #4]
 26778 0a94 0B46     		mov	r3, r1
 26779 0a96 FB70     		strb	r3, [r7, #3]
1626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 26780              		.loc 1 1626 0
 26781 0a98 4FF00003 		mov	r3, #0
 26782 0a9c FB73     		strb	r3, [r7, #15]
1627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
1630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC flag */
1632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 26783              		.loc 1 1632 0
 26784 0a9e 7B68     		ldr	r3, [r7, #4]
 26785 0aa0 1A68     		ldr	r2, [r3, #0]
 26786 0aa2 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26787 0aa4 02EA0303 		and	r3, r2, r3
 26788 0aa8 002B     		cmp	r3, #0
 26789 0aaa 03D0     		beq	.L83
1633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_FLAG is set */
1635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 26790              		.loc 1 1635 0
 26791 0aac 4FF00103 		mov	r3, #1
 26792 0ab0 FB73     		strb	r3, [r7, #15]
 26793 0ab2 02E0     		b	.L84
 26794              	.L83:
1636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_FLAG is reset */
1640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 26795              		.loc 1 1640 0
 26796 0ab4 4FF00003 		mov	r3, #0
 26797 0ab8 FB73     		strb	r3, [r7, #15]
 26798              	.L84:
1641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the ADC_FLAG status */
1643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 26799              		.loc 1 1643 0
 26800 0aba FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26801              		.loc 1 1644 0
 26802 0abc 1846     		mov	r0, r3
 26803 0abe 07F11407 		add	r7, r7, #20
 26804 0ac2 BD46     		mov	sp, r7
 26805 0ac4 80BC     		pop	{r7}
 26806 0ac6 7047     		bx	lr
 26807              		.cfi_endproc
 26808              	.LFE144:
 26810              		.align	2
 26811              		.global	ADC_ClearFlag
 26812              		.thumb
 26813              		.thumb_func
 26815              	ADC_ClearFlag:
 26816              	.LFB145:
1645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's pending flags.
1648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to clear. 
1650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be any combination of the following values:
1651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                          
1657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26817              		.loc 1 1660 0
 26818              		.cfi_startproc
 26819              		@ args = 0, pretend = 0, frame = 8
 26820              		@ frame_needed = 1, uses_anonymous_args = 0
 26821              		@ link register save eliminated.
 26822 0ac8 80B4     		push	{r7}
 26823              	.LCFI103:
 26824              		.cfi_def_cfa_offset 4
 26825 0aca 83B0     		sub	sp, sp, #12
 26826              	.LCFI104:
 26827              		.cfi_def_cfa_offset 16
 26828 0acc 00AF     		add	r7, sp, #0
 26829              		.cfi_offset 7, -4
 26830              	.LCFI105:
 26831              		.cfi_def_cfa_register 7
 26832 0ace 7860     		str	r0, [r7, #4]
 26833 0ad0 0B46     		mov	r3, r1
 26834 0ad2 FB70     		strb	r3, [r7, #3]
1661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
1664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the selected ADC flags */
1666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)ADC_FLAG;
 26835              		.loc 1 1666 0
 26836 0ad4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26837 0ad6 6FEA0302 		mvn	r2, r3
 26838 0ada 7B68     		ldr	r3, [r7, #4]
 26839 0adc 1A60     		str	r2, [r3, #0]
1667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26840              		.loc 1 1667 0
 26841 0ade 07F10C07 		add	r7, r7, #12
 26842 0ae2 BD46     		mov	sp, r7
 26843 0ae4 80BC     		pop	{r7}
 26844 0ae6 7047     		bx	lr
 26845              		.cfi_endproc
 26846              	.LFE145:
 26848              		.align	2
 26849              		.global	ADC_GetITStatus
 26850              		.thumb
 26851              		.thumb_func
 26853              	ADC_GetITStatus:
 26854              	.LFB146:
1668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC interrupt has occurred or not.
1671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx:   where x can be 1, 2 or 3 to select the ADC peripheral.
1672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt source to check. 
1673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                        
1678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_IT (SET or RESET).
1679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26855              		.loc 1 1681 0
 26856              		.cfi_startproc
 26857              		@ args = 0, pretend = 0, frame = 24
 26858              		@ frame_needed = 1, uses_anonymous_args = 0
 26859              		@ link register save eliminated.
 26860 0ae8 80B4     		push	{r7}
 26861              	.LCFI106:
 26862              		.cfi_def_cfa_offset 4
 26863 0aea 87B0     		sub	sp, sp, #28
 26864              	.LCFI107:
 26865              		.cfi_def_cfa_offset 32
 26866 0aec 00AF     		add	r7, sp, #0
 26867              		.cfi_offset 7, -4
 26868              	.LCFI108:
 26869              		.cfi_def_cfa_register 7
 26870 0aee 7860     		str	r0, [r7, #4]
 26871 0af0 0B46     		mov	r3, r1
 26872 0af2 7B80     		strh	r3, [r7, #2]	@ movhi
1682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ITStatus bitstatus = RESET;
 26873              		.loc 1 1682 0
 26874 0af4 4FF00003 		mov	r3, #0
 26875 0af8 FB75     		strb	r3, [r7, #23]
1683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t itmask = 0, enablestatus = 0;
 26876              		.loc 1 1683 0
 26877 0afa 4FF00003 		mov	r3, #0
 26878 0afe 3B61     		str	r3, [r7, #16]
 26879 0b00 4FF00003 		mov	r3, #0
 26880 0b04 FB60     		str	r3, [r7, #12]
1684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
1688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = ADC_IT >> 8;
 26881              		.loc 1 1690 0
 26882 0b06 7B88     		ldrh	r3, [r7, #2]
 26883 0b08 4FEA1323 		lsr	r3, r3, #8
 26884 0b0c 9BB2     		uxth	r3, r3
 26885 0b0e 3B61     		str	r3, [r7, #16]
1691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC_IT enable bit status */
1693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 26886              		.loc 1 1693 0
 26887 0b10 7B68     		ldr	r3, [r7, #4]
 26888 0b12 5A68     		ldr	r2, [r3, #4]
 26889 0b14 7B88     		ldrh	r3, [r7, #2]	@ movhi
 26890 0b16 DBB2     		uxtb	r3, r3
 26891 0b18 4FF00101 		mov	r1, #1
 26892 0b1c 01FA03F3 		lsl	r3, r1, r3
 26893 0b20 02EA0303 		and	r3, r2, r3
 26894 0b24 FB60     		str	r3, [r7, #12]
1694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC interrupt */
1696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 26895              		.loc 1 1696 0
 26896 0b26 7B68     		ldr	r3, [r7, #4]
 26897 0b28 1A68     		ldr	r2, [r3, #0]
 26898 0b2a 3B69     		ldr	r3, [r7, #16]
 26899 0b2c 02EA0303 		and	r3, r2, r3
 26900 0b30 002B     		cmp	r3, #0
 26901 0b32 06D0     		beq	.L87
 26902              		.loc 1 1696 0 is_stmt 0 discriminator 1
 26903 0b34 FB68     		ldr	r3, [r7, #12]
 26904 0b36 002B     		cmp	r3, #0
 26905 0b38 03D0     		beq	.L87
1697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_IT is set */
1699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 26906              		.loc 1 1699 0 is_stmt 1
 26907 0b3a 4FF00103 		mov	r3, #1
 26908 0b3e FB75     		strb	r3, [r7, #23]
 26909 0b40 02E0     		b	.L88
 26910              	.L87:
1700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_IT is reset */
1704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 26911              		.loc 1 1704 0
 26912 0b42 4FF00003 		mov	r3, #0
 26913 0b46 FB75     		strb	r3, [r7, #23]
 26914              	.L88:
1705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the ADC_IT status */
1707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 26915              		.loc 1 1707 0
 26916 0b48 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26917              		.loc 1 1708 0
 26918 0b4a 1846     		mov	r0, r3
 26919 0b4c 07F11C07 		add	r7, r7, #28
 26920 0b50 BD46     		mov	sp, r7
 26921 0b52 80BC     		pop	{r7}
 26922 0b54 7047     		bx	lr
 26923              		.cfi_endproc
 26924              	.LFE146:
 26926 0b56 00BF     		.align	2
 26927              		.global	ADC_ClearITPendingBit
 26928              		.thumb
 26929              		.thumb_func
 26931              	ADC_ClearITPendingBit:
 26932              	.LFB147:
1709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's interrupt pending bits.
1712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt pending bit to clear.
1714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                         
1719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26933              		.loc 1 1722 0
 26934              		.cfi_startproc
 26935              		@ args = 0, pretend = 0, frame = 16
 26936              		@ frame_needed = 1, uses_anonymous_args = 0
 26937              		@ link register save eliminated.
 26938 0b58 80B4     		push	{r7}
 26939              	.LCFI109:
 26940              		.cfi_def_cfa_offset 4
 26941 0b5a 85B0     		sub	sp, sp, #20
 26942              	.LCFI110:
 26943              		.cfi_def_cfa_offset 24
 26944 0b5c 00AF     		add	r7, sp, #0
 26945              		.cfi_offset 7, -4
 26946              	.LCFI111:
 26947              		.cfi_def_cfa_register 7
 26948 0b5e 7860     		str	r0, [r7, #4]
 26949 0b60 0B46     		mov	r3, r1
 26950 0b62 7B80     		strh	r3, [r7, #2]	@ movhi
1723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint8_t itmask = 0;
 26951              		.loc 1 1723 0
 26952 0b64 4FF00003 		mov	r3, #0
 26953 0b68 FB73     		strb	r3, [r7, #15]
1724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint8_t)(ADC_IT >> 8);
 26954              		.loc 1 1728 0
 26955 0b6a 7B88     		ldrh	r3, [r7, #2]
 26956 0b6c 4FEA1323 		lsr	r3, r3, #8
 26957 0b70 9BB2     		uxth	r3, r3
 26958 0b72 FB73     		strb	r3, [r7, #15]
1729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the selected ADC interrupt pending bits */
1730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)itmask;
 26959              		.loc 1 1730 0
 26960 0b74 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 26961 0b76 6FEA0302 		mvn	r2, r3
 26962 0b7a 7B68     		ldr	r3, [r7, #4]
 26963 0b7c 1A60     		str	r2, [r3, #0]
1731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }                    
 26964              		.loc 1 1731 0
 26965 0b7e 07F11407 		add	r7, r7, #20
 26966 0b82 BD46     		mov	sp, r7
 26967 0b84 80BC     		pop	{r7}
 26968 0b86 7047     		bx	lr
 26969              		.cfi_endproc
 26970              	.LFE147:
 26972              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_adc.c
     /tmp/ccf3elxc.s:24623  .text:00000000 $t
     /tmp/ccf3elxc.s:24628  .text:00000000 ADC_DeInit
     /tmp/ccf3elxc.s:24660  .text:00000020 ADC_Init
     /tmp/ccf3elxc.s:24779  .text:000000e0 $d
     /tmp/ccf3elxc.s:24783  .text:000000e4 $t
     /tmp/ccf3elxc.s:24788  .text:000000e4 ADC_StructInit
     /tmp/ccf3elxc.s:24847  .text:00000130 ADC_CommonInit
     /tmp/ccf3elxc.s:24910  .text:00000180 $d
     /tmp/ccf3elxc.s:24915  .text:00000188 $t
     /tmp/ccf3elxc.s:24920  .text:00000188 ADC_CommonStructInit
     /tmp/ccf3elxc.s:24967  .text:000001bc ADC_Cmd
     /tmp/ccf3elxc.s:25019  .text:000001f4 ADC_AnalogWatchdogCmd
     /tmp/ccf3elxc.s:25072  .text:00000230 ADC_AnalogWatchdogThresholdsConfig
     /tmp/ccf3elxc.s:25115  .text:00000258 ADC_AnalogWatchdogSingleChannelConfig
     /tmp/ccf3elxc.s:25168  .text:00000294 ADC_TempSensorVrefintCmd
     /tmp/ccf3elxc.s:25214  .text:000002c8 $d
     /tmp/ccf3elxc.s:25218  .text:000002cc $t
     /tmp/ccf3elxc.s:25223  .text:000002cc ADC_VBATCmd
     /tmp/ccf3elxc.s:25269  .text:00000300 $d
     /tmp/ccf3elxc.s:25273  .text:00000304 $t
     /tmp/ccf3elxc.s:25278  .text:00000304 ADC_RegularChannelConfig
     /tmp/ccf3elxc.s:25520  .text:000004d4 ADC_SoftwareStartConv
     /tmp/ccf3elxc.s:25557  .text:000004f4 ADC_GetSoftwareStartConvStatus
     /tmp/ccf3elxc.s:25609  .text:0000052c ADC_EOCOnEachRegularChannelCmd
     /tmp/ccf3elxc.s:25661  .text:00000564 ADC_ContinuousModeCmd
     /tmp/ccf3elxc.s:25713  .text:0000059c ADC_DiscModeChannelCountConfig
     /tmp/ccf3elxc.s:25774  .text:000005e8 ADC_DiscModeCmd
     /tmp/ccf3elxc.s:25826  .text:00000620 ADC_GetConversionValue
     /tmp/ccf3elxc.s:25862  .text:0000063c ADC_GetMultiModeConversionValue
     /tmp/ccf3elxc.s:25887  .text:0000064c $d
     /tmp/ccf3elxc.s:25891  .text:00000650 $t
     /tmp/ccf3elxc.s:25896  .text:00000650 ADC_DMACmd
     /tmp/ccf3elxc.s:25948  .text:00000688 ADC_DMARequestAfterLastTransferCmd
     /tmp/ccf3elxc.s:26000  .text:000006c0 ADC_MultiModeDMARequestAfterLastTransferCmd
     /tmp/ccf3elxc.s:26046  .text:000006f4 $d
     /tmp/ccf3elxc.s:26050  .text:000006f8 $t
     /tmp/ccf3elxc.s:26055  .text:000006f8 ADC_InjectedChannelConfig
     /tmp/ccf3elxc.s:26233  .text:00000848 ADC_InjectedSequencerLengthConfig
     /tmp/ccf3elxc.s:26294  .text:00000894 ADC_SetInjectedOffset
     /tmp/ccf3elxc.s:26344  .text:000008c8 ADC_ExternalTrigInjectedConvConfig
     /tmp/ccf3elxc.s:26396  .text:00000900 ADC_ExternalTrigInjectedConvEdgeConfig
     /tmp/ccf3elxc.s:26448  .text:00000938 ADC_SoftwareStartInjectedConv
     /tmp/ccf3elxc.s:26485  .text:00000958 ADC_GetSoftwareStartInjectedConvCmdStatus
     /tmp/ccf3elxc.s:26537  .text:00000990 ADC_AutoInjectedConvCmd
     /tmp/ccf3elxc.s:26589  .text:000009c8 ADC_InjectedDiscModeCmd
     /tmp/ccf3elxc.s:26641  .text:00000a00 ADC_GetInjectedConversionValue
     /tmp/ccf3elxc.s:26691  .text:00000a34 ADC_ITConfig
     /tmp/ccf3elxc.s:26760  .text:00000a8c ADC_GetFlagStatus
     /tmp/ccf3elxc.s:26815  .text:00000ac8 ADC_ClearFlag
     /tmp/ccf3elxc.s:26853  .text:00000ae8 ADC_GetITStatus
     /tmp/ccf3elxc.s:26931  .text:00000b58 ADC_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
