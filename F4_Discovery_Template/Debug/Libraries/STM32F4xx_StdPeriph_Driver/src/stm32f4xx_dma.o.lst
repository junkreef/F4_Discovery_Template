   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f4xx_dma.c"
  23              	.Ltext0:
  24              		.file 1 "../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c"
 24609              		.align	2
 24610              		.global	DMA_DeInit
 24611              		.thumb
 24612              		.thumb_func
 24614              	DMA_DeInit:
 24615              	.LFB110:
   1:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
   2:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************
   3:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @file    stm32f4xx_dma.c
   4:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @version V1.0.2
   6:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @date    05-March-2012
   7:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          functionalities of the Direct Memory Access controller (DMA):           
   9:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Initialization and Configuration
  10:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Data Counter
  11:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Double Buffer mode configuration and command  
  12:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Interrupts and flags management
  13:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
  14:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  @verbatim
  15:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
  16:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          ===================================================================      
  17:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                 How to use this driver
  18:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          =================================================================== 
  19:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          1. Enable The DMA controller clock using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA1, E
  20:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             function for DMA1 or using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2, ENABLE)
  21:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             function for DMA2.
  22:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  23:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          2. Enable and configure the peripheral to be connected to the DMA Stream
  24:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             (except for internal SRAM / FLASH memories: no initialization is 
  25:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             necessary). 
  26:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        
  27:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          3. For a given Stream, program the required configuration through following parameters
  28:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Source and Destination addresses, Transfer Direction, Transfer size, Source and Des
  29:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             data formats, Circular or Normal mode, Stream Priority level, Source and Destinatio
  30:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Incrementation mode, FIFO mode and its Threshold (if needed), Burst mode for Source
  31:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Destination (if needed) using the DMA_Init() function.
  32:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             To avoid filling un-nesecessary fields, you can call DMA_StructInit() function
  33:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             to initialize a given structure with default values (reset values), the modify
  34:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             only necessary fields (ie. Source and Destination addresses, Transfer size and Data
  35:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  36:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          4. Enable the NVIC and the corresponding interrupt(s) using the function 
  37:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_ITConfig() if you need to use DMA interrupts. 
  38:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  39:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          5. Optionally, if the Circular mode is enabled, you can use the Double buffer mode by 
  40:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the second Memory address and the first Memory to be used through the function 
  41:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_DoubleBufferModeConfig(). Then enable the Double buffer mode through the functi
  42:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_DoubleBufferModeCmd(). These operations must be done before step 6.
  43:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
  44:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          6. Enable the DMA stream using the DMA_Cmd() function. 
  45:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                
  46:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          7. Activate the needed Stream Request using PPP_DMACmd() function for
  47:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             any PPP peripheral except internal SRAM and FLASH (ie. SPI, USART ...)
  48:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             The function allowing this operation is provided in each PPP peripheral
  49:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             driver (ie. SPI_DMACmd for SPI peripheral).
  50:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Once the Stream is enabled, it is not possible to modify its configuration
  51:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             unless the stream is stopped and disabled.
  52:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             After enabling the Stream, it is advised to monitor the EN bit status using
  53:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the function DMA_GetCmdStatus(). In case of configuration errors or bus errors
  54:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             this bit will remain reset and all transfers on this Stream will remain on hold.   
  55:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  56:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          8. Optionally, you can configure the number of data to be transferred
  57:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             when the Stream is disabled (ie. after each Transfer Complete event
  58:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             or when a Transfer Error occurs) using the function DMA_SetCurrDataCounter().
  59:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             And you can get the number of remaining data to be transferred using 
  60:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the function DMA_GetCurrDataCounter() at run time (when the DMA Stream is
  61:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             enabled and running).  
  62:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                   
  63:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          9. To control DMA events you can use one of the following 
  64:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              two methods:
  65:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *               a- Check on DMA Stream flags using the function DMA_GetFlagStatus().  
  66:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *               b- Use DMA interrupts through the function DMA_ITConfig() at initialization
  67:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                  phase and DMA_GetITStatus() function into interrupt routines in
  68:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                  communication phase.  
  69:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              After checking on a flag you should clear it using DMA_ClearFlag()
  70:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              function. And after checking on an interrupt event you should 
  71:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              clear it using DMA_ClearITPendingBit() function.    
  72:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              
  73:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          10. Optionally, if Circular mode and Double Buffer mode are enabled, you can modify
  74:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the Memory Addresses using the function DMA_MemoryTargetConfig(). Make sure that
  75:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the Memory Address to be modified is not the one currently in use by DMA Stream.
  76:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              This condition can be monitored using the function DMA_GetCurrentMemoryTarget().
  77:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              
  78:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          11. Optionally, Pause-Resume operations may be performed:
  79:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              The DMA_Cmd() function may be used to perform Pause-Resume operation. When a 
  80:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              transfer is ongoing, calling this function to disable the Stream will cause the 
  81:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              transfer to be paused. All configuration registers and the number of remaining 
  82:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              data will be preserved. When calling again this function to re-enable the Stream, 
  83:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the transfer will be resumed from the point where it was paused.          
  84:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                 
  85:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Memory-to-Memory transfer is possible by setting the address of the memory into
  86:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the Peripheral registers. In this mode, Circular mode and Double Buffer mode
  87:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         are not allowed.
  88:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
  89:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   The FIFO is used mainly to reduce bus usage and to allow data packing/unpacking: it is
  90:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         possible to set different Data Sizes for the Peripheral and the Memory (ie. you can set
  91:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Half-Word data size for the peripheral to access its data register and set Word data si
  92:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         for the Memory to gain in access time. Each two Half-words will be packed and written i
  93:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         a single access to a Word in the Memory).
  94:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
  95:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  When FIFO is disabled, it is not allowed to configure different Data Sizes for Source
  96:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and Destination. In this case the Peripheral Data Size will be applied to both Source
  97:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and Destination.               
  98:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  99:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  @endverbatim
 100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                  
 101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************
 102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @attention
 103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
 105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * You may not use this file except in compliance with the License.
 108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * You may obtain a copy of the License at:
 109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * Unless required by applicable law or agreed to in writing, software 
 113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * See the License for the specific language governing permissions and
 116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * limitations under the License.
 117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************
 119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */ 
 120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Includes ------------------------------------------------------------------*/
 122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #include "stm32f4xx_dma.h"
 123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #include "stm32f4xx_rcc.h"
 124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA 
 130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief DMA driver modules
 131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */ 
 133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private typedef -----------------------------------------------------------*/
 135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private define ------------------------------------------------------------*/
 136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Masks Definition */
 138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define TRANSFER_IT_ENABLE_MASK (uint32_t)(DMA_SxCR_TCIE | DMA_SxCR_HTIE | \
 139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_SxCR_TEIE | DMA_SxCR_DMEIE)
 140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream0_IT_MASK     (uint32_t)(DMA_LISR_FEIF0 | DMA_LISR_DMEIF0 | \
 142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_LISR_TEIF0 | DMA_LISR_HTIF0 | \
 143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_LISR_TCIF0)
 144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream1_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 6)
 146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream2_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 16)
 147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream3_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 22)
 148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream4_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK | (uint32_t)0x20000000)
 149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream5_IT_MASK     (uint32_t)(DMA_Stream1_IT_MASK | (uint32_t)0x20000000)
 150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream6_IT_MASK     (uint32_t)(DMA_Stream2_IT_MASK | (uint32_t)0x20000000)
 151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream7_IT_MASK     (uint32_t)(DMA_Stream3_IT_MASK | (uint32_t)0x20000000)
 152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define TRANSFER_IT_MASK        (uint32_t)0x0F3C0F3C
 153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define HIGH_ISR_MASK           (uint32_t)0x20000000
 154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define RESERVED_MASK           (uint32_t)0x0F7D0F7D  
 155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private macro -------------------------------------------------------------*/
 157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private variables ---------------------------------------------------------*/
 158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private function prototypes -----------------------------------------------*/
 159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private functions ---------------------------------------------------------*/
 160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Private_Functions
 163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group1 Initialization and Configuration functions
 167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Initialization and Configuration functions
 168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                  Initialization and Configuration functions
 172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides functions allowing to initialize the DMA Stream source
 175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   and destination addresses, incrementation and data sizes, transfer direction, 
 176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   buffer size, circular/normal mode selection, memory-to-memory mode selection 
 177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   and Stream priority value.
 178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA_Init() function follows the DMA configuration procedures as described in
 180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   reference manual (RM0090) except the first point: waiting on EN bit to be reset.
 181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This condition should be checked by user application using the function DMA_GetCmdStatus()
 182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   before calling the DMA_Init() function.
 183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Deinitialize the DMAy Streamx registers to their default reset values.
 190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
 195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 24616              		.loc 1 195 0
 24617              		.cfi_startproc
 24618              		@ args = 0, pretend = 0, frame = 8
 24619              		@ frame_needed = 1, uses_anonymous_args = 0
 24620              		@ link register save eliminated.
 24621 0000 80B4     		push	{r7}
 24622              	.LCFI0:
 24623              		.cfi_def_cfa_offset 4
 24624 0002 83B0     		sub	sp, sp, #12
 24625              	.LCFI1:
 24626              		.cfi_def_cfa_offset 16
 24627 0004 00AF     		add	r7, sp, #0
 24628              		.cfi_offset 7, -4
 24629              	.LCFI2:
 24630              		.cfi_def_cfa_register 7
 24631 0006 7860     		str	r0, [r7, #4]
 196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Disable the selected DMAy Streamx */
 200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 24632              		.loc 1 200 0
 24633 0008 7B68     		ldr	r3, [r7, #4]
 24634 000a 1B68     		ldr	r3, [r3, #0]
 24635 000c 23F00102 		bic	r2, r3, #1
 24636 0010 7B68     		ldr	r3, [r7, #4]
 24637 0012 1A60     		str	r2, [r3, #0]
 201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx control register */
 203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR  = 0;
 24638              		.loc 1 203 0
 24639 0014 7B68     		ldr	r3, [r7, #4]
 24640 0016 4FF00002 		mov	r2, #0
 24641 001a 1A60     		str	r2, [r3, #0]
 204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx Number of Data to Transfer register */
 206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = 0;
 24642              		.loc 1 206 0
 24643 001c 7B68     		ldr	r3, [r7, #4]
 24644 001e 4FF00002 		mov	r2, #0
 24645 0022 5A60     		str	r2, [r3, #4]
 207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx peripheral address register */
 209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->PAR  = 0;
 24646              		.loc 1 209 0
 24647 0024 7B68     		ldr	r3, [r7, #4]
 24648 0026 4FF00002 		mov	r2, #0
 24649 002a 9A60     		str	r2, [r3, #8]
 210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx memory 0 address register */
 212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M0AR = 0;
 24650              		.loc 1 212 0
 24651 002c 7B68     		ldr	r3, [r7, #4]
 24652 002e 4FF00002 		mov	r2, #0
 24653 0032 DA60     		str	r2, [r3, #12]
 213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx memory 1 address register */
 215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M1AR = 0;
 24654              		.loc 1 215 0
 24655 0034 7B68     		ldr	r3, [r7, #4]
 24656 0036 4FF00002 		mov	r2, #0
 24657 003a 1A61     		str	r2, [r3, #16]
 216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx FIFO control register */
 218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 24658              		.loc 1 218 0
 24659 003c 7B68     		ldr	r3, [r7, #4]
 24660 003e 4FF02102 		mov	r2, #33
 24661 0042 5A61     		str	r2, [r3, #20]
 219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset interrupt pending bits for the selected stream */
 221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx == DMA1_Stream0)
 24662              		.loc 1 221 0
 24663 0044 7A68     		ldr	r2, [r7, #4]
 24664 0046 464B     		ldr	r3, .L18
 24665 0048 9A42     		cmp	r2, r3
 24666 004a 04D1     		bne	.L2
 222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream0 */
 224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream0_IT_MASK;
 24667              		.loc 1 224 0
 24668 004c 454B     		ldr	r3, .L18+4
 24669 004e 4FF03D02 		mov	r2, #61
 24670 0052 9A60     		str	r2, [r3, #8]
 24671 0054 7FE0     		b	.L1
 24672              	.L2:
 225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream1)
 24673              		.loc 1 226 0
 24674 0056 7A68     		ldr	r2, [r7, #4]
 24675 0058 434B     		ldr	r3, .L18+8
 24676 005a 9A42     		cmp	r2, r3
 24677 005c 04D1     		bne	.L4
 227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream1 */
 229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream1_IT_MASK;
 24678              		.loc 1 229 0
 24679 005e 414B     		ldr	r3, .L18+4
 24680 0060 4FF47462 		mov	r2, #3904
 24681 0064 9A60     		str	r2, [r3, #8]
 24682 0066 76E0     		b	.L1
 24683              	.L4:
 230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream2)
 24684              		.loc 1 231 0
 24685 0068 7A68     		ldr	r2, [r7, #4]
 24686 006a 404B     		ldr	r3, .L18+12
 24687 006c 9A42     		cmp	r2, r3
 24688 006e 04D1     		bne	.L5
 232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream2 */
 234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream2_IT_MASK;
 24689              		.loc 1 234 0
 24690 0070 3C4B     		ldr	r3, .L18+4
 24691 0072 4FF47412 		mov	r2, #3997696
 24692 0076 9A60     		str	r2, [r3, #8]
 24693 0078 6DE0     		b	.L1
 24694              	.L5:
 235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream3)
 24695              		.loc 1 236 0
 24696 007a 7A68     		ldr	r2, [r7, #4]
 24697 007c 3C4B     		ldr	r3, .L18+16
 24698 007e 9A42     		cmp	r2, r3
 24699 0080 04D1     		bne	.L6
 237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream3 */
 239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream3_IT_MASK;
 24700              		.loc 1 239 0
 24701 0082 384B     		ldr	r3, .L18+4
 24702 0084 4FF07462 		mov	r2, #255852544
 24703 0088 9A60     		str	r2, [r3, #8]
 24704 008a 64E0     		b	.L1
 24705              	.L6:
 240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream4)
 24706              		.loc 1 241 0
 24707 008c 7A68     		ldr	r2, [r7, #4]
 24708 008e 394B     		ldr	r3, .L18+20
 24709 0090 9A42     		cmp	r2, r3
 24710 0092 03D1     		bne	.L7
 242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream4 */
 244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream4_IT_MASK;
 24711              		.loc 1 244 0
 24712 0094 334B     		ldr	r3, .L18+4
 24713 0096 384A     		ldr	r2, .L18+24
 24714 0098 DA60     		str	r2, [r3, #12]
 24715 009a 5CE0     		b	.L1
 24716              	.L7:
 245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream5)
 24717              		.loc 1 246 0
 24718 009c 7A68     		ldr	r2, [r7, #4]
 24719 009e 374B     		ldr	r3, .L18+28
 24720 00a0 9A42     		cmp	r2, r3
 24721 00a2 03D1     		bne	.L8
 247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream5 */
 249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream5_IT_MASK;
 24722              		.loc 1 249 0
 24723 00a4 2F4B     		ldr	r3, .L18+4
 24724 00a6 364A     		ldr	r2, .L18+32
 24725 00a8 DA60     		str	r2, [r3, #12]
 24726 00aa 54E0     		b	.L1
 24727              	.L8:
 250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream6)
 24728              		.loc 1 251 0
 24729 00ac 7A68     		ldr	r2, [r7, #4]
 24730 00ae 354B     		ldr	r3, .L18+36
 24731 00b0 9A42     		cmp	r2, r3
 24732 00b2 03D1     		bne	.L9
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream6 */
 254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 24733              		.loc 1 254 0
 24734 00b4 2B4B     		ldr	r3, .L18+4
 24735 00b6 344A     		ldr	r2, .L18+40
 24736 00b8 DA60     		str	r2, [r3, #12]
 24737 00ba 4CE0     		b	.L1
 24738              	.L9:
 255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream7)
 24739              		.loc 1 256 0
 24740 00bc 7A68     		ldr	r2, [r7, #4]
 24741 00be 334B     		ldr	r3, .L18+44
 24742 00c0 9A42     		cmp	r2, r3
 24743 00c2 04D1     		bne	.L10
 257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream7 */
 259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream7_IT_MASK;
 24744              		.loc 1 259 0
 24745 00c4 274B     		ldr	r3, .L18+4
 24746 00c6 4FF03D52 		mov	r2, #792723456
 24747 00ca DA60     		str	r2, [r3, #12]
 24748 00cc 43E0     		b	.L1
 24749              	.L10:
 260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream0)
 24750              		.loc 1 261 0
 24751 00ce 7A68     		ldr	r2, [r7, #4]
 24752 00d0 2F4B     		ldr	r3, .L18+48
 24753 00d2 9A42     		cmp	r2, r3
 24754 00d4 04D1     		bne	.L11
 262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream0 */
 264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream0_IT_MASK;
 24755              		.loc 1 264 0
 24756 00d6 2F4B     		ldr	r3, .L18+52
 24757 00d8 4FF03D02 		mov	r2, #61
 24758 00dc 9A60     		str	r2, [r3, #8]
 24759 00de 3AE0     		b	.L1
 24760              	.L11:
 265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream1)
 24761              		.loc 1 266 0
 24762 00e0 7A68     		ldr	r2, [r7, #4]
 24763 00e2 2D4B     		ldr	r3, .L18+56
 24764 00e4 9A42     		cmp	r2, r3
 24765 00e6 04D1     		bne	.L12
 267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream1 */
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream1_IT_MASK;
 24766              		.loc 1 269 0
 24767 00e8 2A4B     		ldr	r3, .L18+52
 24768 00ea 4FF47462 		mov	r2, #3904
 24769 00ee 9A60     		str	r2, [r3, #8]
 24770 00f0 31E0     		b	.L1
 24771              	.L12:
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream2)
 24772              		.loc 1 271 0
 24773 00f2 7A68     		ldr	r2, [r7, #4]
 24774 00f4 294B     		ldr	r3, .L18+60
 24775 00f6 9A42     		cmp	r2, r3
 24776 00f8 04D1     		bne	.L13
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream2 */
 274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream2_IT_MASK;
 24777              		.loc 1 274 0
 24778 00fa 264B     		ldr	r3, .L18+52
 24779 00fc 4FF47412 		mov	r2, #3997696
 24780 0100 9A60     		str	r2, [r3, #8]
 24781 0102 28E0     		b	.L1
 24782              	.L13:
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream3)
 24783              		.loc 1 276 0
 24784 0104 7A68     		ldr	r2, [r7, #4]
 24785 0106 264B     		ldr	r3, .L18+64
 24786 0108 9A42     		cmp	r2, r3
 24787 010a 04D1     		bne	.L14
 277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream3 */
 279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream3_IT_MASK;
 24788              		.loc 1 279 0
 24789 010c 214B     		ldr	r3, .L18+52
 24790 010e 4FF07462 		mov	r2, #255852544
 24791 0112 9A60     		str	r2, [r3, #8]
 24792 0114 1FE0     		b	.L1
 24793              	.L14:
 280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream4)
 24794              		.loc 1 281 0
 24795 0116 7A68     		ldr	r2, [r7, #4]
 24796 0118 224B     		ldr	r3, .L18+68
 24797 011a 9A42     		cmp	r2, r3
 24798 011c 03D1     		bne	.L15
 282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream4 */
 284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream4_IT_MASK;
 24799              		.loc 1 284 0
 24800 011e 1D4B     		ldr	r3, .L18+52
 24801 0120 154A     		ldr	r2, .L18+24
 24802 0122 DA60     		str	r2, [r3, #12]
 24803 0124 17E0     		b	.L1
 24804              	.L15:
 285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream5)
 24805              		.loc 1 286 0
 24806 0126 7A68     		ldr	r2, [r7, #4]
 24807 0128 1F4B     		ldr	r3, .L18+72
 24808 012a 9A42     		cmp	r2, r3
 24809 012c 03D1     		bne	.L16
 287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream5 */
 289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream5_IT_MASK;
 24810              		.loc 1 289 0
 24811 012e 194B     		ldr	r3, .L18+52
 24812 0130 134A     		ldr	r2, .L18+32
 24813 0132 DA60     		str	r2, [r3, #12]
 24814 0134 0FE0     		b	.L1
 24815              	.L16:
 290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream6)
 24816              		.loc 1 291 0
 24817 0136 7A68     		ldr	r2, [r7, #4]
 24818 0138 1C4B     		ldr	r3, .L18+76
 24819 013a 9A42     		cmp	r2, r3
 24820 013c 03D1     		bne	.L17
 292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream6 */
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream6_IT_MASK;
 24821              		.loc 1 294 0
 24822 013e 154B     		ldr	r3, .L18+52
 24823 0140 114A     		ldr	r2, .L18+40
 24824 0142 DA60     		str	r2, [r3, #12]
 24825 0144 07E0     		b	.L1
 24826              	.L17:
 295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
 297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (DMAy_Streamx == DMA2_Stream7)
 24827              		.loc 1 298 0
 24828 0146 7A68     		ldr	r2, [r7, #4]
 24829 0148 194B     		ldr	r3, .L18+80
 24830 014a 9A42     		cmp	r2, r3
 24831 014c 03D1     		bne	.L1
 299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
 300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Reset interrupt pending bits for DMA2 Stream7 */
 301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMA2->HIFCR = DMA_Stream7_IT_MASK;
 24832              		.loc 1 301 0
 24833 014e 114B     		ldr	r3, .L18+52
 24834 0150 4FF03D52 		mov	r2, #792723456
 24835 0154 DA60     		str	r2, [r3, #12]
 24836              	.L1:
 302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
 303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 24837              		.loc 1 304 0
 24838 0156 07F10C07 		add	r7, r7, #12
 24839 015a BD46     		mov	sp, r7
 24840 015c 80BC     		pop	{r7}
 24841 015e 7047     		bx	lr
 24842              	.L19:
 24843              		.align	2
 24844              	.L18:
 24845 0160 10600240 		.word	1073897488
 24846 0164 00600240 		.word	1073897472
 24847 0168 28600240 		.word	1073897512
 24848 016c 40600240 		.word	1073897536
 24849 0170 58600240 		.word	1073897560
 24850 0174 70600240 		.word	1073897584
 24851 0178 3D000020 		.word	536870973
 24852 017c 88600240 		.word	1073897608
 24853 0180 400F0020 		.word	536874816
 24854 0184 A0600240 		.word	1073897632
 24855 0188 00003D20 		.word	540868608
 24856 018c B8600240 		.word	1073897656
 24857 0190 10640240 		.word	1073898512
 24858 0194 00640240 		.word	1073898496
 24859 0198 28640240 		.word	1073898536
 24860 019c 40640240 		.word	1073898560
 24861 01a0 58640240 		.word	1073898584
 24862 01a4 70640240 		.word	1073898608
 24863 01a8 88640240 		.word	1073898632
 24864 01ac A0640240 		.word	1073898656
 24865 01b0 B8640240 		.word	1073898680
 24866              		.cfi_endproc
 24867              	.LFE110:
 24869              		.align	2
 24870              		.global	DMA_Init
 24871              		.thumb
 24872              		.thumb_func
 24874              	DMA_Init:
 24875              	.LFB111:
 305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Initializes the DMAy Streamx according to the specified parameters in 
 308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the DMA_InitStruct structure.
 309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Before calling this function, it is recommended to check that the Stream 
 310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         is actually disabled using the function DMA_GetCmdStatus().  
 311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
 314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the configuration information for the specified DMA Stream.  
 315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
 318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 24876              		.loc 1 318 0
 24877              		.cfi_startproc
 24878              		@ args = 0, pretend = 0, frame = 16
 24879              		@ frame_needed = 1, uses_anonymous_args = 0
 24880              		@ link register save eliminated.
 24881 01b4 80B4     		push	{r7}
 24882              	.LCFI3:
 24883              		.cfi_def_cfa_offset 4
 24884 01b6 85B0     		sub	sp, sp, #20
 24885              	.LCFI4:
 24886              		.cfi_def_cfa_offset 24
 24887 01b8 00AF     		add	r7, sp, #0
 24888              		.cfi_offset 7, -4
 24889              	.LCFI5:
 24890              		.cfi_def_cfa_register 7
 24891 01ba 7860     		str	r0, [r7, #4]
 24892 01bc 3960     		str	r1, [r7, #0]
 319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 24893              		.loc 1 319 0
 24894 01be 4FF00003 		mov	r3, #0
 24895 01c2 FB60     		str	r3, [r7, #12]
 320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
 324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
 325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
 333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
 334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
 335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
 336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx CR Configuration ------------------*/
 338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the DMAy_Streamx CR value */
 339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = DMAy_Streamx->CR;
 24896              		.loc 1 339 0
 24897 01c4 7B68     		ldr	r3, [r7, #4]
 24898 01c6 1B68     		ldr	r3, [r3, #0]
 24899 01c8 FB60     		str	r3, [r7, #12]
 340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
 342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 24900              		.loc 1 342 0
 24901 01ca FA68     		ldr	r2, [r7, #12]
 24902 01cc 264B     		ldr	r3, .L21
 24903 01ce 02EA0303 		and	r3, r2, r3
 24904 01d2 FB60     		str	r3, [r7, #12]
 343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | \
 344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | \
 345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_DIR));
 346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure DMAy Streamx: */
 348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set CHSEL bits according to DMA_CHSEL value */
 349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set DIR bits according to DMA_DIR value */
 350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PINC bit according to DMA_PeripheralInc value */
 351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MINC bit according to DMA_MemoryInc value */
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PSIZE bits according to DMA_PeripheralDataSize value */
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MSIZE bits according to DMA_MemoryDataSize value */
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set CIRC bit according to DMA_Mode value */
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PL bits according to DMA_Priority value */
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MBURST bits according to DMA_MemoryBurst value */
 357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PBURST bits according to DMA_PeripheralBurst value */
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 24905              		.loc 1 358 0
 24906 01d4 3B68     		ldr	r3, [r7, #0]
 24907 01d6 1A68     		ldr	r2, [r3, #0]
 24908 01d8 3B68     		ldr	r3, [r7, #0]
 24909 01da DB68     		ldr	r3, [r3, #12]
 24910 01dc 1A43     		orrs	r2, r2, r3
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 24911              		.loc 1 359 0
 24912 01de 3B68     		ldr	r3, [r7, #0]
 24913 01e0 5B69     		ldr	r3, [r3, #20]
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 24914              		.loc 1 358 0
 24915 01e2 1A43     		orrs	r2, r2, r3
 24916              		.loc 1 359 0
 24917 01e4 3B68     		ldr	r3, [r7, #0]
 24918 01e6 9B69     		ldr	r3, [r3, #24]
 24919 01e8 1A43     		orrs	r2, r2, r3
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 24920              		.loc 1 360 0
 24921 01ea 3B68     		ldr	r3, [r7, #0]
 24922 01ec DB69     		ldr	r3, [r3, #28]
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 24923              		.loc 1 359 0
 24924 01ee 1A43     		orrs	r2, r2, r3
 24925              		.loc 1 360 0
 24926 01f0 3B68     		ldr	r3, [r7, #0]
 24927 01f2 1B6A     		ldr	r3, [r3, #32]
 24928 01f4 1A43     		orrs	r2, r2, r3
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 24929              		.loc 1 361 0
 24930 01f6 3B68     		ldr	r3, [r7, #0]
 24931 01f8 5B6A     		ldr	r3, [r3, #36]
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 24932              		.loc 1 360 0
 24933 01fa 1A43     		orrs	r2, r2, r3
 24934              		.loc 1 361 0
 24935 01fc 3B68     		ldr	r3, [r7, #0]
 24936 01fe 9B6A     		ldr	r3, [r3, #40]
 24937 0200 1A43     		orrs	r2, r2, r3
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 24938              		.loc 1 362 0
 24939 0202 3B68     		ldr	r3, [r7, #0]
 24940 0204 5B6B     		ldr	r3, [r3, #52]
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 24941              		.loc 1 361 0
 24942 0206 1A43     		orrs	r2, r2, r3
 24943              		.loc 1 362 0
 24944 0208 3B68     		ldr	r3, [r7, #0]
 24945 020a 9B6B     		ldr	r3, [r3, #56]
 24946 020c 42EA0303 		orr	r3, r2, r3
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 24947              		.loc 1 358 0
 24948 0210 FA68     		ldr	r2, [r7, #12]
 24949 0212 42EA0303 		orr	r3, r2, r3
 24950 0216 FB60     		str	r3, [r7, #12]
 363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx CR register */
 365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR = tmpreg;
 24951              		.loc 1 365 0
 24952 0218 7B68     		ldr	r3, [r7, #4]
 24953 021a FA68     		ldr	r2, [r7, #12]
 24954 021c 1A60     		str	r2, [r3, #0]
 366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx FCR Configuration -----------------*/
 368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the DMAy_Streamx FCR value */
 369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = DMAy_Streamx->FCR;
 24955              		.loc 1 369 0
 24956 021e 7B68     		ldr	r3, [r7, #4]
 24957 0220 5B69     		ldr	r3, [r3, #20]
 24958 0222 FB60     		str	r3, [r7, #12]
 370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Clear DMDIS and FTH bits */
 372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 24959              		.loc 1 372 0
 24960 0224 FB68     		ldr	r3, [r7, #12]
 24961 0226 23F00703 		bic	r3, r3, #7
 24962 022a FB60     		str	r3, [r7, #12]
 373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure DMAy Streamx FIFO: 
 375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Set DMDIS bits according to DMA_FIFOMode value 
 376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Set FTH bits according to DMA_FIFOThreshold value */
 377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 24963              		.loc 1 377 0
 24964 022c 3B68     		ldr	r3, [r7, #0]
 24965 022e DA6A     		ldr	r2, [r3, #44]
 24966 0230 3B68     		ldr	r3, [r7, #0]
 24967 0232 1B6B     		ldr	r3, [r3, #48]
 24968 0234 42EA0303 		orr	r3, r2, r3
 24969 0238 FA68     		ldr	r2, [r7, #12]
 24970 023a 42EA0303 		orr	r3, r2, r3
 24971 023e FB60     		str	r3, [r7, #12]
 378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx CR */
 380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->FCR = tmpreg;
 24972              		.loc 1 380 0
 24973 0240 7B68     		ldr	r3, [r7, #4]
 24974 0242 FA68     		ldr	r2, [r7, #12]
 24975 0244 5A61     		str	r2, [r3, #20]
 381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
 383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx NDTR register */
 384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 24976              		.loc 1 384 0
 24977 0246 3B68     		ldr	r3, [r7, #0]
 24978 0248 1A69     		ldr	r2, [r3, #16]
 24979 024a 7B68     		ldr	r3, [r7, #4]
 24980 024c 5A60     		str	r2, [r3, #4]
 385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx PAR Configuration -----------------*/
 387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx PAR */
 388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 24981              		.loc 1 388 0
 24982 024e 3B68     		ldr	r3, [r7, #0]
 24983 0250 5A68     		ldr	r2, [r3, #4]
 24984 0252 7B68     		ldr	r3, [r7, #4]
 24985 0254 9A60     		str	r2, [r3, #8]
 389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
 391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx M0AR */
 392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 24986              		.loc 1 392 0
 24987 0256 3B68     		ldr	r3, [r7, #0]
 24988 0258 9A68     		ldr	r2, [r3, #8]
 24989 025a 7B68     		ldr	r3, [r7, #4]
 24990 025c DA60     		str	r2, [r3, #12]
 393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 24991              		.loc 1 393 0
 24992 025e 07F11407 		add	r7, r7, #20
 24993 0262 BD46     		mov	sp, r7
 24994 0264 80BC     		pop	{r7}
 24995 0266 7047     		bx	lr
 24996              	.L22:
 24997              		.align	2
 24998              	.L21:
 24999 0268 3F801CF0 		.word	-266567617
 25000              		.cfi_endproc
 25001              	.LFE111:
 25003              		.align	2
 25004              		.global	DMA_StructInit
 25005              		.thumb
 25006              		.thumb_func
 25008              	DMA_StructInit:
 25009              	.LFB112:
 394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Fills each DMA_InitStruct member with its default value.
 397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
 398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         be initialized.
 399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
 402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25010              		.loc 1 402 0
 25011              		.cfi_startproc
 25012              		@ args = 0, pretend = 0, frame = 8
 25013              		@ frame_needed = 1, uses_anonymous_args = 0
 25014              		@ link register save eliminated.
 25015 026c 80B4     		push	{r7}
 25016              	.LCFI6:
 25017              		.cfi_def_cfa_offset 4
 25018 026e 83B0     		sub	sp, sp, #12
 25019              	.LCFI7:
 25020              		.cfi_def_cfa_offset 16
 25021 0270 00AF     		add	r7, sp, #0
 25022              		.cfi_offset 7, -4
 25023              	.LCFI8:
 25024              		.cfi_def_cfa_register 7
 25025 0272 7860     		str	r0, [r7, #4]
 403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*-------------- Reset DMA init structure parameters values ----------------*/
 404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Channel member */
 405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Channel = 0;
 25026              		.loc 1 405 0
 25027 0274 7B68     		ldr	r3, [r7, #4]
 25028 0276 4FF00002 		mov	r2, #0
 25029 027a 1A60     		str	r2, [r3, #0]
 406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralBaseAddr member */
 408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 25030              		.loc 1 408 0
 25031 027c 7B68     		ldr	r3, [r7, #4]
 25032 027e 4FF00002 		mov	r2, #0
 25033 0282 5A60     		str	r2, [r3, #4]
 409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Memory0BaseAddr member */
 411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 25034              		.loc 1 411 0
 25035 0284 7B68     		ldr	r3, [r7, #4]
 25036 0286 4FF00002 		mov	r2, #0
 25037 028a 9A60     		str	r2, [r3, #8]
 412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_DIR member */
 414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 25038              		.loc 1 414 0
 25039 028c 7B68     		ldr	r3, [r7, #4]
 25040 028e 4FF00002 		mov	r2, #0
 25041 0292 DA60     		str	r2, [r3, #12]
 415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_BufferSize member */
 417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_BufferSize = 0;
 25042              		.loc 1 417 0
 25043 0294 7B68     		ldr	r3, [r7, #4]
 25044 0296 4FF00002 		mov	r2, #0
 25045 029a 1A61     		str	r2, [r3, #16]
 418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralInc member */
 420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 25046              		.loc 1 420 0
 25047 029c 7B68     		ldr	r3, [r7, #4]
 25048 029e 4FF00002 		mov	r2, #0
 25049 02a2 5A61     		str	r2, [r3, #20]
 421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryInc member */
 423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 25050              		.loc 1 423 0
 25051 02a4 7B68     		ldr	r3, [r7, #4]
 25052 02a6 4FF00002 		mov	r2, #0
 25053 02aa 9A61     		str	r2, [r3, #24]
 424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralDataSize member */
 426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 25054              		.loc 1 426 0
 25055 02ac 7B68     		ldr	r3, [r7, #4]
 25056 02ae 4FF00002 		mov	r2, #0
 25057 02b2 DA61     		str	r2, [r3, #28]
 427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryDataSize member */
 429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 25058              		.loc 1 429 0
 25059 02b4 7B68     		ldr	r3, [r7, #4]
 25060 02b6 4FF00002 		mov	r2, #0
 25061 02ba 1A62     		str	r2, [r3, #32]
 430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Mode member */
 432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 25062              		.loc 1 432 0
 25063 02bc 7B68     		ldr	r3, [r7, #4]
 25064 02be 4FF00002 		mov	r2, #0
 25065 02c2 5A62     		str	r2, [r3, #36]
 433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Priority member */
 435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 25066              		.loc 1 435 0
 25067 02c4 7B68     		ldr	r3, [r7, #4]
 25068 02c6 4FF00002 		mov	r2, #0
 25069 02ca 9A62     		str	r2, [r3, #40]
 436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_FIFOMode member */
 438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 25070              		.loc 1 438 0
 25071 02cc 7B68     		ldr	r3, [r7, #4]
 25072 02ce 4FF00002 		mov	r2, #0
 25073 02d2 DA62     		str	r2, [r3, #44]
 439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_FIFOThreshold member */
 441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 25074              		.loc 1 441 0
 25075 02d4 7B68     		ldr	r3, [r7, #4]
 25076 02d6 4FF00002 		mov	r2, #0
 25077 02da 1A63     		str	r2, [r3, #48]
 442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryBurst member */
 444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 25078              		.loc 1 444 0
 25079 02dc 7B68     		ldr	r3, [r7, #4]
 25080 02de 4FF00002 		mov	r2, #0
 25081 02e2 5A63     		str	r2, [r3, #52]
 445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralBurst member */
 447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 25082              		.loc 1 447 0
 25083 02e4 7B68     		ldr	r3, [r7, #4]
 25084 02e6 4FF00002 		mov	r2, #0
 25085 02ea 9A63     		str	r2, [r3, #56]
 448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25086              		.loc 1 448 0
 25087 02ec 07F10C07 		add	r7, r7, #12
 25088 02f0 BD46     		mov	sp, r7
 25089 02f2 80BC     		pop	{r7}
 25090 02f4 7047     		bx	lr
 25091              		.cfi_endproc
 25092              	.LFE112:
 25094 02f6 00BF     		.align	2
 25095              		.global	DMA_Cmd
 25096              		.thumb
 25097              		.thumb_func
 25099              	DMA_Cmd:
 25100              	.LFB113:
 449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx.
 452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx. 
 455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  This function may be used to perform Pause-Resume operation. When a
 458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        transfer is ongoing, calling this function to disable the Stream will
 459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        cause the transfer to be paused. All configuration registers and the
 460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        number of remaining data will be preserved. When calling again this
 461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        function to re-enable the Stream, the transfer will be resumed from
 462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        the point where it was paused.          
 463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
 464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  After configuring the DMA Stream (DMA_Init() function) and enabling the
 465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        stream, it is recommended to check (or wait until) the DMA Stream is
 466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        effectively enabled. A Stream may remain disabled if a configuration 
 467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        parameter is wrong.
 468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        After disabling a DMA Stream, it is also recommended to check (or wait
 469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        until) the DMA Stream is effectively disabled. If a Stream is disabled 
 470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        while a data transfer is ongoing, the current data will be transferred
 471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and the Stream will be effectively disabled only after the transfer of
 472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        this single data is finished.            
 473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
 474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25101              		.loc 1 477 0
 25102              		.cfi_startproc
 25103              		@ args = 0, pretend = 0, frame = 8
 25104              		@ frame_needed = 1, uses_anonymous_args = 0
 25105              		@ link register save eliminated.
 25106 02f8 80B4     		push	{r7}
 25107              	.LCFI9:
 25108              		.cfi_def_cfa_offset 4
 25109 02fa 83B0     		sub	sp, sp, #12
 25110              	.LCFI10:
 25111              		.cfi_def_cfa_offset 16
 25112 02fc 00AF     		add	r7, sp, #0
 25113              		.cfi_offset 7, -4
 25114              	.LCFI11:
 25115              		.cfi_def_cfa_register 7
 25116 02fe 7860     		str	r0, [r7, #4]
 25117 0300 0B46     		mov	r3, r1
 25118 0302 FB70     		strb	r3, [r7, #3]
 478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (NewState != DISABLE)
 25119              		.loc 1 482 0
 25120 0304 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25121 0306 002B     		cmp	r3, #0
 25122 0308 06D0     		beq	.L25
 483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Enable the selected DMAy Streamx by setting EN bit */
 485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 25123              		.loc 1 485 0
 25124 030a 7B68     		ldr	r3, [r7, #4]
 25125 030c 1B68     		ldr	r3, [r3, #0]
 25126 030e 43F00102 		orr	r2, r3, #1
 25127 0312 7B68     		ldr	r3, [r7, #4]
 25128 0314 1A60     		str	r2, [r3, #0]
 25129 0316 05E0     		b	.L24
 25130              	.L25:
 486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Disable the selected DMAy Streamx by clearing EN bit */
 490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 25131              		.loc 1 490 0
 25132 0318 7B68     		ldr	r3, [r7, #4]
 25133 031a 1B68     		ldr	r3, [r3, #0]
 25134 031c 23F00102 		bic	r2, r3, #1
 25135 0320 7B68     		ldr	r3, [r7, #4]
 25136 0322 1A60     		str	r2, [r3, #0]
 25137              	.L24:
 491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25138              		.loc 1 492 0
 25139 0324 07F10C07 		add	r7, r7, #12
 25140 0328 BD46     		mov	sp, r7
 25141 032a 80BC     		pop	{r7}
 25142 032c 7047     		bx	lr
 25143              		.cfi_endproc
 25144              	.LFE113:
 25146 032e 00BF     		.align	2
 25147              		.global	DMA_PeriphIncOffsetSizeConfig
 25148              		.thumb
 25149              		.thumb_func
 25151              	DMA_PeriphIncOffsetSizeConfig:
 25152              	.LFB114:
 493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the PINC (Peripheral Increment address mode) bit is
 496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         set, if the peripheral address should be incremented with the data 
 497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         size (configured with PSIZE bits) or by a fixed offset equal to 4
 498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         (32-bit aligned addresses).
 499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   This function has no effect if the Peripheral Increment mode is disabled.
 501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *     
 502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_Pincos: specifies the Peripheral increment offset size.
 505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_PINCOS_Psize: Peripheral address increment is done  
 507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                   accordingly to PSIZE parameter.
 508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
 509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                         fixed to 4 (32-bit aligned addresses). 
 510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
 513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25153              		.loc 1 513 0
 25154              		.cfi_startproc
 25155              		@ args = 0, pretend = 0, frame = 8
 25156              		@ frame_needed = 1, uses_anonymous_args = 0
 25157              		@ link register save eliminated.
 25158 0330 80B4     		push	{r7}
 25159              	.LCFI12:
 25160              		.cfi_def_cfa_offset 4
 25161 0332 83B0     		sub	sp, sp, #12
 25162              	.LCFI13:
 25163              		.cfi_def_cfa_offset 16
 25164 0334 00AF     		add	r7, sp, #0
 25165              		.cfi_offset 7, -4
 25166              	.LCFI14:
 25167              		.cfi_def_cfa_register 7
 25168 0336 7860     		str	r0, [r7, #4]
 25169 0338 3960     		str	r1, [r7, #0]
 514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));
 517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the needed Peripheral increment offset */
 519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if(DMA_Pincos != DMA_PINCOS_Psize)
 25170              		.loc 1 519 0
 25171 033a 3B68     		ldr	r3, [r7, #0]
 25172 033c 002B     		cmp	r3, #0
 25173 033e 06D0     		beq	.L28
 520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Configure DMA_SxCR_PINCOS bit with the input parameter */
 522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 25174              		.loc 1 522 0
 25175 0340 7B68     		ldr	r3, [r7, #4]
 25176 0342 1B68     		ldr	r3, [r3, #0]
 25177 0344 43F40042 		orr	r2, r3, #32768
 25178 0348 7B68     		ldr	r3, [r7, #4]
 25179 034a 1A60     		str	r2, [r3, #0]
 25180 034c 05E0     		b	.L27
 25181              	.L28:
 523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
 527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 25182              		.loc 1 527 0
 25183 034e 7B68     		ldr	r3, [r7, #4]
 25184 0350 1B68     		ldr	r3, [r3, #0]
 25185 0352 23F40042 		bic	r2, r3, #32768
 25186 0356 7B68     		ldr	r3, [r7, #4]
 25187 0358 1A60     		str	r2, [r3, #0]
 25188              	.L27:
 528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25189              		.loc 1 529 0
 25190 035a 07F10C07 		add	r7, r7, #12
 25191 035e BD46     		mov	sp, r7
 25192 0360 80BC     		pop	{r7}
 25193 0362 7047     		bx	lr
 25194              		.cfi_endproc
 25195              	.LFE114:
 25197              		.align	2
 25198              		.global	DMA_FlowControllerConfig
 25199              		.thumb
 25200              		.thumb_func
 25202              	DMA_FlowControllerConfig:
 25203              	.LFB115:
 530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the flow controller for
 533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the next transactions (Peripheral or Memory).
 534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *       
 535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Before enabling this feature, check if the used peripheral supports 
 536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the Flow Controller mode or not.    
 537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
 538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FlowCtrl: specifies the DMA flow controller.
 541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FlowCtrl_Memory: DMAy_Streamx transactions flow controller is 
 543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                      the DMA controller.
 544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
 545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                          is the peripheral.    
 546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
 549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25204              		.loc 1 549 0
 25205              		.cfi_startproc
 25206              		@ args = 0, pretend = 0, frame = 8
 25207              		@ frame_needed = 1, uses_anonymous_args = 0
 25208              		@ link register save eliminated.
 25209 0364 80B4     		push	{r7}
 25210              	.LCFI15:
 25211              		.cfi_def_cfa_offset 4
 25212 0366 83B0     		sub	sp, sp, #12
 25213              	.LCFI16:
 25214              		.cfi_def_cfa_offset 16
 25215 0368 00AF     		add	r7, sp, #0
 25216              		.cfi_offset 7, -4
 25217              	.LCFI17:
 25218              		.cfi_def_cfa_register 7
 25219 036a 7860     		str	r0, [r7, #4]
 25220 036c 3960     		str	r1, [r7, #0]
 550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));
 553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the needed flow controller  */
 555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 25221              		.loc 1 555 0
 25222 036e 3B68     		ldr	r3, [r7, #0]
 25223 0370 002B     		cmp	r3, #0
 25224 0372 06D0     		beq	.L31
 556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
 558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 25225              		.loc 1 558 0
 25226 0374 7B68     		ldr	r3, [r7, #4]
 25227 0376 1B68     		ldr	r3, [r3, #0]
 25228 0378 43F02002 		orr	r2, r3, #32
 25229 037c 7B68     		ldr	r3, [r7, #4]
 25230 037e 1A60     		str	r2, [r3, #0]
 25231 0380 05E0     		b	.L30
 25232              	.L31:
 559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Clear the PFCTRL bit: Memory is the flow controller */
 563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 25233              		.loc 1 563 0
 25234 0382 7B68     		ldr	r3, [r7, #4]
 25235 0384 1B68     		ldr	r3, [r3, #0]
 25236 0386 23F02002 		bic	r2, r3, #32
 25237 038a 7B68     		ldr	r3, [r7, #4]
 25238 038c 1A60     		str	r2, [r3, #0]
 25239              	.L30:
 564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25240              		.loc 1 565 0
 25241 038e 07F10C07 		add	r7, r7, #12
 25242 0392 BD46     		mov	sp, r7
 25243 0394 80BC     		pop	{r7}
 25244 0396 7047     		bx	lr
 25245              		.cfi_endproc
 25246              	.LFE115:
 25248              		.align	2
 25249              		.global	DMA_SetCurrDataCounter
 25250              		.thumb
 25251              		.thumb_func
 25253              	DMA_SetCurrDataCounter:
 25254              	.LFB116:
 566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group2 Data Counter functions
 571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Data Counter functions 
 572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                            Data Counter functions
 576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides function allowing to configure and read the buffer size
 579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (number of data to be transferred). 
 580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA data counter can be written only when the DMA Stream is disabled 
 582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (ie. after transfer complete event).
 583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The following function can be used to write the Stream data counter value:
 585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter);
 586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @note It is advised to use this function rather than DMA_Init() in situations where
 588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       only the Data buffer needs to be reloaded.
 589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @note If the Source and Destination Data Sizes are different, then the value written in
 591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       data counter, expressing the number of transfers, is relative to the number of 
 592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       transfers from the Peripheral point of view.
 593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       ie. If Memory data size is Word, Peripheral data size is Half-Words, then the value
 594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       to be configured in the data counter is the number of Half-Words to be transferred
 595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       from/to the peripheral.
 596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA data counter can be read to indicate the number of remaining transfers for
 598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   the relative DMA Stream. This counter is decremented at the end of each data 
 599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   transfer and when the transfer is complete: 
 600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - If Normal mode is selected: the counter is set to 0.
 601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - If Circular mode is selected: the counter is reloaded with the initial value
 602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      (configured before enabling the DMA Stream)
 603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The following function can be used to read the Stream data counter value:
 605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx);
 606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Writes the number of data units to be transferred on the DMAy Streamx.
 613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  Counter: Number of data units to be transferred (from 0 to 65535) 
 616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          Number of data items depends only on the Peripheral data format.
 617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            
 618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Bytes: number of data units is equal 
 619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to total number of bytes to be transferred.
 620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
 621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Half-Word: number of data units is  
 622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         equal to total number of bytes to be transferred / 2.
 623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
 624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Word: number of data units is equal 
 625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to total  number of bytes to be transferred / 4.
 626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   In Memory-to-Memory transfer mode, the memory buffer pointed by 
 628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         DMAy_SxPAR register is considered as Peripheral.
 629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
 633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25255              		.loc 1 633 0
 25256              		.cfi_startproc
 25257              		@ args = 0, pretend = 0, frame = 8
 25258              		@ frame_needed = 1, uses_anonymous_args = 0
 25259              		@ link register save eliminated.
 25260 0398 80B4     		push	{r7}
 25261              	.LCFI18:
 25262              		.cfi_def_cfa_offset 4
 25263 039a 83B0     		sub	sp, sp, #12
 25264              	.LCFI19:
 25265              		.cfi_def_cfa_offset 16
 25266 039c 00AF     		add	r7, sp, #0
 25267              		.cfi_offset 7, -4
 25268              	.LCFI20:
 25269              		.cfi_def_cfa_register 7
 25270 039e 7860     		str	r0, [r7, #4]
 25271 03a0 0B46     		mov	r3, r1
 25272 03a2 7B80     		strh	r3, [r7, #2]	@ movhi
 634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write the number of data units to be transferred */
 638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = (uint16_t)Counter;
 25273              		.loc 1 638 0
 25274 03a4 7A88     		ldrh	r2, [r7, #2]
 25275 03a6 7B68     		ldr	r3, [r7, #4]
 25276 03a8 5A60     		str	r2, [r3, #4]
 639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25277              		.loc 1 639 0
 25278 03aa 07F10C07 		add	r7, r7, #12
 25279 03ae BD46     		mov	sp, r7
 25280 03b0 80BC     		pop	{r7}
 25281 03b2 7047     		bx	lr
 25282              		.cfi_endproc
 25283              	.LFE116:
 25285              		.align	2
 25286              		.global	DMA_GetCurrDataCounter
 25287              		.thumb
 25288              		.thumb_func
 25290              	DMA_GetCurrDataCounter:
 25291              	.LFB117:
 640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer.
 643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
 648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25292              		.loc 1 648 0
 25293              		.cfi_startproc
 25294              		@ args = 0, pretend = 0, frame = 8
 25295              		@ frame_needed = 1, uses_anonymous_args = 0
 25296              		@ link register save eliminated.
 25297 03b4 80B4     		push	{r7}
 25298              	.LCFI21:
 25299              		.cfi_def_cfa_offset 4
 25300 03b6 83B0     		sub	sp, sp, #12
 25301              	.LCFI22:
 25302              		.cfi_def_cfa_offset 16
 25303 03b8 00AF     		add	r7, sp, #0
 25304              		.cfi_offset 7, -4
 25305              	.LCFI23:
 25306              		.cfi_def_cfa_register 7
 25307 03ba 7860     		str	r0, [r7, #4]
 649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the number of remaining data units for DMAy Streamx */
 653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return ((uint16_t)(DMAy_Streamx->NDTR));
 25308              		.loc 1 653 0
 25309 03bc 7B68     		ldr	r3, [r7, #4]
 25310 03be 5B68     		ldr	r3, [r3, #4]
 25311 03c0 9BB2     		uxth	r3, r3
 654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25312              		.loc 1 654 0
 25313 03c2 1846     		mov	r0, r3
 25314 03c4 07F10C07 		add	r7, r7, #12
 25315 03c8 BD46     		mov	sp, r7
 25316 03ca 80BC     		pop	{r7}
 25317 03cc 7047     		bx	lr
 25318              		.cfi_endproc
 25319              	.LFE117:
 25321 03ce 00BF     		.align	2
 25322              		.global	DMA_DoubleBufferModeConfig
 25323              		.thumb
 25324              		.thumb_func
 25326              	DMA_DoubleBufferModeConfig:
 25327              	.LFB118:
 655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group3 Double Buffer mode functions
 660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Double Buffer mode functions 
 661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          Double Buffer mode functions
 665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides function allowing to configure and control the double 
 668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   buffer mode parameters.
 669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode can be used only when Circular mode is enabled.
 671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode cannot be used when transferring data from Memory to Memory.
 672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode allows to set two different Memory addresses from/to which
 674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   the DMA controller will access alternatively (after completing transfer to/from target
 675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   memory 0, it will start transfer to/from target memory 1).
 676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This allows to reduce software overhead for double buffering and reduce the CPU
 677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   access time.
 678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Two functions must be called before calling the DMA_Init() function:
 680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
 681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                 uint32_t DMA_CurrentMemory);
 682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState);
 683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_DoubleBufferModeConfig() is called to configure the Memory 1 base address and the first
 685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Memory target from/to which the transfer will start after enabling the DMA Stream.
 686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Then DMA_DoubleBufferModeCmd() must be called to enable the Double Buffer mode (or disable 
 687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   it when it should not be used).
 688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Two functions can be called dynamically when the transfer is ongoing (or when the DMA Stream is 
 691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   stopped) to modify on of the target Memories addresses or to check wich Memory target is currentl
 692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    used:
 693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
 694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                             uint32_t DMA_MemoryTarget);
 695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx);
 696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_MemoryTargetConfig() can be called to modify the base address of one of the two target Memori
 698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Memory of which the base address will be modified must not be currently be used by the DMA St
 699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (ie. if the DMA Stream is currently transferring from Memory 1 then you can only modify base addr
 700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   of target Memory 0 and vice versa).
 701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   To check this condition, it is recommended to use the function DMA_GetCurrentMemoryTarget() which
 702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   returns the index of the Memory target currently in use by the DMA Stream.
 703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the double buffer mode 
 710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         and the current memory target.
 711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  Memory1BaseAddr: the base address of the second buffer (Memory 1)  
 714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_CurrentMemory: specifies which memory will be first buffer for
 715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the transactions when the Stream will be enabled. 
 716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_0: Memory 0 is the current buffer.
 718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_1: Memory 1 is the current buffer.  
 719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *       
 720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Memory0BaseAddr is set by the DMA structure configuration in DMA_Init().
 721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
 725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                 uint32_t DMA_CurrentMemory)
 726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {  
 25328              		.loc 1 726 0
 25329              		.cfi_startproc
 25330              		@ args = 0, pretend = 0, frame = 16
 25331              		@ frame_needed = 1, uses_anonymous_args = 0
 25332              		@ link register save eliminated.
 25333 03d0 80B4     		push	{r7}
 25334              	.LCFI24:
 25335              		.cfi_def_cfa_offset 4
 25336 03d2 85B0     		sub	sp, sp, #20
 25337              	.LCFI25:
 25338              		.cfi_def_cfa_offset 24
 25339 03d4 00AF     		add	r7, sp, #0
 25340              		.cfi_offset 7, -4
 25341              	.LCFI26:
 25342              		.cfi_def_cfa_register 7
 25343 03d6 F860     		str	r0, [r7, #12]
 25344 03d8 B960     		str	r1, [r7, #8]
 25345 03da 7A60     		str	r2, [r7, #4]
 727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));
 730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_CurrentMemory != DMA_Memory_0)
 25346              		.loc 1 731 0
 25347 03dc 7B68     		ldr	r3, [r7, #4]
 25348 03de 002B     		cmp	r3, #0
 25349 03e0 06D0     		beq	.L36
 732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set Memory 1 as current memory address */
 734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 25350              		.loc 1 734 0
 25351 03e2 FB68     		ldr	r3, [r7, #12]
 25352 03e4 1B68     		ldr	r3, [r3, #0]
 25353 03e6 43F40022 		orr	r2, r3, #524288
 25354 03ea FB68     		ldr	r3, [r7, #12]
 25355 03ec 1A60     		str	r2, [r3, #0]
 25356 03ee 05E0     		b	.L37
 25357              	.L36:
 735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set Memory 0 as current memory address */
 739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 25358              		.loc 1 739 0
 25359 03f0 FB68     		ldr	r3, [r7, #12]
 25360 03f2 1B68     		ldr	r3, [r3, #0]
 25361 03f4 23F40022 		bic	r2, r3, #524288
 25362 03f8 FB68     		ldr	r3, [r7, #12]
 25363 03fa 1A60     		str	r2, [r3, #0]
 25364              	.L37:
 740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx M1AR */
 743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M1AR = Memory1BaseAddr;
 25365              		.loc 1 743 0
 25366 03fc FB68     		ldr	r3, [r7, #12]
 25367 03fe BA68     		ldr	r2, [r7, #8]
 25368 0400 1A61     		str	r2, [r3, #16]
 744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25369              		.loc 1 744 0
 25370 0402 07F11407 		add	r7, r7, #20
 25371 0406 BD46     		mov	sp, r7
 25372 0408 80BC     		pop	{r7}
 25373 040a 7047     		bx	lr
 25374              		.cfi_endproc
 25375              	.LFE118:
 25377              		.align	2
 25378              		.global	DMA_DoubleBufferModeCmd
 25379              		.thumb
 25380              		.thumb_func
 25382              	DMA_DoubleBufferModeCmd:
 25383              	.LFB119:
 745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the double buffer mode for the selected DMA stream.
 748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   This function can be called only when the DMA Stream is disabled.  
 749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx double buffer mode. 
 752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {  
 25384              		.loc 1 756 0
 25385              		.cfi_startproc
 25386              		@ args = 0, pretend = 0, frame = 8
 25387              		@ frame_needed = 1, uses_anonymous_args = 0
 25388              		@ link register save eliminated.
 25389 040c 80B4     		push	{r7}
 25390              	.LCFI27:
 25391              		.cfi_def_cfa_offset 4
 25392 040e 83B0     		sub	sp, sp, #12
 25393              	.LCFI28:
 25394              		.cfi_def_cfa_offset 16
 25395 0410 00AF     		add	r7, sp, #0
 25396              		.cfi_offset 7, -4
 25397              	.LCFI29:
 25398              		.cfi_def_cfa_register 7
 25399 0412 7860     		str	r0, [r7, #4]
 25400 0414 0B46     		mov	r3, r1
 25401 0416 FB70     		strb	r3, [r7, #3]
 757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure the Double Buffer mode */
 762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (NewState != DISABLE)
 25402              		.loc 1 762 0
 25403 0418 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25404 041a 002B     		cmp	r3, #0
 25405 041c 06D0     		beq	.L39
 763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Enable the Double buffer mode */
 765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 25406              		.loc 1 765 0
 25407 041e 7B68     		ldr	r3, [r7, #4]
 25408 0420 1B68     		ldr	r3, [r3, #0]
 25409 0422 43F48022 		orr	r2, r3, #262144
 25410 0426 7B68     		ldr	r3, [r7, #4]
 25411 0428 1A60     		str	r2, [r3, #0]
 25412 042a 05E0     		b	.L38
 25413              	.L39:
 766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Disable the Double buffer mode */
 770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 25414              		.loc 1 770 0
 25415 042c 7B68     		ldr	r3, [r7, #4]
 25416 042e 1B68     		ldr	r3, [r3, #0]
 25417 0430 23F48022 		bic	r2, r3, #262144
 25418 0434 7B68     		ldr	r3, [r7, #4]
 25419 0436 1A60     		str	r2, [r3, #0]
 25420              	.L38:
 771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25421              		.loc 1 772 0
 25422 0438 07F10C07 		add	r7, r7, #12
 25423 043c BD46     		mov	sp, r7
 25424 043e 80BC     		pop	{r7}
 25425 0440 7047     		bx	lr
 25426              		.cfi_endproc
 25427              	.LFE119:
 25429 0442 00BF     		.align	2
 25430              		.global	DMA_MemoryTargetConfig
 25431              		.thumb
 25432              		.thumb_func
 25434              	DMA_MemoryTargetConfig:
 25435              	.LFB120:
 773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures the Memory address for the next buffer transfer in double
 776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         buffer mode (for dynamic use). This function can be called when the
 777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         DMA Stream is enabled and when the transfer is ongoing.  
 778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  MemoryBaseAddr: The base address of the target memory buffer
 781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_MemoryTarget: Next memory target to be used. 
 782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         This parameter can be one of the following values:
 783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_0: To use the memory address 0
 784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_1: To use the memory address 1
 785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * 
 786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note    It is not allowed to modify the Base Address of a target Memory when
 787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          this target is involved in the current transfer. ie. If the DMA Stream
 788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          is currently transferring to/from Memory 1, then it not possible to
 789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          modify Base address of Memory 1, but it is possible to modify Base
 790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          address of Memory 0.
 791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          To know which Memory is currently used, you can use the function
 792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          DMA_GetCurrentMemoryTarget().             
 793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
 794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
 797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                            uint32_t DMA_MemoryTarget)
 798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25436              		.loc 1 798 0
 25437              		.cfi_startproc
 25438              		@ args = 0, pretend = 0, frame = 16
 25439              		@ frame_needed = 1, uses_anonymous_args = 0
 25440              		@ link register save eliminated.
 25441 0444 80B4     		push	{r7}
 25442              	.LCFI30:
 25443              		.cfi_def_cfa_offset 4
 25444 0446 85B0     		sub	sp, sp, #20
 25445              	.LCFI31:
 25446              		.cfi_def_cfa_offset 24
 25447 0448 00AF     		add	r7, sp, #0
 25448              		.cfi_offset 7, -4
 25449              	.LCFI32:
 25450              		.cfi_def_cfa_register 7
 25451 044a F860     		str	r0, [r7, #12]
 25452 044c B960     		str	r1, [r7, #8]
 25453 044e 7A60     		str	r2, [r7, #4]
 799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
 802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the Memory target to be configured */
 804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_MemoryTarget != DMA_Memory_0)
 25454              		.loc 1 804 0
 25455 0450 7B68     		ldr	r3, [r7, #4]
 25456 0452 002B     		cmp	r3, #0
 25457 0454 03D0     		beq	.L42
 805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Write to DMAy Streamx M1AR */
 807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->M1AR = MemoryBaseAddr;    
 25458              		.loc 1 807 0
 25459 0456 FB68     		ldr	r3, [r7, #12]
 25460 0458 BA68     		ldr	r2, [r7, #8]
 25461 045a 1A61     		str	r2, [r3, #16]
 25462 045c 02E0     		b	.L41
 25463              	.L42:
 808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }  
 809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Write to DMAy Streamx M0AR */
 812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->M0AR = MemoryBaseAddr;  
 25464              		.loc 1 812 0
 25465 045e FB68     		ldr	r3, [r7, #12]
 25466 0460 BA68     		ldr	r2, [r7, #8]
 25467 0462 DA60     		str	r2, [r3, #12]
 25468              	.L41:
 813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25469              		.loc 1 814 0
 25470 0464 07F11407 		add	r7, r7, #20
 25471 0468 BD46     		mov	sp, r7
 25472 046a 80BC     		pop	{r7}
 25473 046c 7047     		bx	lr
 25474              		.cfi_endproc
 25475              	.LFE120:
 25477 046e 00BF     		.align	2
 25478              		.global	DMA_GetCurrentMemoryTarget
 25479              		.thumb
 25480              		.thumb_func
 25482              	DMA_GetCurrentMemoryTarget:
 25483              	.LFB121:
 815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the current memory target used by double buffer transfer.
 818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
 821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
 823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25484              		.loc 1 823 0
 25485              		.cfi_startproc
 25486              		@ args = 0, pretend = 0, frame = 16
 25487              		@ frame_needed = 1, uses_anonymous_args = 0
 25488              		@ link register save eliminated.
 25489 0470 80B4     		push	{r7}
 25490              	.LCFI33:
 25491              		.cfi_def_cfa_offset 4
 25492 0472 85B0     		sub	sp, sp, #20
 25493              	.LCFI34:
 25494              		.cfi_def_cfa_offset 24
 25495 0474 00AF     		add	r7, sp, #0
 25496              		.cfi_offset 7, -4
 25497              	.LCFI35:
 25498              		.cfi_def_cfa_register 7
 25499 0476 7860     		str	r0, [r7, #4]
 824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmp = 0;
 25500              		.loc 1 824 0
 25501 0478 4FF00003 		mov	r3, #0
 25502 047c FB60     		str	r3, [r7, #12]
 825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the current memory target */
 830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 25503              		.loc 1 830 0
 25504 047e 7B68     		ldr	r3, [r7, #4]
 25505 0480 1B68     		ldr	r3, [r3, #0]
 25506 0482 03F40023 		and	r3, r3, #524288
 25507 0486 002B     		cmp	r3, #0
 25508 0488 03D0     		beq	.L45
 831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Current memory buffer used is Memory 1 */
 833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmp = 1;
 25509              		.loc 1 833 0
 25510 048a 4FF00103 		mov	r3, #1
 25511 048e FB60     		str	r3, [r7, #12]
 25512 0490 02E0     		b	.L46
 25513              	.L45:
 834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }  
 835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Current memory buffer used is Memory 0 */
 838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmp = 0;    
 25514              		.loc 1 838 0
 25515 0492 4FF00003 		mov	r3, #0
 25516 0496 FB60     		str	r3, [r7, #12]
 25517              	.L46:
 839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return tmp;
 25518              		.loc 1 840 0
 25519 0498 FB68     		ldr	r3, [r7, #12]
 841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25520              		.loc 1 841 0
 25521 049a 1846     		mov	r0, r3
 25522 049c 07F11407 		add	r7, r7, #20
 25523 04a0 BD46     		mov	sp, r7
 25524 04a2 80BC     		pop	{r7}
 25525 04a4 7047     		bx	lr
 25526              		.cfi_endproc
 25527              	.LFE121:
 25529 04a6 00BF     		.align	2
 25530              		.global	DMA_GetCmdStatus
 25531              		.thumb
 25532              		.thumb_func
 25534              	DMA_GetCmdStatus:
 25535              	.LFB122:
 842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group4 Interrupts and flags management functions
 847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Interrupts and flags management functions 
 848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                   Interrupts and flags management functions
 852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides functions allowing to
 855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Check the DMA enable status
 856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Check the FIFO status 
 857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Configure the DMA Interrupts sources and check or clear the flags or pending bits status.   
 858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  1. DMA Enable status:
 860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    After configuring the DMA Stream (DMA_Init() function) and enabling the stream,
 861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    it is recommended to check (or wait until) the DMA Stream is effectively enabled.
 862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    A Stream may remain disabled if a configuration parameter is wrong.
 863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    After disabling a DMA Stream, it is also recommended to check (or wait until) the DMA
 864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    Stream is effectively disabled. If a Stream is disabled while a data transfer is ongoing, 
 865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    the current data will be transferred and the Stream will be effectively disabled only after
 866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    this data transfer completion.
 867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    To monitor this state it is possible to use the following function:
 868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  2. FIFO Status:
 871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    It is possible to monitor the FIFO status when a transfer is ongoing using the following 
 872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    function:
 873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  3. DMA Interrupts and Flags:
 876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The user should identify which mode will be used in his application to manage the
 877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA controller events: Polling mode or Interrupt mode. 
 878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
 879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Polling Mode
 880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   =============
 881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Each DMA stream can be managed through 4 event Flags:
 882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     (x : DMA Stream number )
 883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        1. DMA_FLAG_FEIFx  : to indicate that a FIFO Mode Transfer Error event occurred.
 884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        2. DMA_FLAG_DMEIFx : to indicate that a Direct Mode Transfer Error event occurred.
 885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        3. DMA_FLAG_TEIFx  : to indicate that a Transfer Error event occurred.
 886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        4. DMA_FLAG_HTIFx  : to indicate that a Half-Transfer Complete event occurred.
 887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        5. DMA_FLAG_TCIFx  : to indicate that a Transfer Complete event occurred .       
 888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    In this Mode it is advised to use the following functions:
 890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       - FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       - void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Interrupt Mode
 894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ===============
 895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Each DMA Stream can be managed through 4 Interrupts:
 896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Interrupt Source
 898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     ----------------
 899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        1. DMA_IT_FEIFx  : specifies the interrupt source for the  FIFO Mode Transfer Error event.
 900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        2. DMA_IT_DMEIFx : specifies the interrupt source for the Direct Mode Transfer Error event.
 901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        3. DMA_IT_TEIFx  : specifies the interrupt source for the Transfer Error event.
 902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        4. DMA_IT_HTIFx  : specifies the interrupt source for the Half-Transfer Complete event.
 903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        5. DMA_IT_TCIFx  : specifies the interrupt source for the a Transfer Complete event. 
 904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      
 905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   In this Mode it is advised to use the following functions:
 906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewStat
 907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the status of EN bit for the specified DMAy Streamx.
 916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note    After configuring the DMA Stream (DMA_Init() function) and enabling
 920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          the stream, it is recommended to check (or wait until) the DMA Stream
 921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          is effectively enabled. A Stream may remain disabled if a configuration
 922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          parameter is wrong.
 923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          After disabling a DMA Stream, it is also recommended to check (or wait 
 924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          until) the DMA Stream is effectively disabled. If a Stream is disabled
 925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          while a data transfer is ongoing, the current data will be transferred
 926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          and the Stream will be effectively disabled only after the transfer
 927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          of this single data is finished.  
 928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
 930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25536              		.loc 1 932 0
 25537              		.cfi_startproc
 25538              		@ args = 0, pretend = 0, frame = 16
 25539              		@ frame_needed = 1, uses_anonymous_args = 0
 25540              		@ link register save eliminated.
 25541 04a8 80B4     		push	{r7}
 25542              	.LCFI36:
 25543              		.cfi_def_cfa_offset 4
 25544 04aa 85B0     		sub	sp, sp, #20
 25545              	.LCFI37:
 25546              		.cfi_def_cfa_offset 24
 25547 04ac 00AF     		add	r7, sp, #0
 25548              		.cfi_offset 7, -4
 25549              	.LCFI38:
 25550              		.cfi_def_cfa_register 7
 25551 04ae 7860     		str	r0, [r7, #4]
 933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   FunctionalState state = DISABLE;
 25552              		.loc 1 933 0
 25553 04b0 4FF00003 		mov	r3, #0
 25554 04b4 FB73     		strb	r3, [r7, #15]
 934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 25555              		.loc 1 938 0
 25556 04b6 7B68     		ldr	r3, [r7, #4]
 25557 04b8 1B68     		ldr	r3, [r3, #0]
 25558 04ba 03F00103 		and	r3, r3, #1
 25559 04be DBB2     		uxtb	r3, r3
 25560 04c0 002B     		cmp	r3, #0
 25561 04c2 03D0     		beq	.L48
 939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
 941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     state = ENABLE;
 25562              		.loc 1 941 0
 25563 04c4 4FF00103 		mov	r3, #1
 25564 04c8 FB73     		strb	r3, [r7, #15]
 25565 04ca 02E0     		b	.L49
 25566              	.L48:
 942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
 946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****         all transfers are complete) */
 947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     state = DISABLE;
 25567              		.loc 1 947 0
 25568 04cc 4FF00003 		mov	r3, #0
 25569 04d0 FB73     		strb	r3, [r7, #15]
 25570              	.L49:
 948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return state;
 25571              		.loc 1 949 0
 25572 04d2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25573              		.loc 1 950 0
 25574 04d4 1846     		mov	r0, r3
 25575 04d6 07F11407 		add	r7, r7, #20
 25576 04da BD46     		mov	sp, r7
 25577 04dc 80BC     		pop	{r7}
 25578 04de 7047     		bx	lr
 25579              		.cfi_endproc
 25580              	.LFE122:
 25582              		.align	2
 25583              		.global	DMA_GetFIFOStatus
 25584              		.thumb
 25585              		.thumb_func
 25587              	DMA_GetFIFOStatus:
 25588              	.LFB123:
 951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the current DMAy Streamx FIFO filled level.
 954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0 
 955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The FIFO filling state.
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Less1QuarterFull: when FIFO is less than 1 quarter-full 
 958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                               and not empty.
 959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_1QuarterFull: if more than 1 quarter-full.
 960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_HalfFull: if more than 1 half-full.
 961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
 962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Empty: when FIFO is empty
 963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Full: when FIFO is full
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25589              		.loc 1 966 0
 25590              		.cfi_startproc
 25591              		@ args = 0, pretend = 0, frame = 16
 25592              		@ frame_needed = 1, uses_anonymous_args = 0
 25593              		@ link register save eliminated.
 25594 04e0 80B4     		push	{r7}
 25595              	.LCFI39:
 25596              		.cfi_def_cfa_offset 4
 25597 04e2 85B0     		sub	sp, sp, #20
 25598              	.LCFI40:
 25599              		.cfi_def_cfa_offset 24
 25600 04e4 00AF     		add	r7, sp, #0
 25601              		.cfi_offset 7, -4
 25602              	.LCFI41:
 25603              		.cfi_def_cfa_register 7
 25604 04e6 7860     		str	r0, [r7, #4]
 967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 25605              		.loc 1 967 0
 25606 04e8 4FF00003 		mov	r3, #0
 25607 04ec FB60     		str	r3, [r7, #12]
 968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the FIFO level bits */
 973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 25608              		.loc 1 973 0
 25609 04ee 7B68     		ldr	r3, [r7, #4]
 25610 04f0 5B69     		ldr	r3, [r3, #20]
 25611 04f2 03F03803 		and	r3, r3, #56
 25612 04f6 FB60     		str	r3, [r7, #12]
 974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return tmpreg;
 25613              		.loc 1 975 0
 25614 04f8 FB68     		ldr	r3, [r7, #12]
 976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25615              		.loc 1 976 0
 25616 04fa 1846     		mov	r0, r3
 25617 04fc 07F11407 		add	r7, r7, #20
 25618 0500 BD46     		mov	sp, r7
 25619 0502 80BC     		pop	{r7}
 25620 0504 7047     		bx	lr
 25621              		.cfi_endproc
 25622              	.LFE123:
 25624 0506 00BF     		.align	2
 25625              		.global	DMA_GetFlagStatus
 25626              		.thumb
 25627              		.thumb_func
 25629              	DMA_GetFlagStatus:
 25630              	.LFB124:
 977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx flag is set or not.
 980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to check.
 983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
 985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
 986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
 987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
 988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
 989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
 990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The new state of DMA_FLAG (SET or RESET).
 991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
 993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25631              		.loc 1 993 0
 25632              		.cfi_startproc
 25633              		@ args = 0, pretend = 0, frame = 24
 25634              		@ frame_needed = 1, uses_anonymous_args = 0
 25635              		@ link register save eliminated.
 25636 0508 80B4     		push	{r7}
 25637              	.LCFI42:
 25638              		.cfi_def_cfa_offset 4
 25639 050a 87B0     		sub	sp, sp, #28
 25640              	.LCFI43:
 25641              		.cfi_def_cfa_offset 32
 25642 050c 00AF     		add	r7, sp, #0
 25643              		.cfi_offset 7, -4
 25644              	.LCFI44:
 25645              		.cfi_def_cfa_register 7
 25646 050e 7860     		str	r0, [r7, #4]
 25647 0510 3960     		str	r1, [r7, #0]
 994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   FlagStatus bitstatus = RESET;
 25648              		.loc 1 994 0
 25649 0512 4FF00003 		mov	r3, #0
 25650 0516 FB75     		strb	r3, [r7, #23]
 995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
 996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 25651              		.loc 1 996 0
 25652 0518 4FF00003 		mov	r3, #0
 25653 051c FB60     		str	r3, [r7, #12]
 997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
1001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 25654              		.loc 1 1003 0
 25655 051e 7A68     		ldr	r2, [r7, #4]
 25656 0520 164B     		ldr	r3, .L58
 25657 0522 9A42     		cmp	r2, r3
 25658 0524 02D8     		bhi	.L52
1004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 25659              		.loc 1 1006 0
 25660 0526 164B     		ldr	r3, .L58+4
 25661 0528 3B61     		str	r3, [r7, #16]
 25662 052a 01E0     		b	.L53
 25663              	.L52:
1007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 25664              		.loc 1 1011 0
 25665 052c 154B     		ldr	r3, .L58+8
 25666 052e 3B61     		str	r3, [r7, #16]
 25667              	.L53:
1012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the flag is in HISR or LISR */
1015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 25668              		.loc 1 1015 0
 25669 0530 3B68     		ldr	r3, [r7, #0]
 25670 0532 03F00053 		and	r3, r3, #536870912
 25671 0536 002B     		cmp	r3, #0
 25672 0538 03D0     		beq	.L54
1016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy HISR register value */
1018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->HISR;
 25673              		.loc 1 1018 0
 25674 053a 3B69     		ldr	r3, [r7, #16]
 25675 053c 5B68     		ldr	r3, [r3, #4]
 25676 053e FB60     		str	r3, [r7, #12]
 25677 0540 02E0     		b	.L55
 25678              	.L54:
1019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy LISR register value */
1023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->LISR;
 25679              		.loc 1 1023 0
 25680 0542 3B69     		ldr	r3, [r7, #16]
 25681 0544 1B68     		ldr	r3, [r3, #0]
 25682 0546 FB60     		str	r3, [r7, #12]
 25683              	.L55:
1024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }   
1025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Mask the reserved bits */
1027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 25684              		.loc 1 1027 0
 25685 0548 FA68     		ldr	r2, [r7, #12]
 25686 054a 0F4B     		ldr	r3, .L58+12
 25687 054c 02EA0303 		and	r3, r2, r3
 25688 0550 FB60     		str	r3, [r7, #12]
1028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the status of the specified DMA flag */
1030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 25689              		.loc 1 1030 0
 25690 0552 FA68     		ldr	r2, [r7, #12]
 25691 0554 3B68     		ldr	r3, [r7, #0]
 25692 0556 02EA0303 		and	r3, r2, r3
 25693 055a 002B     		cmp	r3, #0
 25694 055c 03D0     		beq	.L56
1031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_FLAG is set */
1033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = SET;
 25695              		.loc 1 1033 0
 25696 055e 4FF00103 		mov	r3, #1
 25697 0562 FB75     		strb	r3, [r7, #23]
 25698 0564 02E0     		b	.L57
 25699              	.L56:
1034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_FLAG is reset */
1038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = RESET;
 25700              		.loc 1 1038 0
 25701 0566 4FF00003 		mov	r3, #0
 25702 056a FB75     		strb	r3, [r7, #23]
 25703              	.L57:
1039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the DMA_FLAG status */
1042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return  bitstatus;
 25704              		.loc 1 1042 0
 25705 056c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25706              		.loc 1 1043 0
 25707 056e 1846     		mov	r0, r3
 25708 0570 07F11C07 		add	r7, r7, #28
 25709 0574 BD46     		mov	sp, r7
 25710 0576 80BC     		pop	{r7}
 25711 0578 7047     		bx	lr
 25712              	.L59:
 25713 057a 00BF     		.align	2
 25714              	.L58:
 25715 057c 0F640240 		.word	1073898511
 25716 0580 00600240 		.word	1073897472
 25717 0584 00640240 		.word	1073898496
 25718 0588 7D0F7D0F 		.word	259854205
 25719              		.cfi_endproc
 25720              	.LFE124:
 25722              		.align	2
 25723              		.global	DMA_ClearFlag
 25724              		.thumb
 25725              		.thumb_func
 25727              	DMA_ClearFlag:
 25728              	.LFB125:
1044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Clears the DMAy Streamx's pending flags.
1047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to clear.
1050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
1052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
1053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
1054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
1055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
1056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.   
1057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
1060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25729              		.loc 1 1060 0
 25730              		.cfi_startproc
 25731              		@ args = 0, pretend = 0, frame = 16
 25732              		@ frame_needed = 1, uses_anonymous_args = 0
 25733              		@ link register save eliminated.
 25734 058c 80B4     		push	{r7}
 25735              	.LCFI45:
 25736              		.cfi_def_cfa_offset 4
 25737 058e 85B0     		sub	sp, sp, #20
 25738              	.LCFI46:
 25739              		.cfi_def_cfa_offset 24
 25740 0590 00AF     		add	r7, sp, #0
 25741              		.cfi_offset 7, -4
 25742              	.LCFI47:
 25743              		.cfi_def_cfa_register 7
 25744 0592 7860     		str	r0, [r7, #4]
 25745 0594 3960     		str	r1, [r7, #0]
1061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
1066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 25746              		.loc 1 1068 0
 25747 0596 7A68     		ldr	r2, [r7, #4]
 25748 0598 0F4B     		ldr	r3, .L65
 25749 059a 9A42     		cmp	r2, r3
 25750 059c 02D8     		bhi	.L61
1069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 25751              		.loc 1 1071 0
 25752 059e 0F4B     		ldr	r3, .L65+4
 25753 05a0 FB60     		str	r3, [r7, #12]
 25754 05a2 01E0     		b	.L62
 25755              	.L61:
1072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 25756              		.loc 1 1076 0
 25757 05a4 0E4B     		ldr	r3, .L65+8
 25758 05a6 FB60     		str	r3, [r7, #12]
 25759              	.L62:
1077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 25760              		.loc 1 1080 0
 25761 05a8 3B68     		ldr	r3, [r7, #0]
 25762 05aa 03F00053 		and	r3, r3, #536870912
 25763 05ae 002B     		cmp	r3, #0
 25764 05b0 06D0     		beq	.L63
1081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy HIFCR register clear flag bits */
1083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 25765              		.loc 1 1083 0
 25766 05b2 3A68     		ldr	r2, [r7, #0]
 25767 05b4 0B4B     		ldr	r3, .L65+12
 25768 05b6 02EA0303 		and	r3, r2, r3
 25769 05ba FA68     		ldr	r2, [r7, #12]
 25770 05bc D360     		str	r3, [r2, #12]
 25771 05be 05E0     		b	.L60
 25772              	.L63:
1084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy LIFCR register clear flag bits */
1088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 25773              		.loc 1 1088 0
 25774 05c0 3A68     		ldr	r2, [r7, #0]
 25775 05c2 084B     		ldr	r3, .L65+12
 25776 05c4 02EA0303 		and	r3, r2, r3
 25777 05c8 FA68     		ldr	r2, [r7, #12]
 25778 05ca 9360     		str	r3, [r2, #8]
 25779              	.L60:
1089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }    
1090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25780              		.loc 1 1090 0
 25781 05cc 07F11407 		add	r7, r7, #20
 25782 05d0 BD46     		mov	sp, r7
 25783 05d2 80BC     		pop	{r7}
 25784 05d4 7047     		bx	lr
 25785              	.L66:
 25786 05d6 00BF     		.align	2
 25787              	.L65:
 25788 05d8 0F640240 		.word	1073898511
 25789 05dc 00600240 		.word	1073897472
 25790 05e0 00640240 		.word	1073898496
 25791 05e4 7D0F7D0F 		.word	259854205
 25792              		.cfi_endproc
 25793              	.LFE125:
 25795              		.align	2
 25796              		.global	DMA_ITConfig
 25797              		.thumb
 25798              		.thumb_func
 25800              	DMA_ITConfig:
 25801              	.LFB126:
1091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx interrupts.
1094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param DMA_IT: specifies the DMA interrupt sources to be enabled or disabled. 
1097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TC:  Transfer complete interrupt mask
1099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HT:  Half transfer complete interrupt mask
1100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TE:  Transfer error interrupt mask
1101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FE:  FIFO error interrupt mask
1102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the specified DMA interrupts.
1103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
1104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
1107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25802              		.loc 1 1107 0
 25803              		.cfi_startproc
 25804              		@ args = 0, pretend = 0, frame = 16
 25805              		@ frame_needed = 1, uses_anonymous_args = 0
 25806              		@ link register save eliminated.
 25807 05e8 80B4     		push	{r7}
 25808              	.LCFI48:
 25809              		.cfi_def_cfa_offset 4
 25810 05ea 85B0     		sub	sp, sp, #20
 25811              	.LCFI49:
 25812              		.cfi_def_cfa_offset 24
 25813 05ec 00AF     		add	r7, sp, #0
 25814              		.cfi_offset 7, -4
 25815              	.LCFI50:
 25816              		.cfi_def_cfa_register 7
 25817 05ee F860     		str	r0, [r7, #12]
 25818 05f0 B960     		str	r1, [r7, #8]
 25819 05f2 1346     		mov	r3, r2
 25820 05f4 FB71     		strb	r3, [r7, #7]
1108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CONFIG_IT(DMA_IT));
1111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the DMA_IT parameter contains a FIFO interrupt */
1114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & DMA_IT_FE) != 0)
 25821              		.loc 1 1114 0
 25822 05f6 BB68     		ldr	r3, [r7, #8]
 25823 05f8 03F08003 		and	r3, r3, #128
 25824 05fc 002B     		cmp	r3, #0
 25825 05fe 0FD0     		beq	.L68
1115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (NewState != DISABLE)
 25826              		.loc 1 1116 0
 25827 0600 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 25828 0602 002B     		cmp	r3, #0
 25829 0604 06D0     		beq	.L69
1117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Enable the selected DMA FIFO interrupts */
1119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 25830              		.loc 1 1119 0
 25831 0606 FB68     		ldr	r3, [r7, #12]
 25832 0608 5B69     		ldr	r3, [r3, #20]
 25833 060a 43F08002 		orr	r2, r3, #128
 25834 060e FB68     		ldr	r3, [r7, #12]
 25835 0610 5A61     		str	r2, [r3, #20]
 25836 0612 05E0     		b	.L68
 25837              	.L69:
1120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }    
1121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     else 
1122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Disable the selected DMA FIFO interrupts */
1124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 25838              		.loc 1 1124 0
 25839 0614 FB68     		ldr	r3, [r7, #12]
 25840 0616 5B69     		ldr	r3, [r3, #20]
 25841 0618 23F08002 		bic	r2, r3, #128
 25842 061c FB68     		ldr	r3, [r7, #12]
 25843 061e 5A61     		str	r2, [r3, #20]
 25844              	.L68:
1125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
1126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the DMA_IT parameter contains a Transfer interrupt */
1129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_IT != DMA_IT_FE)
 25845              		.loc 1 1129 0
 25846 0620 BB68     		ldr	r3, [r7, #8]
 25847 0622 802B     		cmp	r3, #128
 25848 0624 15D0     		beq	.L67
1130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (NewState != DISABLE)
 25849              		.loc 1 1131 0
 25850 0626 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 25851 0628 002B     		cmp	r3, #0
 25852 062a 08D0     		beq	.L71
1132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Enable the selected DMA transfer interrupts */
1134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 25853              		.loc 1 1134 0
 25854 062c FB68     		ldr	r3, [r7, #12]
 25855 062e 1A68     		ldr	r2, [r3, #0]
 25856 0630 BB68     		ldr	r3, [r7, #8]
 25857 0632 03F01E03 		and	r3, r3, #30
 25858 0636 1A43     		orrs	r2, r2, r3
 25859 0638 FB68     		ldr	r3, [r7, #12]
 25860 063a 1A60     		str	r2, [r3, #0]
 25861 063c 09E0     		b	.L67
 25862              	.L71:
1135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
1136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     else
1137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Disable the selected DMA transfer interrupts */
1139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 25863              		.loc 1 1139 0
 25864 063e FB68     		ldr	r3, [r7, #12]
 25865 0640 1A68     		ldr	r2, [r3, #0]
 25866 0642 BB68     		ldr	r3, [r7, #8]
 25867 0644 03F01E03 		and	r3, r3, #30
 25868 0648 6FEA0303 		mvn	r3, r3
 25869 064c 1A40     		ands	r2, r2, r3
 25870 064e FB68     		ldr	r3, [r7, #12]
 25871 0650 1A60     		str	r2, [r3, #0]
 25872              	.L67:
1140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }    
1141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25873              		.loc 1 1142 0
 25874 0652 07F11407 		add	r7, r7, #20
 25875 0656 BD46     		mov	sp, r7
 25876 0658 80BC     		pop	{r7}
 25877 065a 7047     		bx	lr
 25878              		.cfi_endproc
 25879              	.LFE126:
 25881              		.align	2
 25882              		.global	DMA_GetITStatus
 25883              		.thumb
 25884              		.thumb_func
 25886              	DMA_GetITStatus:
 25887              	.LFB127:
1143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx interrupt has occurred or not.
1146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt source to check.
1149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
1150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The new state of DMA_IT (SET or RESET).
1157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25888              		.loc 1 1159 0
 25889              		.cfi_startproc
 25890              		@ args = 0, pretend = 0, frame = 24
 25891              		@ frame_needed = 1, uses_anonymous_args = 0
 25892              		@ link register save eliminated.
 25893 065c 80B4     		push	{r7}
 25894              	.LCFI51:
 25895              		.cfi_def_cfa_offset 4
 25896 065e 87B0     		sub	sp, sp, #28
 25897              	.LCFI52:
 25898              		.cfi_def_cfa_offset 32
 25899 0660 00AF     		add	r7, sp, #0
 25900              		.cfi_offset 7, -4
 25901              	.LCFI53:
 25902              		.cfi_def_cfa_register 7
 25903 0662 7860     		str	r0, [r7, #4]
 25904 0664 3960     		str	r1, [r7, #0]
1160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ITStatus bitstatus = RESET;
 25905              		.loc 1 1160 0
 25906 0666 4FF00003 		mov	r3, #0
 25907 066a FB75     		strb	r3, [r7, #23]
1161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 25908              		.loc 1 1162 0
 25909 066c 4FF00003 		mov	r3, #0
 25910 0670 FB60     		str	r3, [r7, #12]
 25911 0672 4FF00003 		mov	r3, #0
 25912 0676 BB60     		str	r3, [r7, #8]
1163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_GET_IT(DMA_IT));
1167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 25913              		.loc 1 1169 0
 25914 0678 7A68     		ldr	r2, [r7, #4]
 25915 067a 244B     		ldr	r3, .L81
 25916 067c 9A42     		cmp	r2, r3
 25917 067e 02D8     		bhi	.L73
1170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 25918              		.loc 1 1172 0
 25919 0680 234B     		ldr	r3, .L81+4
 25920 0682 3B61     		str	r3, [r7, #16]
 25921 0684 01E0     		b	.L74
 25922              	.L73:
1173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 25923              		.loc 1 1177 0
 25924 0686 234B     		ldr	r3, .L81+8
 25925 0688 3B61     		str	r3, [r7, #16]
 25926              	.L74:
1178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the interrupt enable bit is in the CR or FCR register */
1181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 25927              		.loc 1 1181 0
 25928 068a 3A68     		ldr	r2, [r7, #0]
 25929 068c 224B     		ldr	r3, .L81+12
 25930 068e 02EA0303 		and	r3, r2, r3
 25931 0692 002B     		cmp	r3, #0
 25932 0694 0CD0     		beq	.L75
1182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get the interrupt enable position mask in CR register */
1184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 25933              		.loc 1 1184 0
 25934 0696 3B68     		ldr	r3, [r7, #0]
 25935 0698 4FEAD323 		lsr	r3, r3, #11
 25936 069c 03F01E03 		and	r3, r3, #30
 25937 06a0 FB60     		str	r3, [r7, #12]
1185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
1186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Check the enable bit in CR register */
1187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 25938              		.loc 1 1187 0
 25939 06a2 7B68     		ldr	r3, [r7, #4]
 25940 06a4 1A68     		ldr	r2, [r3, #0]
 25941 06a6 FB68     		ldr	r3, [r7, #12]
 25942 06a8 02EA0303 		and	r3, r2, r3
 25943 06ac BB60     		str	r3, [r7, #8]
 25944 06ae 04E0     		b	.L76
 25945              	.L75:
1188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Check the enable bit in FCR register */
1192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 25946              		.loc 1 1192 0
 25947 06b0 7B68     		ldr	r3, [r7, #4]
 25948 06b2 5B69     		ldr	r3, [r3, #20]
 25949 06b4 03F08003 		and	r3, r3, #128
 25950 06b8 BB60     		str	r3, [r7, #8]
 25951              	.L76:
1193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the interrupt pending flag is in LISR or HISR */
1196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 25952              		.loc 1 1196 0
 25953 06ba 3B68     		ldr	r3, [r7, #0]
 25954 06bc 03F00053 		and	r3, r3, #536870912
 25955 06c0 002B     		cmp	r3, #0
 25956 06c2 03D0     		beq	.L77
1197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy HISR register value */
1199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->HISR ;
 25957              		.loc 1 1199 0
 25958 06c4 3B69     		ldr	r3, [r7, #16]
 25959 06c6 5B68     		ldr	r3, [r3, #4]
 25960 06c8 FB60     		str	r3, [r7, #12]
 25961 06ca 02E0     		b	.L78
 25962              	.L77:
1200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy LISR register value */
1204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->LISR ;
 25963              		.loc 1 1204 0
 25964 06cc 3B69     		ldr	r3, [r7, #16]
 25965 06ce 1B68     		ldr	r3, [r3, #0]
 25966 06d0 FB60     		str	r3, [r7, #12]
 25967              	.L78:
1205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* mask all reserved bits */
1208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 25968              		.loc 1 1208 0
 25969 06d2 FA68     		ldr	r2, [r7, #12]
 25970 06d4 114B     		ldr	r3, .L81+16
 25971 06d6 02EA0303 		and	r3, r2, r3
 25972 06da FB60     		str	r3, [r7, #12]
1209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the status of the specified DMA interrupt */
1211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 25973              		.loc 1 1211 0
 25974 06dc FA68     		ldr	r2, [r7, #12]
 25975 06de 3B68     		ldr	r3, [r7, #0]
 25976 06e0 02EA0303 		and	r3, r2, r3
 25977 06e4 002B     		cmp	r3, #0
 25978 06e6 06D0     		beq	.L79
 25979              		.loc 1 1211 0 is_stmt 0 discriminator 1
 25980 06e8 BB68     		ldr	r3, [r7, #8]
 25981 06ea 002B     		cmp	r3, #0
 25982 06ec 03D0     		beq	.L79
1212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_IT is set */
1214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = SET;
 25983              		.loc 1 1214 0 is_stmt 1
 25984 06ee 4FF00103 		mov	r3, #1
 25985 06f2 FB75     		strb	r3, [r7, #23]
 25986 06f4 02E0     		b	.L80
 25987              	.L79:
1215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_IT is reset */
1219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = RESET;
 25988              		.loc 1 1219 0
 25989 06f6 4FF00003 		mov	r3, #0
 25990 06fa FB75     		strb	r3, [r7, #23]
 25991              	.L80:
1220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the DMA_IT status */
1223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return  bitstatus;
 25992              		.loc 1 1223 0
 25993 06fc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25994              		.loc 1 1224 0
 25995 06fe 1846     		mov	r0, r3
 25996 0700 07F11C07 		add	r7, r7, #28
 25997 0704 BD46     		mov	sp, r7
 25998 0706 80BC     		pop	{r7}
 25999 0708 7047     		bx	lr
 26000              	.L82:
 26001 070a 00BF     		.align	2
 26002              	.L81:
 26003 070c 0F640240 		.word	1073898511
 26004 0710 00600240 		.word	1073897472
 26005 0714 00640240 		.word	1073898496
 26006 0718 3C0F3C0F 		.word	255594300
 26007 071c 7D0F7D0F 		.word	259854205
 26008              		.cfi_endproc
 26009              	.LFE127:
 26011              		.align	2
 26012              		.global	DMA_ClearITPendingBit
 26013              		.thumb
 26014              		.thumb_func
 26016              	DMA_ClearITPendingBit:
 26017              	.LFB128:
1225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Clears the DMAy Streamx's interrupt pending bits.
1228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt pending bit to clear.
1231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 26018              		.loc 1 1241 0
 26019              		.cfi_startproc
 26020              		@ args = 0, pretend = 0, frame = 16
 26021              		@ frame_needed = 1, uses_anonymous_args = 0
 26022              		@ link register save eliminated.
 26023 0720 80B4     		push	{r7}
 26024              	.LCFI54:
 26025              		.cfi_def_cfa_offset 4
 26026 0722 85B0     		sub	sp, sp, #20
 26027              	.LCFI55:
 26028              		.cfi_def_cfa_offset 24
 26029 0724 00AF     		add	r7, sp, #0
 26030              		.cfi_offset 7, -4
 26031              	.LCFI56:
 26032              		.cfi_def_cfa_register 7
 26033 0726 7860     		str	r0, [r7, #4]
 26034 0728 3960     		str	r1, [r7, #0]
1242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CLEAR_IT(DMA_IT));
1247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 26035              		.loc 1 1249 0
 26036 072a 7A68     		ldr	r2, [r7, #4]
 26037 072c 0F4B     		ldr	r3, .L88
 26038 072e 9A42     		cmp	r2, r3
 26039 0730 02D8     		bhi	.L84
1250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 26040              		.loc 1 1252 0
 26041 0732 0F4B     		ldr	r3, .L88+4
 26042 0734 FB60     		str	r3, [r7, #12]
 26043 0736 01E0     		b	.L85
 26044              	.L84:
1253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 26045              		.loc 1 1257 0
 26046 0738 0E4B     		ldr	r3, .L88+8
 26047 073a FB60     		str	r3, [r7, #12]
 26048              	.L85:
1258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 26049              		.loc 1 1261 0
 26050 073c 3B68     		ldr	r3, [r7, #0]
 26051 073e 03F00053 		and	r3, r3, #536870912
 26052 0742 002B     		cmp	r3, #0
 26053 0744 06D0     		beq	.L86
1262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy HIFCR register clear interrupt bits */
1264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 26054              		.loc 1 1264 0
 26055 0746 3A68     		ldr	r2, [r7, #0]
 26056 0748 0B4B     		ldr	r3, .L88+12
 26057 074a 02EA0303 		and	r3, r2, r3
 26058 074e FA68     		ldr	r2, [r7, #12]
 26059 0750 D360     		str	r3, [r2, #12]
 26060 0752 05E0     		b	.L83
 26061              	.L86:
1265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy LIFCR register clear interrupt bits */
1269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 26062              		.loc 1 1269 0
 26063 0754 3A68     		ldr	r2, [r7, #0]
 26064 0756 084B     		ldr	r3, .L88+12
 26065 0758 02EA0303 		and	r3, r2, r3
 26066 075c FA68     		ldr	r2, [r7, #12]
 26067 075e 9360     		str	r3, [r2, #8]
 26068              	.L83:
1270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }   
1271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 26069              		.loc 1 1271 0
 26070 0760 07F11407 		add	r7, r7, #20
 26071 0764 BD46     		mov	sp, r7
 26072 0766 80BC     		pop	{r7}
 26073 0768 7047     		bx	lr
 26074              	.L89:
 26075 076a 00BF     		.align	2
 26076              	.L88:
 26077 076c 0F640240 		.word	1073898511
 26078 0770 00600240 		.word	1073897472
 26079 0774 00640240 		.word	1073898496
 26080 0778 7D0F7D0F 		.word	259854205
 26081              		.cfi_endproc
 26082              	.LFE128:
 26084              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_dma.c
     /tmp/ccVwJtWu.s:24609  .text:00000000 $t
     /tmp/ccVwJtWu.s:24614  .text:00000000 DMA_DeInit
     /tmp/ccVwJtWu.s:24845  .text:00000160 $d
     /tmp/ccVwJtWu.s:24869  .text:000001b4 $t
     /tmp/ccVwJtWu.s:24874  .text:000001b4 DMA_Init
     /tmp/ccVwJtWu.s:24999  .text:00000268 $d
     /tmp/ccVwJtWu.s:25003  .text:0000026c $t
     /tmp/ccVwJtWu.s:25008  .text:0000026c DMA_StructInit
     /tmp/ccVwJtWu.s:25099  .text:000002f8 DMA_Cmd
     /tmp/ccVwJtWu.s:25151  .text:00000330 DMA_PeriphIncOffsetSizeConfig
     /tmp/ccVwJtWu.s:25202  .text:00000364 DMA_FlowControllerConfig
     /tmp/ccVwJtWu.s:25253  .text:00000398 DMA_SetCurrDataCounter
     /tmp/ccVwJtWu.s:25290  .text:000003b4 DMA_GetCurrDataCounter
     /tmp/ccVwJtWu.s:25326  .text:000003d0 DMA_DoubleBufferModeConfig
     /tmp/ccVwJtWu.s:25382  .text:0000040c DMA_DoubleBufferModeCmd
     /tmp/ccVwJtWu.s:25434  .text:00000444 DMA_MemoryTargetConfig
     /tmp/ccVwJtWu.s:25482  .text:00000470 DMA_GetCurrentMemoryTarget
     /tmp/ccVwJtWu.s:25534  .text:000004a8 DMA_GetCmdStatus
     /tmp/ccVwJtWu.s:25587  .text:000004e0 DMA_GetFIFOStatus
     /tmp/ccVwJtWu.s:25629  .text:00000508 DMA_GetFlagStatus
     /tmp/ccVwJtWu.s:25715  .text:0000057c $d
     /tmp/ccVwJtWu.s:25722  .text:0000058c $t
     /tmp/ccVwJtWu.s:25727  .text:0000058c DMA_ClearFlag
     /tmp/ccVwJtWu.s:25788  .text:000005d8 $d
     /tmp/ccVwJtWu.s:25795  .text:000005e8 $t
     /tmp/ccVwJtWu.s:25800  .text:000005e8 DMA_ITConfig
     /tmp/ccVwJtWu.s:25886  .text:0000065c DMA_GetITStatus
     /tmp/ccVwJtWu.s:26003  .text:0000070c $d
     /tmp/ccVwJtWu.s:26011  .text:00000720 $t
     /tmp/ccVwJtWu.s:26016  .text:00000720 DMA_ClearITPendingBit
     /tmp/ccVwJtWu.s:26077  .text:0000076c $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
