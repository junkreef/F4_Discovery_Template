   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f4xx_i2c.c"
  23              	.Ltext0:
  24              		.file 1 "../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c"
 24572              		.align	2
 24573              		.global	I2C_DeInit
 24574              		.thumb
 24575              		.thumb_func
 24577              	I2C_DeInit:
 24578              	.LFB110:
   1:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
   2:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************
   3:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @file    stm32f4xx_i2c.c
   4:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @version V1.0.2
   6:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @date    05-March-2012
   7:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          functionalities of the Inter-integrated circuit (I2C)
   9:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Initialization and Configuration
  10:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Data transfers
  11:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - PEC management
  12:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - DMA transfers management
  13:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Interrupts, events and flags management 
  14:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
  15:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  @verbatim
  16:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
  17:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          ===================================================================
  18:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                 How to use this driver
  19:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          ===================================================================
  20:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          1. Enable peripheral clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2Cx, ENABLE)
  21:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             function for I2C1, I2C2 or I2C3.
  22:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  23:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          2. Enable SDA, SCL  and SMBA (when used) GPIO clocks using 
  24:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             RCC_AHBPeriphClockCmd() function. 
  25:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  26:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          3. Peripherals alternate function: 
  27:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  28:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  29:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Configure the desired pin in alternate function by:
  30:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  31:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  32:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  33:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Call GPIO_Init() function
  34:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 Recommended configuration is Push-Pull, Pull-up, Open-Drain.
  35:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 Add an external pull up if necessary (typically 4.7 KOhm).      
  36:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *        
  37:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          4. Program the Mode, duty cycle , Own address, Ack, Speed and Acknowledged
  38:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             Address using the I2C_Init() function.
  39:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  40:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          5. Optionally you can enable/configure the following parameters without
  41:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             re-initialization (i.e there is no need to call again I2C_Init() function):
  42:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the acknowledge feature using I2C_AcknowledgeConfig() function
  43:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the dual addressing mode using I2C_DualAddressCmd() function
  44:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the general call using the I2C_GeneralCallCmd() function
  45:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the clock stretching using I2C_StretchClockCmd() function
  46:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the fast mode duty cycle using the I2C_FastModeDutyCycleConfig()
  47:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                function.
  48:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Configure the NACK position for Master Receiver mode in case of 
  49:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                2 bytes reception using the function I2C_NACKPositionConfig().  
  50:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the PEC Calculation using I2C_CalculatePEC() function
  51:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - For SMBus Mode: 
  52:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Enable the Address Resolution Protocol (ARP) using I2C_ARPCmd() function
  53:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Configure the SMBusAlert pin using I2C_SMBusAlertConfig() function
  54:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  55:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          6. Enable the NVIC and the corresponding interrupt using the function 
  56:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             I2C_ITConfig() if you need to use interrupt mode. 
  57:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  58:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          7. When using the DMA mode 
  59:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Configure the DMA using DMA_Init() function
  60:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Active the needed channel Request using I2C_DMACmd() or
  61:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                     I2C_DMALastTransferCmd() function.
  62:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              @note When using DMA mode, I2C interrupts may be used at the same time to
  63:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                    control the communication flow (Start/Stop/Ack... events and errors).
  64:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
  65:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          8. Enable the I2C using the I2C_Cmd() function.
  66:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
  67:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          9. Enable the DMA using the DMA_Cmd() function when using DMA mode in the 
  68:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             transfers. 
  69:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  70:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  @endverbatim
  71:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  
  72:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************
  73:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @attention
  74:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  75:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  76:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  77:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  78:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * You may not use this file except in compliance with the License.
  79:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * You may obtain a copy of the License at:
  80:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  81:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  82:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  83:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * Unless required by applicable law or agreed to in writing, software 
  84:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  85:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  86:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * See the License for the specific language governing permissions and
  87:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * limitations under the License.
  88:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  89:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************
  90:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */ 
  91:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  92:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Includes ------------------------------------------------------------------*/
  93:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #include "stm32f4xx_i2c.h"
  94:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #include "stm32f4xx_rcc.h"
  95:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  96:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  97:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
  98:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
  99:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C 
 101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief I2C driver modules
 102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */ 
 104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private typedef -----------------------------------------------------------*/
 106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private define ------------------------------------------------------------*/
 107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define CR1_CLEAR_MASK    ((uint16_t)0xFBF5)      /*<! I2C registers Masks */
 109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define FLAG_MASK         ((uint32_t)0x00FFFFFF)  /*<! I2C FLAG mask */
 110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define ITEN_MASK         ((uint32_t)0x07000000)  /*<! I2C Interrupt Enable mask */
 111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private macro -------------------------------------------------------------*/
 113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private variables ---------------------------------------------------------*/
 114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private function prototypes -----------------------------------------------*/
 115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private functions ---------------------------------------------------------*/
 116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Private_Functions
 118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group1 Initialization and Configuration functions
 122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Initialization and Configuration functions 
 123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                    Initialization and Configuration functions
 127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
 135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DeInit(I2C_TypeDef* I2Cx)
 139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 24579              		.loc 1 139 0
 24580              		.cfi_startproc
 24581              		@ args = 0, pretend = 0, frame = 8
 24582              		@ frame_needed = 1, uses_anonymous_args = 0
 24583 0000 80B5     		push	{r7, lr}
 24584              	.LCFI0:
 24585              		.cfi_def_cfa_offset 8
 24586 0002 82B0     		sub	sp, sp, #8
 24587              	.LCFI1:
 24588              		.cfi_def_cfa_offset 16
 24589 0004 00AF     		add	r7, sp, #0
 24590              		.cfi_offset 14, -4
 24591              		.cfi_offset 7, -8
 24592              	.LCFI2:
 24593              		.cfi_def_cfa_register 7
 24594 0006 7860     		str	r0, [r7, #4]
 140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2Cx == I2C1)
 24595              		.loc 1 143 0
 24596 0008 7A68     		ldr	r2, [r7, #4]
 24597 000a 1A4B     		ldr	r3, .L5
 24598 000c 9A42     		cmp	r2, r3
 24599 000e 0CD1     		bne	.L2
 144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable I2C1 reset state */
 146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 24600              		.loc 1 146 0
 24601 0010 4FF40010 		mov	r0, #2097152
 24602 0014 4FF00101 		mov	r1, #1
 24603 0018 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Release I2C1 from reset state */
 148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 24604              		.loc 1 148 0
 24605 001c 4FF40010 		mov	r0, #2097152
 24606 0020 4FF00001 		mov	r1, #0
 24607 0024 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 24608 0028 20E0     		b	.L1
 24609              	.L2:
 149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else if (I2Cx == I2C2)
 24610              		.loc 1 150 0
 24611 002a 7A68     		ldr	r2, [r7, #4]
 24612 002c 124B     		ldr	r3, .L5+4
 24613 002e 9A42     		cmp	r2, r3
 24614 0030 0CD1     		bne	.L4
 151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable I2C2 reset state */
 153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 24615              		.loc 1 153 0
 24616 0032 4FF48000 		mov	r0, #4194304
 24617 0036 4FF00101 		mov	r1, #1
 24618 003a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Release I2C2 from reset state */
 155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 24619              		.loc 1 155 0
 24620 003e 4FF48000 		mov	r0, #4194304
 24621 0042 4FF00001 		mov	r1, #0
 24622 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 24623 004a 0FE0     		b	.L1
 24624              	.L4:
 156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else 
 158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (I2Cx == I2C3)
 24625              		.loc 1 159 0
 24626 004c 7A68     		ldr	r2, [r7, #4]
 24627 004e 0B4B     		ldr	r3, .L5+8
 24628 0050 9A42     		cmp	r2, r3
 24629 0052 0BD1     		bne	.L1
 160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Enable I2C3 reset state */
 162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 24630              		.loc 1 162 0
 24631 0054 4FF40000 		mov	r0, #8388608
 24632 0058 4FF00101 		mov	r1, #1
 24633 005c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Release I2C3 from reset state */
 164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 24634              		.loc 1 164 0
 24635 0060 4FF40000 		mov	r0, #8388608
 24636 0064 4FF00001 		mov	r1, #0
 24637 0068 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 24638              	.L1:
 165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 24639              		.loc 1 167 0
 24640 006c 07F10807 		add	r7, r7, #8
 24641 0070 BD46     		mov	sp, r7
 24642 0072 80BD     		pop	{r7, pc}
 24643              	.L6:
 24644              		.align	2
 24645              	.L5:
 24646 0074 00540040 		.word	1073763328
 24647 0078 00580040 		.word	1073764352
 24648 007c 005C0040 		.word	1073765376
 24649              		.cfi_endproc
 24650              	.LFE110:
 24652              		.align	2
 24653              		.global	I2C_Init
 24654              		.thumb
 24655              		.thumb_func
 24657              	I2C_Init:
 24658              	.LFB111:
 168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Initializes the I2Cx peripheral according to the specified 
 171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         parameters in the I2C_InitStruct.
 172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
 173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency 
 174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         (I2C peripheral input clock) must be a multiple of 10 MHz.  
 175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
 176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
 178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         the configuration information for the specified I2C peripheral.
 179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
 182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 24659              		.loc 1 182 0
 24660              		.cfi_startproc
 24661              		@ args = 0, pretend = 0, frame = 40
 24662              		@ frame_needed = 1, uses_anonymous_args = 0
 24663 0080 80B5     		push	{r7, lr}
 24664              	.LCFI3:
 24665              		.cfi_def_cfa_offset 8
 24666 0082 8AB0     		sub	sp, sp, #40
 24667              	.LCFI4:
 24668              		.cfi_def_cfa_offset 48
 24669 0084 00AF     		add	r7, sp, #0
 24670              		.cfi_offset 14, -4
 24671              		.cfi_offset 7, -8
 24672              	.LCFI5:
 24673              		.cfi_def_cfa_register 7
 24674 0086 7860     		str	r0, [r7, #4]
 24675 0088 3960     		str	r1, [r7, #0]
 183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0, freqrange = 0;
 24676              		.loc 1 183 0
 24677 008a 4FF00003 		mov	r3, #0
 24678 008e FB84     		strh	r3, [r7, #38]	@ movhi
 24679 0090 4FF00003 		mov	r3, #0
 24680 0094 7B84     		strh	r3, [r7, #34]	@ movhi
 184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t result = 0x04;
 24681              		.loc 1 184 0
 24682 0096 4FF00403 		mov	r3, #4
 24683 009a BB84     		strh	r3, [r7, #36]	@ movhi
 185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t pclk1 = 8000000;
 24684              		.loc 1 185 0
 24685 009c 604B     		ldr	r3, .L14
 24686 009e FB61     		str	r3, [r7, #28]
 186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   RCC_ClocksTypeDef  rcc_clocks;
 187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLOCK_SPEED(I2C_InitStruct->I2C_ClockSpeed));
 190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_MODE(I2C_InitStruct->I2C_Mode));
 191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_InitStruct->I2C_DutyCycle));
 192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
 193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
 194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));
 195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CR2 Configuration ------------------------*/
 197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx CR2 value */
 198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR2;
 24687              		.loc 1 198 0
 24688 00a0 7B68     		ldr	r3, [r7, #4]
 24689 00a2 9B88     		ldrh	r3, [r3, #4]	@ movhi
 24690 00a4 FB84     		strh	r3, [r7, #38]	@ movhi
 199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear frequency FREQ[5:0] bits */
 200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 24691              		.loc 1 200 0
 24692 00a6 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 24693 00a8 23F03F03 		bic	r3, r3, #63
 24694 00ac FB84     		strh	r3, [r7, #38]	@ movhi
 201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get pclk1 frequency value */
 202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   RCC_GetClocksFreq(&rcc_clocks);
 24695              		.loc 1 202 0
 24696 00ae 07F10C03 		add	r3, r7, #12
 24697 00b2 1846     		mov	r0, r3
 24698 00b4 FFF7FEFF 		bl	RCC_GetClocksFreq
 203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   pclk1 = rcc_clocks.PCLK1_Frequency;
 24699              		.loc 1 203 0
 24700 00b8 7B69     		ldr	r3, [r7, #20]
 24701 00ba FB61     		str	r3, [r7, #28]
 204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set frequency bits depending on pclk1 value */
 205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   freqrange = (uint16_t)(pclk1 / 1000000);
 24702              		.loc 1 205 0
 24703 00bc FA69     		ldr	r2, [r7, #28]
 24704 00be 594B     		ldr	r3, .L14+4
 24705 00c0 A3FB0213 		umull	r1, r3, r3, r2
 24706 00c4 4FEA9343 		lsr	r3, r3, #18
 24707 00c8 7B84     		strh	r3, [r7, #34]	@ movhi
 206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= freqrange;
 24708              		.loc 1 206 0
 24709 00ca FA8C     		ldrh	r2, [r7, #38]	@ movhi
 24710 00cc 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 24711 00ce 42EA0303 		orr	r3, r2, r3
 24712 00d2 FB84     		strh	r3, [r7, #38]	@ movhi
 207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CR2 */
 208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR2 = tmpreg;
 24713              		.loc 1 208 0
 24714 00d4 7B68     		ldr	r3, [r7, #4]
 24715 00d6 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 24716 00d8 9A80     		strh	r2, [r3, #4]	@ movhi
 209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CCR Configuration ------------------------*/
 211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Disable the selected I2C peripheral to configure TRISE */
 212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 24717              		.loc 1 212 0
 24718 00da 7B68     		ldr	r3, [r7, #4]
 24719 00dc 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24720 00de 9BB2     		uxth	r3, r3
 24721 00e0 23F00103 		bic	r3, r3, #1
 24722 00e4 9AB2     		uxth	r2, r3
 24723 00e6 7B68     		ldr	r3, [r7, #4]
 24724 00e8 1A80     		strh	r2, [r3, #0]	@ movhi
 213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Reset tmpreg value */
 214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear F/S, DUTY and CCR[11:0] bits */
 215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = 0;
 24725              		.loc 1 215 0
 24726 00ea 4FF00003 		mov	r3, #0
 24727 00ee FB84     		strh	r3, [r7, #38]	@ movhi
 216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure speed in standard mode */
 218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 24728              		.loc 1 218 0
 24729 00f0 3B68     		ldr	r3, [r7, #0]
 24730 00f2 1A68     		ldr	r2, [r3, #0]
 24731 00f4 4C4B     		ldr	r3, .L14+8
 24732 00f6 9A42     		cmp	r2, r3
 24733 00f8 19D8     		bhi	.L8
 219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Standard mode speed calculate */
 221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 24734              		.loc 1 221 0
 24735 00fa 3B68     		ldr	r3, [r7, #0]
 24736 00fc 1B68     		ldr	r3, [r3, #0]
 24737 00fe 4FEA4303 		lsl	r3, r3, #1
 24738 0102 FA69     		ldr	r2, [r7, #28]
 24739 0104 B2FBF3F3 		udiv	r3, r2, r3
 24740 0108 BB84     		strh	r3, [r7, #36]	@ movhi
 222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Test if CCR value is under 0x4*/
 223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (result < 0x04)
 24741              		.loc 1 223 0
 24742 010a BB8C     		ldrh	r3, [r7, #36]
 24743 010c 032B     		cmp	r3, #3
 24744 010e 02D8     		bhi	.L9
 224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set minimum allowed value */
 226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = 0x04;  
 24745              		.loc 1 226 0
 24746 0110 4FF00403 		mov	r3, #4
 24747 0114 BB84     		strh	r3, [r7, #36]	@ movhi
 24748              	.L9:
 227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set speed value for standard mode */
 229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     tmpreg |= result;	  
 24749              		.loc 1 229 0
 24750 0116 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 24751 0118 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 24752 011a 42EA0303 		orr	r3, r2, r3
 24753 011e FB84     		strh	r3, [r7, #38]	@ movhi
 230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set Maximum Rise Time for standard mode */
 231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->TRISE = freqrange + 1; 
 24754              		.loc 1 231 0
 24755 0120 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 24756 0122 03F10103 		add	r3, r3, #1
 24757 0126 9AB2     		uxth	r2, r3
 24758 0128 7B68     		ldr	r3, [r7, #4]
 24759 012a 1A84     		strh	r2, [r3, #32]	@ movhi
 24760 012c 49E0     		b	.L10
 24761              	.L8:
 232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure speed in fast mode */
 234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
 235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      input clock) must be a multiple of 10 MHz */
 236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
 237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 24762              		.loc 1 238 0
 24763 012e 3B68     		ldr	r3, [r7, #0]
 24764 0130 DA88     		ldrh	r2, [r3, #6]
 24765 0132 4BF6FF73 		movw	r3, #49151
 24766 0136 9A42     		cmp	r2, r3
 24767 0138 0AD1     		bne	.L11
 239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 2 */
 241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 24768              		.loc 1 241 0
 24769 013a 3B68     		ldr	r3, [r7, #0]
 24770 013c 1A68     		ldr	r2, [r3, #0]
 24771 013e 1346     		mov	r3, r2
 24772 0140 4FEA4303 		lsl	r3, r3, #1
 24773 0144 9B18     		adds	r3, r3, r2
 24774 0146 FA69     		ldr	r2, [r7, #28]
 24775 0148 B2FBF3F3 		udiv	r3, r2, r3
 24776 014c BB84     		strh	r3, [r7, #36]	@ movhi
 24777 014e 10E0     		b	.L12
 24778              	.L11:
 242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
 244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
 246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 24779              		.loc 1 246 0
 24780 0150 3B68     		ldr	r3, [r7, #0]
 24781 0152 1A68     		ldr	r2, [r3, #0]
 24782 0154 1346     		mov	r3, r2
 24783 0156 4FEA8303 		lsl	r3, r3, #2
 24784 015a 9B18     		adds	r3, r3, r2
 24785 015c 4FEA8302 		lsl	r2, r3, #2
 24786 0160 9B18     		adds	r3, r3, r2
 24787 0162 FA69     		ldr	r2, [r7, #28]
 24788 0164 B2FBF3F3 		udiv	r3, r2, r3
 24789 0168 BB84     		strh	r3, [r7, #36]	@ movhi
 247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set DUTY bit */
 248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result |= I2C_DutyCycle_16_9;
 24790              		.loc 1 248 0
 24791 016a BB8C     		ldrh	r3, [r7, #36]	@ movhi
 24792 016c 43F48043 		orr	r3, r3, #16384
 24793 0170 BB84     		strh	r3, [r7, #36]	@ movhi
 24794              	.L12:
 249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Test if CCR value is under 0x1*/
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if ((result & I2C_CCR_CCR) == 0)
 24795              		.loc 1 252 0
 24796 0172 BB8C     		ldrh	r3, [r7, #36]
 24797 0174 4FEA0353 		lsl	r3, r3, #20
 24798 0178 4FEA1353 		lsr	r3, r3, #20
 24799 017c 002B     		cmp	r3, #0
 24800 017e 03D1     		bne	.L13
 253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set minimum allowed value */
 255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result |= (uint16_t)0x0001;  
 24801              		.loc 1 255 0
 24802 0180 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 24803 0182 43F00103 		orr	r3, r3, #1
 24804 0186 BB84     		strh	r3, [r7, #36]	@ movhi
 24805              	.L13:
 256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set speed value and set F/S bit for fast mode */
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 24806              		.loc 1 258 0
 24807 0188 BA8C     		ldrh	r2, [r7, #36]	@ movhi
 24808 018a FB8C     		ldrh	r3, [r7, #38]	@ movhi
 24809 018c 42EA0303 		orr	r3, r2, r3
 24810 0190 9BB2     		uxth	r3, r3
 24811 0192 6FEA4343 		mvn	r3, r3, lsl #17
 24812 0196 6FEA5343 		mvn	r3, r3, lsr #17
 24813 019a FB84     		strh	r3, [r7, #38]	@ movhi
 259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set Maximum Rise Time for fast mode */
 260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 24814              		.loc 1 260 0
 24815 019c 7B8C     		ldrh	r3, [r7, #34]
 24816 019e 4FF49672 		mov	r2, #300
 24817 01a2 02FB03F3 		mul	r3, r2, r3
 24818 01a6 214A     		ldr	r2, .L14+12
 24819 01a8 82FB0312 		smull	r1, r2, r2, r3
 24820 01ac 4FEAA212 		asr	r2, r2, #6
 24821 01b0 4FEAE373 		asr	r3, r3, #31
 24822 01b4 D31A     		subs	r3, r2, r3
 24823 01b6 9BB2     		uxth	r3, r3
 24824 01b8 03F10103 		add	r3, r3, #1
 24825 01bc 9AB2     		uxth	r2, r3
 24826 01be 7B68     		ldr	r3, [r7, #4]
 24827 01c0 1A84     		strh	r2, [r3, #32]	@ movhi
 24828              	.L10:
 261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CCR */
 264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CCR = tmpreg;
 24829              		.loc 1 264 0
 24830 01c2 7B68     		ldr	r3, [r7, #4]
 24831 01c4 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 24832 01c6 9A83     		strh	r2, [r3, #28]	@ movhi
 265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Enable the selected I2C peripheral */
 266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 |= I2C_CR1_PE;
 24833              		.loc 1 266 0
 24834 01c8 7B68     		ldr	r3, [r7, #4]
 24835 01ca 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24836 01cc 9BB2     		uxth	r3, r3
 24837 01ce 43F00103 		orr	r3, r3, #1
 24838 01d2 9AB2     		uxth	r2, r3
 24839 01d4 7B68     		ldr	r3, [r7, #4]
 24840 01d6 1A80     		strh	r2, [r3, #0]	@ movhi
 267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CR1 Configuration ------------------------*/
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx CR1 value */
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR1;
 24841              		.loc 1 270 0
 24842 01d8 7B68     		ldr	r3, [r7, #4]
 24843 01da 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24844 01dc FB84     		strh	r3, [r7, #38]	@ movhi
 271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear ACK, SMBTYPE and  SMBUS bits */
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= CR1_CLEAR_MASK;
 24845              		.loc 1 272 0
 24846 01de FB8C     		ldrh	r3, [r7, #38]	@ movhi
 24847 01e0 23F48063 		bic	r3, r3, #1024
 24848 01e4 23F00A03 		bic	r3, r3, #10
 24849 01e8 FB84     		strh	r3, [r7, #38]	@ movhi
 273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure I2Cx: mode and acknowledgement */
 274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set ACK bit according to I2C_Ack value */
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 24850              		.loc 1 276 0
 24851 01ea 3B68     		ldr	r3, [r7, #0]
 24852 01ec 9A88     		ldrh	r2, [r3, #4]
 24853 01ee 3B68     		ldr	r3, [r7, #0]
 24854 01f0 5B89     		ldrh	r3, [r3, #10]
 24855 01f2 42EA0303 		orr	r3, r2, r3
 24856 01f6 9AB2     		uxth	r2, r3
 24857 01f8 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 24858 01fa 42EA0303 		orr	r3, r2, r3
 24859 01fe FB84     		strh	r3, [r7, #38]	@ movhi
 277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CR1 */
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 = tmpreg;
 24860              		.loc 1 278 0
 24861 0200 7B68     		ldr	r3, [r7, #4]
 24862 0202 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 24863 0204 1A80     		strh	r2, [r3, #0]	@ movhi
 279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx OAR1 Configuration -----------------------*/
 281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set I2Cx Own Address1 and acknowledged address */
 282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 24864              		.loc 1 282 0
 24865 0206 3B68     		ldr	r3, [r7, #0]
 24866 0208 9A89     		ldrh	r2, [r3, #12]
 24867 020a 3B68     		ldr	r3, [r7, #0]
 24868 020c 1B89     		ldrh	r3, [r3, #8]
 24869 020e 42EA0303 		orr	r3, r2, r3
 24870 0212 9AB2     		uxth	r2, r3
 24871 0214 7B68     		ldr	r3, [r7, #4]
 24872 0216 1A81     		strh	r2, [r3, #8]	@ movhi
 283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 24873              		.loc 1 283 0
 24874 0218 07F12807 		add	r7, r7, #40
 24875 021c BD46     		mov	sp, r7
 24876 021e 80BD     		pop	{r7, pc}
 24877              	.L15:
 24878              		.align	2
 24879              	.L14:
 24880 0220 00127A00 		.word	8000000
 24881 0224 83DE1B43 		.word	1125899907
 24882 0228 A0860100 		.word	100000
 24883 022c D34D6210 		.word	274877907
 24884              		.cfi_endproc
 24885              	.LFE111:
 24887              		.align	2
 24888              		.global	I2C_StructInit
 24889              		.thumb
 24890              		.thumb_func
 24892              	I2C_StructInit:
 24893              	.LFB112:
 284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Fills each I2C_InitStruct member with its default value.
 287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
 288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
 291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 24894              		.loc 1 291 0
 24895              		.cfi_startproc
 24896              		@ args = 0, pretend = 0, frame = 8
 24897              		@ frame_needed = 1, uses_anonymous_args = 0
 24898              		@ link register save eliminated.
 24899 0230 80B4     		push	{r7}
 24900              	.LCFI6:
 24901              		.cfi_def_cfa_offset 4
 24902 0232 83B0     		sub	sp, sp, #12
 24903              	.LCFI7:
 24904              		.cfi_def_cfa_offset 16
 24905 0234 00AF     		add	r7, sp, #0
 24906              		.cfi_offset 7, -4
 24907              	.LCFI8:
 24908              		.cfi_def_cfa_register 7
 24909 0236 7860     		str	r0, [r7, #4]
 292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------- Reset I2C init structure parameters values ----------------*/
 293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* initialize the I2C_ClockSpeed member */
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_ClockSpeed = 5000;
 24910              		.loc 1 294 0
 24911 0238 7B68     		ldr	r3, [r7, #4]
 24912 023a 41F28832 		movw	r2, #5000
 24913 023e 1A60     		str	r2, [r3, #0]
 295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_Mode member */
 296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 24914              		.loc 1 296 0
 24915 0240 7B68     		ldr	r3, [r7, #4]
 24916 0242 4FF00002 		mov	r2, #0
 24917 0246 9A80     		strh	r2, [r3, #4]	@ movhi
 297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_DutyCycle member */
 298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 24918              		.loc 1 298 0
 24919 0248 7B68     		ldr	r3, [r7, #4]
 24920 024a 4BF6FF72 		movw	r2, #49151
 24921 024e DA80     		strh	r2, [r3, #6]	@ movhi
 299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_OwnAddress1 member */
 300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_OwnAddress1 = 0;
 24922              		.loc 1 300 0
 24923 0250 7B68     		ldr	r3, [r7, #4]
 24924 0252 4FF00002 		mov	r2, #0
 24925 0256 1A81     		strh	r2, [r3, #8]	@ movhi
 301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_Ack member */
 302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 24926              		.loc 1 302 0
 24927 0258 7B68     		ldr	r3, [r7, #4]
 24928 025a 4FF00002 		mov	r2, #0
 24929 025e 5A81     		strh	r2, [r3, #10]	@ movhi
 303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_AcknowledgedAddress member */
 304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 24930              		.loc 1 304 0
 24931 0260 7B68     		ldr	r3, [r7, #4]
 24932 0262 4FF48042 		mov	r2, #16384
 24933 0266 9A81     		strh	r2, [r3, #12]	@ movhi
 305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 24934              		.loc 1 305 0
 24935 0268 07F10C07 		add	r7, r7, #12
 24936 026c BD46     		mov	sp, r7
 24937 026e 80BC     		pop	{r7}
 24938 0270 7047     		bx	lr
 24939              		.cfi_endproc
 24940              	.LFE112:
 24942 0272 00BF     		.align	2
 24943              		.global	I2C_Cmd
 24944              		.thumb
 24945              		.thumb_func
 24947              	I2C_Cmd:
 24948              	.LFB113:
 306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C peripheral.
 309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx peripheral. 
 311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 24949              		.loc 1 315 0
 24950              		.cfi_startproc
 24951              		@ args = 0, pretend = 0, frame = 8
 24952              		@ frame_needed = 1, uses_anonymous_args = 0
 24953              		@ link register save eliminated.
 24954 0274 80B4     		push	{r7}
 24955              	.LCFI9:
 24956              		.cfi_def_cfa_offset 4
 24957 0276 83B0     		sub	sp, sp, #12
 24958              	.LCFI10:
 24959              		.cfi_def_cfa_offset 16
 24960 0278 00AF     		add	r7, sp, #0
 24961              		.cfi_offset 7, -4
 24962              	.LCFI11:
 24963              		.cfi_def_cfa_register 7
 24964 027a 7860     		str	r0, [r7, #4]
 24965 027c 0B46     		mov	r3, r1
 24966 027e FB70     		strb	r3, [r7, #3]
 316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 24967              		.loc 1 319 0
 24968 0280 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24969 0282 002B     		cmp	r3, #0
 24970 0284 08D0     		beq	.L18
 320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C peripheral */
 322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PE;
 24971              		.loc 1 322 0
 24972 0286 7B68     		ldr	r3, [r7, #4]
 24973 0288 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24974 028a 9BB2     		uxth	r3, r3
 24975 028c 43F00103 		orr	r3, r3, #1
 24976 0290 9AB2     		uxth	r2, r3
 24977 0292 7B68     		ldr	r3, [r7, #4]
 24978 0294 1A80     		strh	r2, [r3, #0]	@ movhi
 24979 0296 07E0     		b	.L17
 24980              	.L18:
 323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C peripheral */
 327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 24981              		.loc 1 327 0
 24982 0298 7B68     		ldr	r3, [r7, #4]
 24983 029a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24984 029c 9BB2     		uxth	r3, r3
 24985 029e 23F00103 		bic	r3, r3, #1
 24986 02a2 9AB2     		uxth	r2, r3
 24987 02a4 7B68     		ldr	r3, [r7, #4]
 24988 02a6 1A80     		strh	r2, [r3, #0]	@ movhi
 24989              	.L17:
 328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 24990              		.loc 1 329 0
 24991 02a8 07F10C07 		add	r7, r7, #12
 24992 02ac BD46     		mov	sp, r7
 24993 02ae 80BC     		pop	{r7}
 24994 02b0 7047     		bx	lr
 24995              		.cfi_endproc
 24996              	.LFE113:
 24998 02b2 00BF     		.align	2
 24999              		.global	I2C_GenerateSTART
 25000              		.thumb
 25001              		.thumb_func
 25003              	I2C_GenerateSTART:
 25004              	.LFB114:
 330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Generates I2Cx communication START condition.
 333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C START condition generation.
 335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
 339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25005              		.loc 1 339 0
 25006              		.cfi_startproc
 25007              		@ args = 0, pretend = 0, frame = 8
 25008              		@ frame_needed = 1, uses_anonymous_args = 0
 25009              		@ link register save eliminated.
 25010 02b4 80B4     		push	{r7}
 25011              	.LCFI12:
 25012              		.cfi_def_cfa_offset 4
 25013 02b6 83B0     		sub	sp, sp, #12
 25014              	.LCFI13:
 25015              		.cfi_def_cfa_offset 16
 25016 02b8 00AF     		add	r7, sp, #0
 25017              		.cfi_offset 7, -4
 25018              	.LCFI14:
 25019              		.cfi_def_cfa_register 7
 25020 02ba 7860     		str	r0, [r7, #4]
 25021 02bc 0B46     		mov	r3, r1
 25022 02be FB70     		strb	r3, [r7, #3]
 340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 25023              		.loc 1 343 0
 25024 02c0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25025 02c2 002B     		cmp	r3, #0
 25026 02c4 08D0     		beq	.L21
 344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Generate a START condition */
 346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_START;
 25027              		.loc 1 346 0
 25028 02c6 7B68     		ldr	r3, [r7, #4]
 25029 02c8 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25030 02ca 9BB2     		uxth	r3, r3
 25031 02cc 43F48073 		orr	r3, r3, #256
 25032 02d0 9AB2     		uxth	r2, r3
 25033 02d2 7B68     		ldr	r3, [r7, #4]
 25034 02d4 1A80     		strh	r2, [r3, #0]	@ movhi
 25035 02d6 07E0     		b	.L20
 25036              	.L21:
 347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the START condition generation */
 351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 25037              		.loc 1 351 0
 25038 02d8 7B68     		ldr	r3, [r7, #4]
 25039 02da 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25040 02dc 9BB2     		uxth	r3, r3
 25041 02de 23F48073 		bic	r3, r3, #256
 25042 02e2 9AB2     		uxth	r2, r3
 25043 02e4 7B68     		ldr	r3, [r7, #4]
 25044 02e6 1A80     		strh	r2, [r3, #0]	@ movhi
 25045              	.L20:
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25046              		.loc 1 353 0
 25047 02e8 07F10C07 		add	r7, r7, #12
 25048 02ec BD46     		mov	sp, r7
 25049 02ee 80BC     		pop	{r7}
 25050 02f0 7047     		bx	lr
 25051              		.cfi_endproc
 25052              	.LFE114:
 25054 02f2 00BF     		.align	2
 25055              		.global	I2C_GenerateSTOP
 25056              		.thumb
 25057              		.thumb_func
 25059              	I2C_GenerateSTOP:
 25060              	.LFB115:
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Generates I2Cx communication STOP condition.
 357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C STOP condition generation.
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
 363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25061              		.loc 1 363 0
 25062              		.cfi_startproc
 25063              		@ args = 0, pretend = 0, frame = 8
 25064              		@ frame_needed = 1, uses_anonymous_args = 0
 25065              		@ link register save eliminated.
 25066 02f4 80B4     		push	{r7}
 25067              	.LCFI15:
 25068              		.cfi_def_cfa_offset 4
 25069 02f6 83B0     		sub	sp, sp, #12
 25070              	.LCFI16:
 25071              		.cfi_def_cfa_offset 16
 25072 02f8 00AF     		add	r7, sp, #0
 25073              		.cfi_offset 7, -4
 25074              	.LCFI17:
 25075              		.cfi_def_cfa_register 7
 25076 02fa 7860     		str	r0, [r7, #4]
 25077 02fc 0B46     		mov	r3, r1
 25078 02fe FB70     		strb	r3, [r7, #3]
 364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 25079              		.loc 1 367 0
 25080 0300 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25081 0302 002B     		cmp	r3, #0
 25082 0304 08D0     		beq	.L24
 368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Generate a STOP condition */
 370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_STOP;
 25083              		.loc 1 370 0
 25084 0306 7B68     		ldr	r3, [r7, #4]
 25085 0308 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25086 030a 9BB2     		uxth	r3, r3
 25087 030c 43F40073 		orr	r3, r3, #512
 25088 0310 9AB2     		uxth	r2, r3
 25089 0312 7B68     		ldr	r3, [r7, #4]
 25090 0314 1A80     		strh	r2, [r3, #0]	@ movhi
 25091 0316 07E0     		b	.L23
 25092              	.L24:
 371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the STOP condition generation */
 375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 25093              		.loc 1 375 0
 25094 0318 7B68     		ldr	r3, [r7, #4]
 25095 031a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25096 031c 9BB2     		uxth	r3, r3
 25097 031e 23F40073 		bic	r3, r3, #512
 25098 0322 9AB2     		uxth	r2, r3
 25099 0324 7B68     		ldr	r3, [r7, #4]
 25100 0326 1A80     		strh	r2, [r3, #0]	@ movhi
 25101              	.L23:
 376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25102              		.loc 1 377 0
 25103 0328 07F10C07 		add	r7, r7, #12
 25104 032c BD46     		mov	sp, r7
 25105 032e 80BC     		pop	{r7}
 25106 0330 7047     		bx	lr
 25107              		.cfi_endproc
 25108              	.LFE115:
 25110 0332 00BF     		.align	2
 25111              		.global	I2C_Send7bitAddress
 25112              		.thumb
 25113              		.thumb_func
 25115              	I2C_Send7bitAddress:
 25116              	.LFB116:
 378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Transmits the address byte to select the slave device.
 381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Address: specifies the slave address which will be transmitted
 383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_Direction: specifies whether the I2C device will be a Transmitter
 384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         or a Receiver. 
 385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values
 386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Direction_Transmitter: Transmitter mode
 387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Direction_Receiver: Receiver mode
 388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
 391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25117              		.loc 1 391 0
 25118              		.cfi_startproc
 25119              		@ args = 0, pretend = 0, frame = 8
 25120              		@ frame_needed = 1, uses_anonymous_args = 0
 25121              		@ link register save eliminated.
 25122 0334 80B4     		push	{r7}
 25123              	.LCFI18:
 25124              		.cfi_def_cfa_offset 4
 25125 0336 83B0     		sub	sp, sp, #12
 25126              	.LCFI19:
 25127              		.cfi_def_cfa_offset 16
 25128 0338 00AF     		add	r7, sp, #0
 25129              		.cfi_offset 7, -4
 25130              	.LCFI20:
 25131              		.cfi_def_cfa_register 7
 25132 033a 7860     		str	r0, [r7, #4]
 25133 033c 1346     		mov	r3, r2
 25134 033e 0A46     		mov	r2, r1
 25135 0340 FA70     		strb	r2, [r7, #3]
 25136 0342 BB70     		strb	r3, [r7, #2]
 392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DIRECTION(I2C_Direction));
 395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Test on the direction to set/reset the read/write bit */
 396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_Direction != I2C_Direction_Transmitter)
 25137              		.loc 1 396 0
 25138 0344 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 25139 0346 002B     		cmp	r3, #0
 25140 0348 04D0     		beq	.L27
 397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set the address bit0 for read */
 399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     Address |= I2C_OAR1_ADD0;
 25141              		.loc 1 399 0
 25142 034a FB78     		ldrb	r3, [r7, #3]
 25143 034c 43F00103 		orr	r3, r3, #1
 25144 0350 FB70     		strb	r3, [r7, #3]
 25145 0352 03E0     		b	.L28
 25146              	.L27:
 400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Reset the address bit0 for write */
 404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 25147              		.loc 1 404 0
 25148 0354 FB78     		ldrb	r3, [r7, #3]
 25149 0356 23F00103 		bic	r3, r3, #1
 25150 035a FB70     		strb	r3, [r7, #3]
 25151              	.L28:
 405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Send the address */
 407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->DR = Address;
 25152              		.loc 1 407 0
 25153 035c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25154 035e 9AB2     		uxth	r2, r3
 25155 0360 7B68     		ldr	r3, [r7, #4]
 25156 0362 1A82     		strh	r2, [r3, #16]	@ movhi
 408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25157              		.loc 1 408 0
 25158 0364 07F10C07 		add	r7, r7, #12
 25159 0368 BD46     		mov	sp, r7
 25160 036a 80BC     		pop	{r7}
 25161 036c 7047     		bx	lr
 25162              		.cfi_endproc
 25163              	.LFE116:
 25165 036e 00BF     		.align	2
 25166              		.global	I2C_AcknowledgeConfig
 25167              		.thumb
 25168              		.thumb_func
 25170              	I2C_AcknowledgeConfig:
 25171              	.LFB117:
 409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C acknowledge feature.
 412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C Acknowledgement.
 414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
 418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25172              		.loc 1 418 0
 25173              		.cfi_startproc
 25174              		@ args = 0, pretend = 0, frame = 8
 25175              		@ frame_needed = 1, uses_anonymous_args = 0
 25176              		@ link register save eliminated.
 25177 0370 80B4     		push	{r7}
 25178              	.LCFI21:
 25179              		.cfi_def_cfa_offset 4
 25180 0372 83B0     		sub	sp, sp, #12
 25181              	.LCFI22:
 25182              		.cfi_def_cfa_offset 16
 25183 0374 00AF     		add	r7, sp, #0
 25184              		.cfi_offset 7, -4
 25185              	.LCFI23:
 25186              		.cfi_def_cfa_register 7
 25187 0376 7860     		str	r0, [r7, #4]
 25188 0378 0B46     		mov	r3, r1
 25189 037a FB70     		strb	r3, [r7, #3]
 419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 25190              		.loc 1 422 0
 25191 037c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25192 037e 002B     		cmp	r3, #0
 25193 0380 08D0     		beq	.L30
 423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the acknowledgement */
 425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ACK;
 25194              		.loc 1 425 0
 25195 0382 7B68     		ldr	r3, [r7, #4]
 25196 0384 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25197 0386 9BB2     		uxth	r3, r3
 25198 0388 43F48063 		orr	r3, r3, #1024
 25199 038c 9AB2     		uxth	r2, r3
 25200 038e 7B68     		ldr	r3, [r7, #4]
 25201 0390 1A80     		strh	r2, [r3, #0]	@ movhi
 25202 0392 07E0     		b	.L29
 25203              	.L30:
 426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the acknowledgement */
 430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 25204              		.loc 1 430 0
 25205 0394 7B68     		ldr	r3, [r7, #4]
 25206 0396 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25207 0398 9BB2     		uxth	r3, r3
 25208 039a 23F48063 		bic	r3, r3, #1024
 25209 039e 9AB2     		uxth	r2, r3
 25210 03a0 7B68     		ldr	r3, [r7, #4]
 25211 03a2 1A80     		strh	r2, [r3, #0]	@ movhi
 25212              	.L29:
 431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25213              		.loc 1 432 0
 25214 03a4 07F10C07 		add	r7, r7, #12
 25215 03a8 BD46     		mov	sp, r7
 25216 03aa 80BC     		pop	{r7}
 25217 03ac 7047     		bx	lr
 25218              		.cfi_endproc
 25219              	.LFE117:
 25221 03ae 00BF     		.align	2
 25222              		.global	I2C_OwnAddress2Config
 25223              		.thumb
 25224              		.thumb_func
 25226              	I2C_OwnAddress2Config:
 25227              	.LFB118:
 433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Configures the specified I2C own address2.
 436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Address: specifies the 7bit I2C own address2.
 438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
 441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25228              		.loc 1 441 0
 25229              		.cfi_startproc
 25230              		@ args = 0, pretend = 0, frame = 16
 25231              		@ frame_needed = 1, uses_anonymous_args = 0
 25232              		@ link register save eliminated.
 25233 03b0 80B4     		push	{r7}
 25234              	.LCFI24:
 25235              		.cfi_def_cfa_offset 4
 25236 03b2 85B0     		sub	sp, sp, #20
 25237              	.LCFI25:
 25238              		.cfi_def_cfa_offset 24
 25239 03b4 00AF     		add	r7, sp, #0
 25240              		.cfi_offset 7, -4
 25241              	.LCFI26:
 25242              		.cfi_def_cfa_register 7
 25243 03b6 7860     		str	r0, [r7, #4]
 25244 03b8 0B46     		mov	r3, r1
 25245 03ba FB70     		strb	r3, [r7, #3]
 442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0;
 25246              		.loc 1 442 0
 25247 03bc 4FF00003 		mov	r3, #0
 25248 03c0 FB81     		strh	r3, [r7, #14]	@ movhi
 443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the old register value */
 448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->OAR2;
 25249              		.loc 1 448 0
 25250 03c2 7B68     		ldr	r3, [r7, #4]
 25251 03c4 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25252 03c6 FB81     		strh	r3, [r7, #14]	@ movhi
 449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Reset I2Cx Own address2 bit [7:1] */
 451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 25253              		.loc 1 451 0
 25254 03c8 FB89     		ldrh	r3, [r7, #14]	@ movhi
 25255 03ca 23F0FE03 		bic	r3, r3, #254
 25256 03ce FB81     		strh	r3, [r7, #14]	@ movhi
 452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set I2Cx Own address2 */
 454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 25257              		.loc 1 454 0
 25258 03d0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25259 03d2 9BB2     		uxth	r3, r3
 25260 03d4 03F0FE03 		and	r3, r3, #254
 25261 03d8 9AB2     		uxth	r2, r3
 25262 03da FB89     		ldrh	r3, [r7, #14]
 25263 03dc 42EA0303 		orr	r3, r2, r3
 25264 03e0 9BB2     		uxth	r3, r3
 25265 03e2 FB81     		strh	r3, [r7, #14]	@ movhi
 455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Store the new register value */
 457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->OAR2 = tmpreg;
 25266              		.loc 1 457 0
 25267 03e4 7B68     		ldr	r3, [r7, #4]
 25268 03e6 FA89     		ldrh	r2, [r7, #14]	@ movhi
 25269 03e8 9A81     		strh	r2, [r3, #12]	@ movhi
 458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25270              		.loc 1 458 0
 25271 03ea 07F11407 		add	r7, r7, #20
 25272 03ee BD46     		mov	sp, r7
 25273 03f0 80BC     		pop	{r7}
 25274 03f2 7047     		bx	lr
 25275              		.cfi_endproc
 25276              	.LFE118:
 25278              		.align	2
 25279              		.global	I2C_DualAddressCmd
 25280              		.thumb
 25281              		.thumb_func
 25283              	I2C_DualAddressCmd:
 25284              	.LFB119:
 459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C dual addressing mode.
 462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C dual addressing mode.
 464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25285              		.loc 1 468 0
 25286              		.cfi_startproc
 25287              		@ args = 0, pretend = 0, frame = 8
 25288              		@ frame_needed = 1, uses_anonymous_args = 0
 25289              		@ link register save eliminated.
 25290 03f4 80B4     		push	{r7}
 25291              	.LCFI27:
 25292              		.cfi_def_cfa_offset 4
 25293 03f6 83B0     		sub	sp, sp, #12
 25294              	.LCFI28:
 25295              		.cfi_def_cfa_offset 16
 25296 03f8 00AF     		add	r7, sp, #0
 25297              		.cfi_offset 7, -4
 25298              	.LCFI29:
 25299              		.cfi_def_cfa_register 7
 25300 03fa 7860     		str	r0, [r7, #4]
 25301 03fc 0B46     		mov	r3, r1
 25302 03fe FB70     		strb	r3, [r7, #3]
 469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 25303              		.loc 1 472 0
 25304 0400 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25305 0402 002B     		cmp	r3, #0
 25306 0404 08D0     		beq	.L34
 473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable dual addressing mode */
 475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 25307              		.loc 1 475 0
 25308 0406 7B68     		ldr	r3, [r7, #4]
 25309 0408 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25310 040a 9BB2     		uxth	r3, r3
 25311 040c 43F00103 		orr	r3, r3, #1
 25312 0410 9AB2     		uxth	r2, r3
 25313 0412 7B68     		ldr	r3, [r7, #4]
 25314 0414 9A81     		strh	r2, [r3, #12]	@ movhi
 25315 0416 07E0     		b	.L33
 25316              	.L34:
 476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable dual addressing mode */
 480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 25317              		.loc 1 480 0
 25318 0418 7B68     		ldr	r3, [r7, #4]
 25319 041a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25320 041c 9BB2     		uxth	r3, r3
 25321 041e 23F00103 		bic	r3, r3, #1
 25322 0422 9AB2     		uxth	r2, r3
 25323 0424 7B68     		ldr	r3, [r7, #4]
 25324 0426 9A81     		strh	r2, [r3, #12]	@ movhi
 25325              	.L33:
 481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25326              		.loc 1 482 0
 25327 0428 07F10C07 		add	r7, r7, #12
 25328 042c BD46     		mov	sp, r7
 25329 042e 80BC     		pop	{r7}
 25330 0430 7047     		bx	lr
 25331              		.cfi_endproc
 25332              	.LFE119:
 25334 0432 00BF     		.align	2
 25335              		.global	I2C_GeneralCallCmd
 25336              		.thumb
 25337              		.thumb_func
 25339              	I2C_GeneralCallCmd:
 25340              	.LFB120:
 483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C general call feature.
 486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C General call.
 488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25341              		.loc 1 492 0
 25342              		.cfi_startproc
 25343              		@ args = 0, pretend = 0, frame = 8
 25344              		@ frame_needed = 1, uses_anonymous_args = 0
 25345              		@ link register save eliminated.
 25346 0434 80B4     		push	{r7}
 25347              	.LCFI30:
 25348              		.cfi_def_cfa_offset 4
 25349 0436 83B0     		sub	sp, sp, #12
 25350              	.LCFI31:
 25351              		.cfi_def_cfa_offset 16
 25352 0438 00AF     		add	r7, sp, #0
 25353              		.cfi_offset 7, -4
 25354              	.LCFI32:
 25355              		.cfi_def_cfa_register 7
 25356 043a 7860     		str	r0, [r7, #4]
 25357 043c 0B46     		mov	r3, r1
 25358 043e FB70     		strb	r3, [r7, #3]
 493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 25359              		.loc 1 496 0
 25360 0440 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25361 0442 002B     		cmp	r3, #0
 25362 0444 08D0     		beq	.L37
 497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable generall call */
 499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENGC;
 25363              		.loc 1 499 0
 25364 0446 7B68     		ldr	r3, [r7, #4]
 25365 0448 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25366 044a 9BB2     		uxth	r3, r3
 25367 044c 43F04003 		orr	r3, r3, #64
 25368 0450 9AB2     		uxth	r2, r3
 25369 0452 7B68     		ldr	r3, [r7, #4]
 25370 0454 1A80     		strh	r2, [r3, #0]	@ movhi
 25371 0456 07E0     		b	.L36
 25372              	.L37:
 500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable generall call */
 504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 25373              		.loc 1 504 0
 25374 0458 7B68     		ldr	r3, [r7, #4]
 25375 045a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25376 045c 9BB2     		uxth	r3, r3
 25377 045e 23F04003 		bic	r3, r3, #64
 25378 0462 9AB2     		uxth	r2, r3
 25379 0464 7B68     		ldr	r3, [r7, #4]
 25380 0466 1A80     		strh	r2, [r3, #0]	@ movhi
 25381              	.L36:
 505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25382              		.loc 1 506 0
 25383 0468 07F10C07 		add	r7, r7, #12
 25384 046c BD46     		mov	sp, r7
 25385 046e 80BC     		pop	{r7}
 25386 0470 7047     		bx	lr
 25387              		.cfi_endproc
 25388              	.LFE120:
 25390 0472 00BF     		.align	2
 25391              		.global	I2C_SoftwareResetCmd
 25392              		.thumb
 25393              		.thumb_func
 25395              	I2C_SoftwareResetCmd:
 25396              	.LFB121:
 507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C software reset.
 510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   When software reset is enabled, the I2C IOs are released (this can
 511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         be useful to recover from bus errors).  
 512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C software reset.
 514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25397              		.loc 1 518 0
 25398              		.cfi_startproc
 25399              		@ args = 0, pretend = 0, frame = 8
 25400              		@ frame_needed = 1, uses_anonymous_args = 0
 25401              		@ link register save eliminated.
 25402 0474 80B4     		push	{r7}
 25403              	.LCFI33:
 25404              		.cfi_def_cfa_offset 4
 25405 0476 83B0     		sub	sp, sp, #12
 25406              	.LCFI34:
 25407              		.cfi_def_cfa_offset 16
 25408 0478 00AF     		add	r7, sp, #0
 25409              		.cfi_offset 7, -4
 25410              	.LCFI35:
 25411              		.cfi_def_cfa_register 7
 25412 047a 7860     		str	r0, [r7, #4]
 25413 047c 0B46     		mov	r3, r1
 25414 047e FB70     		strb	r3, [r7, #3]
 519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 25415              		.loc 1 522 0
 25416 0480 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25417 0482 002B     		cmp	r3, #0
 25418 0484 0AD0     		beq	.L40
 523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Peripheral under reset */
 525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_SWRST;
 25419              		.loc 1 525 0
 25420 0486 7B68     		ldr	r3, [r7, #4]
 25421 0488 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25422 048a 9BB2     		uxth	r3, r3
 25423 048c 6FEA4343 		mvn	r3, r3, lsl #17
 25424 0490 6FEA5343 		mvn	r3, r3, lsr #17
 25425 0494 9AB2     		uxth	r2, r3
 25426 0496 7B68     		ldr	r3, [r7, #4]
 25427 0498 1A80     		strh	r2, [r3, #0]	@ movhi
 25428 049a 09E0     		b	.L39
 25429              	.L40:
 526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Peripheral not under reset */
 530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 25430              		.loc 1 530 0
 25431 049c 7B68     		ldr	r3, [r7, #4]
 25432 049e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25433 04a0 9BB2     		uxth	r3, r3
 25434 04a2 4FEA4343 		lsl	r3, r3, #17
 25435 04a6 4FEA5343 		lsr	r3, r3, #17
 25436 04aa 9AB2     		uxth	r2, r3
 25437 04ac 7B68     		ldr	r3, [r7, #4]
 25438 04ae 1A80     		strh	r2, [r3, #0]	@ movhi
 25439              	.L39:
 531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25440              		.loc 1 532 0
 25441 04b0 07F10C07 		add	r7, r7, #12
 25442 04b4 BD46     		mov	sp, r7
 25443 04b6 80BC     		pop	{r7}
 25444 04b8 7047     		bx	lr
 25445              		.cfi_endproc
 25446              	.LFE121:
 25448 04ba 00BF     		.align	2
 25449              		.global	I2C_StretchClockCmd
 25450              		.thumb
 25451              		.thumb_func
 25453              	I2C_StretchClockCmd:
 25454              	.LFB122:
 533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C Clock stretching.
 536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx Clock stretching.
 538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25455              		.loc 1 542 0
 25456              		.cfi_startproc
 25457              		@ args = 0, pretend = 0, frame = 8
 25458              		@ frame_needed = 1, uses_anonymous_args = 0
 25459              		@ link register save eliminated.
 25460 04bc 80B4     		push	{r7}
 25461              	.LCFI36:
 25462              		.cfi_def_cfa_offset 4
 25463 04be 83B0     		sub	sp, sp, #12
 25464              	.LCFI37:
 25465              		.cfi_def_cfa_offset 16
 25466 04c0 00AF     		add	r7, sp, #0
 25467              		.cfi_offset 7, -4
 25468              	.LCFI38:
 25469              		.cfi_def_cfa_register 7
 25470 04c2 7860     		str	r0, [r7, #4]
 25471 04c4 0B46     		mov	r3, r1
 25472 04c6 FB70     		strb	r3, [r7, #3]
 543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState == DISABLE)
 25473              		.loc 1 546 0
 25474 04c8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25475 04ca 002B     		cmp	r3, #0
 25476 04cc 08D1     		bne	.L43
 547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C Clock stretching */
 549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 25477              		.loc 1 549 0
 25478 04ce 7B68     		ldr	r3, [r7, #4]
 25479 04d0 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25480 04d2 9BB2     		uxth	r3, r3
 25481 04d4 43F08003 		orr	r3, r3, #128
 25482 04d8 9AB2     		uxth	r2, r3
 25483 04da 7B68     		ldr	r3, [r7, #4]
 25484 04dc 1A80     		strh	r2, [r3, #0]	@ movhi
 25485 04de 07E0     		b	.L42
 25486              	.L43:
 550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C Clock stretching */
 554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 25487              		.loc 1 554 0
 25488 04e0 7B68     		ldr	r3, [r7, #4]
 25489 04e2 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25490 04e4 9BB2     		uxth	r3, r3
 25491 04e6 23F08003 		bic	r3, r3, #128
 25492 04ea 9AB2     		uxth	r2, r3
 25493 04ec 7B68     		ldr	r3, [r7, #4]
 25494 04ee 1A80     		strh	r2, [r3, #0]	@ movhi
 25495              	.L42:
 555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25496              		.loc 1 556 0
 25497 04f0 07F10C07 		add	r7, r7, #12
 25498 04f4 BD46     		mov	sp, r7
 25499 04f6 80BC     		pop	{r7}
 25500 04f8 7047     		bx	lr
 25501              		.cfi_endproc
 25502              	.LFE122:
 25504 04fa 00BF     		.align	2
 25505              		.global	I2C_FastModeDutyCycleConfig
 25506              		.thumb
 25507              		.thumb_func
 25509              	I2C_FastModeDutyCycleConfig:
 25510              	.LFB123:
 557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C fast mode duty cycle.
 560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_DutyCycle: specifies the fast mode duty cycle.
 562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
 564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
 565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
 568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25511              		.loc 1 568 0
 25512              		.cfi_startproc
 25513              		@ args = 0, pretend = 0, frame = 8
 25514              		@ frame_needed = 1, uses_anonymous_args = 0
 25515              		@ link register save eliminated.
 25516 04fc 80B4     		push	{r7}
 25517              	.LCFI39:
 25518              		.cfi_def_cfa_offset 4
 25519 04fe 83B0     		sub	sp, sp, #12
 25520              	.LCFI40:
 25521              		.cfi_def_cfa_offset 16
 25522 0500 00AF     		add	r7, sp, #0
 25523              		.cfi_offset 7, -4
 25524              	.LCFI41:
 25525              		.cfi_def_cfa_register 7
 25526 0502 7860     		str	r0, [r7, #4]
 25527 0504 0B46     		mov	r3, r1
 25528 0506 7B80     		strh	r3, [r7, #2]	@ movhi
 569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
 572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 25529              		.loc 1 572 0
 25530 0508 7B88     		ldrh	r3, [r7, #2]
 25531 050a B3F5804F 		cmp	r3, #16384
 25532 050e 08D0     		beq	.L46
 573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=2 */
 575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CCR &= I2C_DutyCycle_2;
 25533              		.loc 1 575 0
 25534 0510 7B68     		ldr	r3, [r7, #4]
 25535 0512 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 25536 0514 9BB2     		uxth	r3, r3
 25537 0516 23F48043 		bic	r3, r3, #16384
 25538 051a 9AB2     		uxth	r2, r3
 25539 051c 7B68     		ldr	r3, [r7, #4]
 25540 051e 9A83     		strh	r2, [r3, #28]	@ movhi
 25541 0520 07E0     		b	.L45
 25542              	.L46:
 576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=16/9 */
 580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CCR |= I2C_DutyCycle_16_9;
 25543              		.loc 1 580 0
 25544 0522 7B68     		ldr	r3, [r7, #4]
 25545 0524 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 25546 0526 9BB2     		uxth	r3, r3
 25547 0528 43F48043 		orr	r3, r3, #16384
 25548 052c 9AB2     		uxth	r2, r3
 25549 052e 7B68     		ldr	r3, [r7, #4]
 25550 0530 9A83     		strh	r2, [r3, #28]	@ movhi
 25551              	.L45:
 581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25552              		.loc 1 582 0
 25553 0532 07F10C07 		add	r7, r7, #12
 25554 0536 BD46     		mov	sp, r7
 25555 0538 80BC     		pop	{r7}
 25556 053a 7047     		bx	lr
 25557              		.cfi_endproc
 25558              	.LFE123:
 25560              		.align	2
 25561              		.global	I2C_NACKPositionConfig
 25562              		.thumb
 25563              		.thumb_func
 25565              	I2C_NACKPositionConfig:
 25566              	.LFB124:
 583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C NACK position in master receiver mode.
 586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   This function is useful in I2C Master Receiver mode when the number
 587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         of data to be received is equal to 2. In this case, this function 
 588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         should be called (with parameter I2C_NACKPosition_Next) before data 
 589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         reception starts,as described in the 2-byte reception procedure 
 590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         recommended in Reference Manual in Section: Master receiver.                
 591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_NACKPosition: specifies the NACK position. 
 593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_NACKPosition_Next: indicates that the next byte will be the last
 595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                        received byte.  
 596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_NACKPosition_Current: indicates that current byte is the last 
 597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                           received byte.
 598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            
 599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_PECPositionConfig() 
 600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          but is intended to be used in I2C mode while I2C_PECPositionConfig() 
 601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          is intended to used in SMBUS mode. 
 602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            
 603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
 606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25567              		.loc 1 606 0
 25568              		.cfi_startproc
 25569              		@ args = 0, pretend = 0, frame = 8
 25570              		@ frame_needed = 1, uses_anonymous_args = 0
 25571              		@ link register save eliminated.
 25572 053c 80B4     		push	{r7}
 25573              	.LCFI42:
 25574              		.cfi_def_cfa_offset 4
 25575 053e 83B0     		sub	sp, sp, #12
 25576              	.LCFI43:
 25577              		.cfi_def_cfa_offset 16
 25578 0540 00AF     		add	r7, sp, #0
 25579              		.cfi_offset 7, -4
 25580              	.LCFI44:
 25581              		.cfi_def_cfa_register 7
 25582 0542 7860     		str	r0, [r7, #4]
 25583 0544 0B46     		mov	r3, r1
 25584 0546 7B80     		strh	r3, [r7, #2]	@ movhi
 607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
 610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
 611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the input parameter */
 612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_NACKPosition == I2C_NACKPosition_Next)
 25585              		.loc 1 612 0
 25586 0548 7B88     		ldrh	r3, [r7, #2]
 25587 054a B3F5006F 		cmp	r3, #2048
 25588 054e 08D1     		bne	.L49
 613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next byte in shift register is the last received byte */
 615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_NACKPosition_Next;
 25589              		.loc 1 615 0
 25590 0550 7B68     		ldr	r3, [r7, #4]
 25591 0552 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25592 0554 9BB2     		uxth	r3, r3
 25593 0556 43F40063 		orr	r3, r3, #2048
 25594 055a 9AB2     		uxth	r2, r3
 25595 055c 7B68     		ldr	r3, [r7, #4]
 25596 055e 1A80     		strh	r2, [r3, #0]	@ movhi
 25597 0560 07E0     		b	.L48
 25598              	.L49:
 616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Current byte in shift register is the last received byte */
 620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_NACKPosition_Current;
 25599              		.loc 1 620 0
 25600 0562 7B68     		ldr	r3, [r7, #4]
 25601 0564 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25602 0566 9BB2     		uxth	r3, r3
 25603 0568 23F40063 		bic	r3, r3, #2048
 25604 056c 9AB2     		uxth	r2, r3
 25605 056e 7B68     		ldr	r3, [r7, #4]
 25606 0570 1A80     		strh	r2, [r3, #0]	@ movhi
 25607              	.L48:
 621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25608              		.loc 1 622 0
 25609 0572 07F10C07 		add	r7, r7, #12
 25610 0576 BD46     		mov	sp, r7
 25611 0578 80BC     		pop	{r7}
 25612 057a 7047     		bx	lr
 25613              		.cfi_endproc
 25614              	.LFE124:
 25616              		.align	2
 25617              		.global	I2C_SMBusAlertConfig
 25618              		.thumb
 25619              		.thumb_func
 25621              	I2C_SMBusAlertConfig:
 25622              	.LFB125:
 623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Drives the SMBusAlert pin high or low for the specified I2C.
 626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_SMBusAlert: specifies SMBAlert pin level. 
 628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
 630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
 631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
 634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25623              		.loc 1 634 0
 25624              		.cfi_startproc
 25625              		@ args = 0, pretend = 0, frame = 8
 25626              		@ frame_needed = 1, uses_anonymous_args = 0
 25627              		@ link register save eliminated.
 25628 057c 80B4     		push	{r7}
 25629              	.LCFI45:
 25630              		.cfi_def_cfa_offset 4
 25631 057e 83B0     		sub	sp, sp, #12
 25632              	.LCFI46:
 25633              		.cfi_def_cfa_offset 16
 25634 0580 00AF     		add	r7, sp, #0
 25635              		.cfi_offset 7, -4
 25636              	.LCFI47:
 25637              		.cfi_def_cfa_register 7
 25638 0582 7860     		str	r0, [r7, #4]
 25639 0584 0B46     		mov	r3, r1
 25640 0586 7B80     		strh	r3, [r7, #2]	@ movhi
 635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
 638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 25641              		.loc 1 638 0
 25642 0588 7B88     		ldrh	r3, [r7, #2]
 25643 058a B3F5005F 		cmp	r3, #8192
 25644 058e 08D1     		bne	.L52
 639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Drive the SMBusAlert pin Low */
 641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_SMBusAlert_Low;
 25645              		.loc 1 641 0
 25646 0590 7B68     		ldr	r3, [r7, #4]
 25647 0592 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25648 0594 9BB2     		uxth	r3, r3
 25649 0596 43F40053 		orr	r3, r3, #8192
 25650 059a 9AB2     		uxth	r2, r3
 25651 059c 7B68     		ldr	r3, [r7, #4]
 25652 059e 1A80     		strh	r2, [r3, #0]	@ movhi
 25653 05a0 07E0     		b	.L51
 25654              	.L52:
 642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Drive the SMBusAlert pin High  */
 646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_SMBusAlert_High;
 25655              		.loc 1 646 0
 25656 05a2 7B68     		ldr	r3, [r7, #4]
 25657 05a4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25658 05a6 9BB2     		uxth	r3, r3
 25659 05a8 23F40053 		bic	r3, r3, #8192
 25660 05ac 9AB2     		uxth	r2, r3
 25661 05ae 7B68     		ldr	r3, [r7, #4]
 25662 05b0 1A80     		strh	r2, [r3, #0]	@ movhi
 25663              	.L51:
 647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25664              		.loc 1 648 0
 25665 05b2 07F10C07 		add	r7, r7, #12
 25666 05b6 BD46     		mov	sp, r7
 25667 05b8 80BC     		pop	{r7}
 25668 05ba 7047     		bx	lr
 25669              		.cfi_endproc
 25670              	.LFE125:
 25672              		.align	2
 25673              		.global	I2C_ARPCmd
 25674              		.thumb
 25675              		.thumb_func
 25677              	I2C_ARPCmd:
 25678              	.LFB126:
 649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C ARP.
 652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx ARP. 
 654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25679              		.loc 1 658 0
 25680              		.cfi_startproc
 25681              		@ args = 0, pretend = 0, frame = 8
 25682              		@ frame_needed = 1, uses_anonymous_args = 0
 25683              		@ link register save eliminated.
 25684 05bc 80B4     		push	{r7}
 25685              	.LCFI48:
 25686              		.cfi_def_cfa_offset 4
 25687 05be 83B0     		sub	sp, sp, #12
 25688              	.LCFI49:
 25689              		.cfi_def_cfa_offset 16
 25690 05c0 00AF     		add	r7, sp, #0
 25691              		.cfi_offset 7, -4
 25692              	.LCFI50:
 25693              		.cfi_def_cfa_register 7
 25694 05c2 7860     		str	r0, [r7, #4]
 25695 05c4 0B46     		mov	r3, r1
 25696 05c6 FB70     		strb	r3, [r7, #3]
 659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 25697              		.loc 1 662 0
 25698 05c8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25699 05ca 002B     		cmp	r3, #0
 25700 05cc 08D0     		beq	.L55
 663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C ARP */
 665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENARP;
 25701              		.loc 1 665 0
 25702 05ce 7B68     		ldr	r3, [r7, #4]
 25703 05d0 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25704 05d2 9BB2     		uxth	r3, r3
 25705 05d4 43F01003 		orr	r3, r3, #16
 25706 05d8 9AB2     		uxth	r2, r3
 25707 05da 7B68     		ldr	r3, [r7, #4]
 25708 05dc 1A80     		strh	r2, [r3, #0]	@ movhi
 25709 05de 07E0     		b	.L54
 25710              	.L55:
 666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C ARP */
 670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 25711              		.loc 1 670 0
 25712 05e0 7B68     		ldr	r3, [r7, #4]
 25713 05e2 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25714 05e4 9BB2     		uxth	r3, r3
 25715 05e6 23F01003 		bic	r3, r3, #16
 25716 05ea 9AB2     		uxth	r2, r3
 25717 05ec 7B68     		ldr	r3, [r7, #4]
 25718 05ee 1A80     		strh	r2, [r3, #0]	@ movhi
 25719              	.L54:
 671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25720              		.loc 1 672 0
 25721 05f0 07F10C07 		add	r7, r7, #12
 25722 05f4 BD46     		mov	sp, r7
 25723 05f6 80BC     		pop	{r7}
 25724 05f8 7047     		bx	lr
 25725              		.cfi_endproc
 25726              	.LFE126:
 25728 05fa 00BF     		.align	2
 25729              		.global	I2C_SendData
 25730              		.thumb
 25731              		.thumb_func
 25733              	I2C_SendData:
 25734              	.LFB127:
 673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group2 Data transfers functions
 678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Data transfers functions 
 679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                         Data transfers functions
 683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Sends a data byte through the I2Cx peripheral.
 691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Data: Byte to be transmitted..
 693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
 696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25735              		.loc 1 696 0
 25736              		.cfi_startproc
 25737              		@ args = 0, pretend = 0, frame = 8
 25738              		@ frame_needed = 1, uses_anonymous_args = 0
 25739              		@ link register save eliminated.
 25740 05fc 80B4     		push	{r7}
 25741              	.LCFI51:
 25742              		.cfi_def_cfa_offset 4
 25743 05fe 83B0     		sub	sp, sp, #12
 25744              	.LCFI52:
 25745              		.cfi_def_cfa_offset 16
 25746 0600 00AF     		add	r7, sp, #0
 25747              		.cfi_offset 7, -4
 25748              	.LCFI53:
 25749              		.cfi_def_cfa_register 7
 25750 0602 7860     		str	r0, [r7, #4]
 25751 0604 0B46     		mov	r3, r1
 25752 0606 FB70     		strb	r3, [r7, #3]
 697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write in the DR register the data to be sent */
 700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->DR = Data;
 25753              		.loc 1 700 0
 25754 0608 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25755 060a 9AB2     		uxth	r2, r3
 25756 060c 7B68     		ldr	r3, [r7, #4]
 25757 060e 1A82     		strh	r2, [r3, #16]	@ movhi
 701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25758              		.loc 1 701 0
 25759 0610 07F10C07 		add	r7, r7, #12
 25760 0614 BD46     		mov	sp, r7
 25761 0616 80BC     		pop	{r7}
 25762 0618 7047     		bx	lr
 25763              		.cfi_endproc
 25764              	.LFE127:
 25766 061a 00BF     		.align	2
 25767              		.global	I2C_ReceiveData
 25768              		.thumb
 25769              		.thumb_func
 25771              	I2C_ReceiveData:
 25772              	.LFB128:
 702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the most recent received data by the I2Cx peripheral.
 705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The value of the received data.
 707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
 709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25773              		.loc 1 709 0
 25774              		.cfi_startproc
 25775              		@ args = 0, pretend = 0, frame = 8
 25776              		@ frame_needed = 1, uses_anonymous_args = 0
 25777              		@ link register save eliminated.
 25778 061c 80B4     		push	{r7}
 25779              	.LCFI54:
 25780              		.cfi_def_cfa_offset 4
 25781 061e 83B0     		sub	sp, sp, #12
 25782              	.LCFI55:
 25783              		.cfi_def_cfa_offset 16
 25784 0620 00AF     		add	r7, sp, #0
 25785              		.cfi_offset 7, -4
 25786              	.LCFI56:
 25787              		.cfi_def_cfa_register 7
 25788 0622 7860     		str	r0, [r7, #4]
 710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the data in the DR register */
 713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return (uint8_t)I2Cx->DR;
 25789              		.loc 1 713 0
 25790 0624 7B68     		ldr	r3, [r7, #4]
 25791 0626 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 25792 0628 9BB2     		uxth	r3, r3
 25793 062a DBB2     		uxtb	r3, r3
 714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25794              		.loc 1 714 0
 25795 062c 1846     		mov	r0, r3
 25796 062e 07F10C07 		add	r7, r7, #12
 25797 0632 BD46     		mov	sp, r7
 25798 0634 80BC     		pop	{r7}
 25799 0636 7047     		bx	lr
 25800              		.cfi_endproc
 25801              	.LFE128:
 25803              		.align	2
 25804              		.global	I2C_TransmitPEC
 25805              		.thumb
 25806              		.thumb_func
 25808              	I2C_TransmitPEC:
 25809              	.LFB129:
 715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group3 PEC management functions
 721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   PEC management functions 
 722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                          PEC management functions
 726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C PEC transfer.
 734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C PEC transmission.
 736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25810              		.loc 1 740 0
 25811              		.cfi_startproc
 25812              		@ args = 0, pretend = 0, frame = 8
 25813              		@ frame_needed = 1, uses_anonymous_args = 0
 25814              		@ link register save eliminated.
 25815 0638 80B4     		push	{r7}
 25816              	.LCFI57:
 25817              		.cfi_def_cfa_offset 4
 25818 063a 83B0     		sub	sp, sp, #12
 25819              	.LCFI58:
 25820              		.cfi_def_cfa_offset 16
 25821 063c 00AF     		add	r7, sp, #0
 25822              		.cfi_offset 7, -4
 25823              	.LCFI59:
 25824              		.cfi_def_cfa_register 7
 25825 063e 7860     		str	r0, [r7, #4]
 25826 0640 0B46     		mov	r3, r1
 25827 0642 FB70     		strb	r3, [r7, #3]
 741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 25828              		.loc 1 744 0
 25829 0644 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25830 0646 002B     		cmp	r3, #0
 25831 0648 08D0     		beq	.L60
 745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C PEC transmission */
 747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PEC;
 25832              		.loc 1 747 0
 25833 064a 7B68     		ldr	r3, [r7, #4]
 25834 064c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25835 064e 9BB2     		uxth	r3, r3
 25836 0650 43F48053 		orr	r3, r3, #4096
 25837 0654 9AB2     		uxth	r2, r3
 25838 0656 7B68     		ldr	r3, [r7, #4]
 25839 0658 1A80     		strh	r2, [r3, #0]	@ movhi
 25840 065a 07E0     		b	.L59
 25841              	.L60:
 748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C PEC transmission */
 752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 25842              		.loc 1 752 0
 25843 065c 7B68     		ldr	r3, [r7, #4]
 25844 065e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25845 0660 9BB2     		uxth	r3, r3
 25846 0662 23F48053 		bic	r3, r3, #4096
 25847 0666 9AB2     		uxth	r2, r3
 25848 0668 7B68     		ldr	r3, [r7, #4]
 25849 066a 1A80     		strh	r2, [r3, #0]	@ movhi
 25850              	.L59:
 753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25851              		.loc 1 754 0
 25852 066c 07F10C07 		add	r7, r7, #12
 25853 0670 BD46     		mov	sp, r7
 25854 0672 80BC     		pop	{r7}
 25855 0674 7047     		bx	lr
 25856              		.cfi_endproc
 25857              	.LFE129:
 25859 0676 00BF     		.align	2
 25860              		.global	I2C_PECPositionConfig
 25861              		.thumb
 25862              		.thumb_func
 25864              	I2C_PECPositionConfig:
 25865              	.LFB130:
 755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C PEC position.
 758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_PECPosition: specifies the PEC position. 
 760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_PECPosition_Next: indicates that the next byte is PEC
 762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_PECPosition_Current: indicates that current byte is PEC
 763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *       
 764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_NACKPositionConfig()
 765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          but is intended to be used in SMBUS mode while I2C_NACKPositionConfig() 
 766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          is intended to used in I2C mode.
 767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                
 768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
 771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25866              		.loc 1 771 0
 25867              		.cfi_startproc
 25868              		@ args = 0, pretend = 0, frame = 8
 25869              		@ frame_needed = 1, uses_anonymous_args = 0
 25870              		@ link register save eliminated.
 25871 0678 80B4     		push	{r7}
 25872              	.LCFI60:
 25873              		.cfi_def_cfa_offset 4
 25874 067a 83B0     		sub	sp, sp, #12
 25875              	.LCFI61:
 25876              		.cfi_def_cfa_offset 16
 25877 067c 00AF     		add	r7, sp, #0
 25878              		.cfi_offset 7, -4
 25879              	.LCFI62:
 25880              		.cfi_def_cfa_register 7
 25881 067e 7860     		str	r0, [r7, #4]
 25882 0680 0B46     		mov	r3, r1
 25883 0682 7B80     		strh	r3, [r7, #2]	@ movhi
 772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
 775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_PECPosition == I2C_PECPosition_Next)
 25884              		.loc 1 775 0
 25885 0684 7B88     		ldrh	r3, [r7, #2]
 25886 0686 B3F5006F 		cmp	r3, #2048
 25887 068a 08D1     		bne	.L63
 776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next byte in shift register is PEC */
 778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_PECPosition_Next;
 25888              		.loc 1 778 0
 25889 068c 7B68     		ldr	r3, [r7, #4]
 25890 068e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25891 0690 9BB2     		uxth	r3, r3
 25892 0692 43F40063 		orr	r3, r3, #2048
 25893 0696 9AB2     		uxth	r2, r3
 25894 0698 7B68     		ldr	r3, [r7, #4]
 25895 069a 1A80     		strh	r2, [r3, #0]	@ movhi
 25896 069c 07E0     		b	.L62
 25897              	.L63:
 779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Current byte in shift register is PEC */
 783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_PECPosition_Current;
 25898              		.loc 1 783 0
 25899 069e 7B68     		ldr	r3, [r7, #4]
 25900 06a0 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25901 06a2 9BB2     		uxth	r3, r3
 25902 06a4 23F40063 		bic	r3, r3, #2048
 25903 06a8 9AB2     		uxth	r2, r3
 25904 06aa 7B68     		ldr	r3, [r7, #4]
 25905 06ac 1A80     		strh	r2, [r3, #0]	@ movhi
 25906              	.L62:
 784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25907              		.loc 1 785 0
 25908 06ae 07F10C07 		add	r7, r7, #12
 25909 06b2 BD46     		mov	sp, r7
 25910 06b4 80BC     		pop	{r7}
 25911 06b6 7047     		bx	lr
 25912              		.cfi_endproc
 25913              	.LFE130:
 25915              		.align	2
 25916              		.global	I2C_CalculatePEC
 25917              		.thumb
 25918              		.thumb_func
 25920              	I2C_CalculatePEC:
 25921              	.LFB131:
 786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the PEC value calculation of the transferred bytes.
 789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx PEC value calculation.
 791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25922              		.loc 1 795 0
 25923              		.cfi_startproc
 25924              		@ args = 0, pretend = 0, frame = 8
 25925              		@ frame_needed = 1, uses_anonymous_args = 0
 25926              		@ link register save eliminated.
 25927 06b8 80B4     		push	{r7}
 25928              	.LCFI63:
 25929              		.cfi_def_cfa_offset 4
 25930 06ba 83B0     		sub	sp, sp, #12
 25931              	.LCFI64:
 25932              		.cfi_def_cfa_offset 16
 25933 06bc 00AF     		add	r7, sp, #0
 25934              		.cfi_offset 7, -4
 25935              	.LCFI65:
 25936              		.cfi_def_cfa_register 7
 25937 06be 7860     		str	r0, [r7, #4]
 25938 06c0 0B46     		mov	r3, r1
 25939 06c2 FB70     		strb	r3, [r7, #3]
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 25940              		.loc 1 799 0
 25941 06c4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25942 06c6 002B     		cmp	r3, #0
 25943 06c8 08D0     		beq	.L66
 800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C PEC calculation */
 802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENPEC;
 25944              		.loc 1 802 0
 25945 06ca 7B68     		ldr	r3, [r7, #4]
 25946 06cc 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25947 06ce 9BB2     		uxth	r3, r3
 25948 06d0 43F02003 		orr	r3, r3, #32
 25949 06d4 9AB2     		uxth	r2, r3
 25950 06d6 7B68     		ldr	r3, [r7, #4]
 25951 06d8 1A80     		strh	r2, [r3, #0]	@ movhi
 25952 06da 07E0     		b	.L65
 25953              	.L66:
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C PEC calculation */
 807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 25954              		.loc 1 807 0
 25955 06dc 7B68     		ldr	r3, [r7, #4]
 25956 06de 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25957 06e0 9BB2     		uxth	r3, r3
 25958 06e2 23F02003 		bic	r3, r3, #32
 25959 06e6 9AB2     		uxth	r2, r3
 25960 06e8 7B68     		ldr	r3, [r7, #4]
 25961 06ea 1A80     		strh	r2, [r3, #0]	@ movhi
 25962              	.L65:
 808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25963              		.loc 1 809 0
 25964 06ec 07F10C07 		add	r7, r7, #12
 25965 06f0 BD46     		mov	sp, r7
 25966 06f2 80BC     		pop	{r7}
 25967 06f4 7047     		bx	lr
 25968              		.cfi_endproc
 25969              	.LFE131:
 25971 06f6 00BF     		.align	2
 25972              		.global	I2C_GetPEC
 25973              		.thumb
 25974              		.thumb_func
 25976              	I2C_GetPEC:
 25977              	.LFB132:
 810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the PEC value for the specified I2C.
 813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The PEC value.
 815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
 817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25978              		.loc 1 817 0
 25979              		.cfi_startproc
 25980              		@ args = 0, pretend = 0, frame = 8
 25981              		@ frame_needed = 1, uses_anonymous_args = 0
 25982              		@ link register save eliminated.
 25983 06f8 80B4     		push	{r7}
 25984              	.LCFI66:
 25985              		.cfi_def_cfa_offset 4
 25986 06fa 83B0     		sub	sp, sp, #12
 25987              	.LCFI67:
 25988              		.cfi_def_cfa_offset 16
 25989 06fc 00AF     		add	r7, sp, #0
 25990              		.cfi_offset 7, -4
 25991              	.LCFI68:
 25992              		.cfi_def_cfa_register 7
 25993 06fe 7860     		str	r0, [r7, #4]
 818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the selected I2C PEC value */
 821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return ((I2Cx->SR2) >> 8);
 25994              		.loc 1 821 0
 25995 0700 7B68     		ldr	r3, [r7, #4]
 25996 0702 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 25997 0704 9BB2     		uxth	r3, r3
 25998 0706 4FEA1323 		lsr	r3, r3, #8
 25999 070a 9BB2     		uxth	r3, r3
 26000 070c DBB2     		uxtb	r3, r3
 822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 26001              		.loc 1 822 0
 26002 070e 1846     		mov	r0, r3
 26003 0710 07F10C07 		add	r7, r7, #12
 26004 0714 BD46     		mov	sp, r7
 26005 0716 80BC     		pop	{r7}
 26006 0718 7047     		bx	lr
 26007              		.cfi_endproc
 26008              	.LFE132:
 26010 071a 00BF     		.align	2
 26011              		.global	I2C_DMACmd
 26012              		.thumb
 26013              		.thumb_func
 26015              	I2C_DMACmd:
 26016              	.LFB133:
 823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group4 DMA transfers management functions
 829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   DMA transfers management functions 
 830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                          DMA transfers management functions
 834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This section provides functions allowing to configure the I2C DMA channels 
 836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   requests.
 837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
 838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C DMA requests.
 844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C DMA transfer.
 846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 26017              		.loc 1 850 0
 26018              		.cfi_startproc
 26019              		@ args = 0, pretend = 0, frame = 8
 26020              		@ frame_needed = 1, uses_anonymous_args = 0
 26021              		@ link register save eliminated.
 26022 071c 80B4     		push	{r7}
 26023              	.LCFI69:
 26024              		.cfi_def_cfa_offset 4
 26025 071e 83B0     		sub	sp, sp, #12
 26026              	.LCFI70:
 26027              		.cfi_def_cfa_offset 16
 26028 0720 00AF     		add	r7, sp, #0
 26029              		.cfi_offset 7, -4
 26030              	.LCFI71:
 26031              		.cfi_def_cfa_register 7
 26032 0722 7860     		str	r0, [r7, #4]
 26033 0724 0B46     		mov	r3, r1
 26034 0726 FB70     		strb	r3, [r7, #3]
 851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 26035              		.loc 1 854 0
 26036 0728 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26037 072a 002B     		cmp	r3, #0
 26038 072c 08D0     		beq	.L70
 855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C DMA requests */
 857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_DMAEN;
 26039              		.loc 1 857 0
 26040 072e 7B68     		ldr	r3, [r7, #4]
 26041 0730 9B88     		ldrh	r3, [r3, #4]	@ movhi
 26042 0732 9BB2     		uxth	r3, r3
 26043 0734 43F40063 		orr	r3, r3, #2048
 26044 0738 9AB2     		uxth	r2, r3
 26045 073a 7B68     		ldr	r3, [r7, #4]
 26046 073c 9A80     		strh	r2, [r3, #4]	@ movhi
 26047 073e 07E0     		b	.L69
 26048              	.L70:
 858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C DMA requests */
 862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 26049              		.loc 1 862 0
 26050 0740 7B68     		ldr	r3, [r7, #4]
 26051 0742 9B88     		ldrh	r3, [r3, #4]	@ movhi
 26052 0744 9BB2     		uxth	r3, r3
 26053 0746 23F40063 		bic	r3, r3, #2048
 26054 074a 9AB2     		uxth	r2, r3
 26055 074c 7B68     		ldr	r3, [r7, #4]
 26056 074e 9A80     		strh	r2, [r3, #4]	@ movhi
 26057              	.L69:
 863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 26058              		.loc 1 864 0
 26059 0750 07F10C07 		add	r7, r7, #12
 26060 0754 BD46     		mov	sp, r7
 26061 0756 80BC     		pop	{r7}
 26062 0758 7047     		bx	lr
 26063              		.cfi_endproc
 26064              	.LFE133:
 26066 075a 00BF     		.align	2
 26067              		.global	I2C_DMALastTransferCmd
 26068              		.thumb
 26069              		.thumb_func
 26071              	I2C_DMALastTransferCmd:
 26072              	.LFB134:
 865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Specifies that the next DMA transfer is the last one.
 868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C DMA last transfer.
 870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 26073              		.loc 1 874 0
 26074              		.cfi_startproc
 26075              		@ args = 0, pretend = 0, frame = 8
 26076              		@ frame_needed = 1, uses_anonymous_args = 0
 26077              		@ link register save eliminated.
 26078 075c 80B4     		push	{r7}
 26079              	.LCFI72:
 26080              		.cfi_def_cfa_offset 4
 26081 075e 83B0     		sub	sp, sp, #12
 26082              	.LCFI73:
 26083              		.cfi_def_cfa_offset 16
 26084 0760 00AF     		add	r7, sp, #0
 26085              		.cfi_offset 7, -4
 26086              	.LCFI74:
 26087              		.cfi_def_cfa_register 7
 26088 0762 7860     		str	r0, [r7, #4]
 26089 0764 0B46     		mov	r3, r1
 26090 0766 FB70     		strb	r3, [r7, #3]
 875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 26091              		.loc 1 878 0
 26092 0768 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26093 076a 002B     		cmp	r3, #0
 26094 076c 08D0     		beq	.L73
 879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next DMA transfer is the last transfer */
 881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_LAST;
 26095              		.loc 1 881 0
 26096 076e 7B68     		ldr	r3, [r7, #4]
 26097 0770 9B88     		ldrh	r3, [r3, #4]	@ movhi
 26098 0772 9BB2     		uxth	r3, r3
 26099 0774 43F48053 		orr	r3, r3, #4096
 26100 0778 9AB2     		uxth	r2, r3
 26101 077a 7B68     		ldr	r3, [r7, #4]
 26102 077c 9A80     		strh	r2, [r3, #4]	@ movhi
 26103 077e 07E0     		b	.L72
 26104              	.L73:
 882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next DMA transfer is not the last transfer */
 886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 26105              		.loc 1 886 0
 26106 0780 7B68     		ldr	r3, [r7, #4]
 26107 0782 9B88     		ldrh	r3, [r3, #4]	@ movhi
 26108 0784 9BB2     		uxth	r3, r3
 26109 0786 23F48053 		bic	r3, r3, #4096
 26110 078a 9AB2     		uxth	r2, r3
 26111 078c 7B68     		ldr	r3, [r7, #4]
 26112 078e 9A80     		strh	r2, [r3, #4]	@ movhi
 26113              	.L72:
 887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 26114              		.loc 1 888 0
 26115 0790 07F10C07 		add	r7, r7, #12
 26116 0794 BD46     		mov	sp, r7
 26117 0796 80BC     		pop	{r7}
 26118 0798 7047     		bx	lr
 26119              		.cfi_endproc
 26120              	.LFE134:
 26122 079a 00BF     		.align	2
 26123              		.global	I2C_ReadRegister
 26124              		.thumb
 26125              		.thumb_func
 26127              	I2C_ReadRegister:
 26128              	.LFB135:
 889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group5 Interrupts events and flags management functions
 895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Interrupts, events and flags management functions
 896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                 Interrupts, events and flags management functions
 900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This section provides functions allowing to configure the I2C Interrupts 
 902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   sources and check or clear the flags or pending bits status.
 903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   The user should identify which mode will be used in his application to manage 
 904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
 905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           I2C State Monitoring Functions                    
 908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================   
 909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This I2C driver provides three different ways for I2C state monitoring
 910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   depending on the application requirements and constraints:
 911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          
 912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    
 913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      1. Basic state monitoring (Using I2C_CheckEvent() function)
 914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -----------------------------------------------------------
 915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         It compares the status registers (SR1 and SR2) content to a given event
 916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         (can be the combination of one or more flags).
 917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         It returns SUCCESS if the current status includes the given flags 
 918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         and returns ERROR if one or more flags are missing in the current status.
 919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function is suitable for most applications as well as for startup 
 922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                activity since the events are fully described in the product reference 
 923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                manual (RM0090).
 924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - It is also suitable for users who need to define their own events.
 925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations
 927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - If an error occurs (ie. error flags are set besides to the monitored 
 928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                flags), the I2C_CheckEvent() function may return SUCCESS despite 
 929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the communication hold or corrupted real state. 
 930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                In this case, it is advised to use error interrupts to monitor 
 931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the error events and handle them in the interrupt IRQ handler.
 932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          
 933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      @note 
 934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          For error management, it is advised to use the following functions:
 935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_ITConfig() to configure and enable the error interrupts (I2C_IT_ERR).
 936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2Cx_ER_IRQHandler() which is called when the error interrupt occurs.
 937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              Where x is the peripheral instance (I2C1, I2C2 ...)
 938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_GetFlagStatus() or I2C_GetITStatus()  to be called into the 
 939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              I2Cx_ER_IRQHandler() function in order to determine which error occurred.
 940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_ClearFlag() or I2C_ClearITPendingBit() and/or I2C_SoftwareResetCmd() 
 941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              and/or I2C_GenerateStop() in order to clear the error flag and source 
 942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              and return to correct  communication status.
 943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              
 944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      2. Advanced state monitoring (Using the function I2C_GetLastEvent())
 946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -------------------------------------------------------------------- 
 947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         Using the function I2C_GetLastEvent() which returns the image of both status 
 948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         registers in a single word (uint32_t) (Status Register 2 value is shifted left 
 949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         by 16 bits and concatenated to Status Register 1).
 950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function is suitable for the same applications above but it 
 953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                allows to overcome the mentioned limitation of I2C_GetFlagStatus() 
 954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                function.
 955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - The returned value could be compared to events already defined in 
 956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the library (stm32f4xx_i2c.h) or to custom values defined by user.
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                This function is suitable when multiple flags are monitored at the 
 958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                same time.
 959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - At the opposite of I2C_CheckEvent() function, this function allows 
 960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                user to choose when an event is accepted (when all events flags are 
 961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                set and no other flags are set or just when the needed flags are set 
 962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                like I2C_CheckEvent() function.
 963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations
 965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - User may need to define his own events.
 966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - Same remark concerning the error management is applicable for this 
 967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                function if user decides to check only regular communication flags 
 968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                (and ignores error flags).
 969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       
 970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      3. Flag-based state monitoring (Using the function I2C_GetFlagStatus())
 972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -----------------------------------------------------------------------
 973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      
 974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       Using the function I2C_GetFlagStatus() which simply returns the status of 
 975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       one single flag (ie. I2C_FLAG_RXNE ...). 
 976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function could be used for specific applications or in debug 
 979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                phase.
 980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - It is suitable when only one flag checking is needed (most I2C 
 981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                events are monitored through multiple flags).
 982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations: 
 983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - When calling this function, the Status register is accessed. 
 984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                Some flags are cleared when the status register is accessed. 
 985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                So checking the status of one Flag, may clear other ones.
 986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - Function may need to be called twice or more in order to monitor 
 987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                one single event.
 988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    For detailed description of Events, please refer to section I2C_Events in 
 990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    stm32f4xx_i2c.h file.
 991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****        
 992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    
 996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Reads the specified I2C register and returns its value.
 998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_Register: specifies the register to read.
 999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CR1:  CR1 register.
1001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CR2:   CR2 register.
1002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_OAR1:  OAR1 register.
1003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_OAR2:  OAR2 register.
1004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_DR:    DR register.
1005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_SR1:   SR1 register.
1006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_SR2:   SR2 register.
1007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CCR:   CCR register.
1008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_TRISE: TRISE register.
1009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The value of the read register.
1010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
1012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 26129              		.loc 1 1012 0
 26130              		.cfi_startproc
 26131              		@ args = 0, pretend = 0, frame = 16
 26132              		@ frame_needed = 1, uses_anonymous_args = 0
 26133              		@ link register save eliminated.
 26134 079c 80B4     		push	{r7}
 26135              	.LCFI75:
 26136              		.cfi_def_cfa_offset 4
 26137 079e 85B0     		sub	sp, sp, #20
 26138              	.LCFI76:
 26139              		.cfi_def_cfa_offset 24
 26140 07a0 00AF     		add	r7, sp, #0
 26141              		.cfi_offset 7, -4
 26142              	.LCFI77:
 26143              		.cfi_def_cfa_register 7
 26144 07a2 7860     		str	r0, [r7, #4]
 26145 07a4 0B46     		mov	r3, r1
 26146 07a6 FB70     		strb	r3, [r7, #3]
1013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   __IO uint32_t tmp = 0;
 26147              		.loc 1 1013 0
 26148 07a8 4FF00003 		mov	r3, #0
 26149 07ac FB60     		str	r3, [r7, #12]
1014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_REGISTER(I2C_Register));
1018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmp = (uint32_t) I2Cx;
 26150              		.loc 1 1019 0
 26151 07ae 7B68     		ldr	r3, [r7, #4]
 26152 07b0 FB60     		str	r3, [r7, #12]
1020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmp += I2C_Register;
 26153              		.loc 1 1020 0
 26154 07b2 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 26155 07b4 FB68     		ldr	r3, [r7, #12]
 26156 07b6 D318     		adds	r3, r2, r3
 26157 07b8 FB60     		str	r3, [r7, #12]
1021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the selected register value */
1023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return (*(__IO uint16_t *) tmp);
 26158              		.loc 1 1023 0
 26159 07ba FB68     		ldr	r3, [r7, #12]
 26160 07bc 1B88     		ldrh	r3, [r3, #0]	@ movhi
 26161 07be 9BB2     		uxth	r3, r3
1024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 26162              		.loc 1 1024 0
 26163 07c0 1846     		mov	r0, r3
 26164 07c2 07F11407 		add	r7, r7, #20
 26165 07c6 BD46     		mov	sp, r7
 26166 07c8 80BC     		pop	{r7}
 26167 07ca 7047     		bx	lr
 26168              		.cfi_endproc
 26169              	.LFE135:
 26171              		.align	2
 26172              		.global	I2C_ITConfig
 26173              		.thumb
 26174              		.thumb_func
 26176              	I2C_ITConfig:
 26177              	.LFB136:
1025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C interrupts.
1028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the I2C interrupts sources to be enabled or disabled. 
1030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BUF: Buffer interrupt mask
1032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_EVT: Event interrupt mask
1033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ERR: Error interrupt mask
1034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the specified I2C interrupts.
1035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
1036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
1039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 26178              		.loc 1 1039 0
 26179              		.cfi_startproc
 26180              		@ args = 0, pretend = 0, frame = 8
 26181              		@ frame_needed = 1, uses_anonymous_args = 0
 26182              		@ link register save eliminated.
 26183 07cc 80B4     		push	{r7}
 26184              	.LCFI78:
 26185              		.cfi_def_cfa_offset 4
 26186 07ce 83B0     		sub	sp, sp, #12
 26187              	.LCFI79:
 26188              		.cfi_def_cfa_offset 16
 26189 07d0 00AF     		add	r7, sp, #0
 26190              		.cfi_offset 7, -4
 26191              	.LCFI80:
 26192              		.cfi_def_cfa_register 7
 26193 07d2 7860     		str	r0, [r7, #4]
 26194 07d4 1346     		mov	r3, r2
 26195 07d6 0A46     		mov	r2, r1	@ movhi
 26196 07d8 7A80     		strh	r2, [r7, #2]	@ movhi
 26197 07da 7B70     		strb	r3, [r7, #1]
1040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CONFIG_IT(I2C_IT));
1044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 26198              		.loc 1 1045 0
 26199 07dc 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 26200 07de 002B     		cmp	r3, #0
 26201 07e0 09D0     		beq	.L77
1046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C interrupts */
1048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_IT;
 26202              		.loc 1 1048 0
 26203 07e2 7B68     		ldr	r3, [r7, #4]
 26204 07e4 9B88     		ldrh	r3, [r3, #4]	@ movhi
 26205 07e6 9AB2     		uxth	r2, r3
 26206 07e8 7B88     		ldrh	r3, [r7, #2]	@ movhi
 26207 07ea 42EA0303 		orr	r3, r2, r3
 26208 07ee 9AB2     		uxth	r2, r3
 26209 07f0 7B68     		ldr	r3, [r7, #4]
 26210 07f2 9A80     		strh	r2, [r3, #4]	@ movhi
 26211 07f4 0BE0     		b	.L76
 26212              	.L77:
1049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C interrupts */
1053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~I2C_IT;
 26213              		.loc 1 1053 0
 26214 07f6 7B68     		ldr	r3, [r7, #4]
 26215 07f8 9B88     		ldrh	r3, [r3, #4]	@ movhi
 26216 07fa 9AB2     		uxth	r2, r3
 26217 07fc 7B88     		ldrh	r3, [r7, #2]	@ movhi
 26218 07fe 6FEA0303 		mvn	r3, r3
 26219 0802 9BB2     		uxth	r3, r3
 26220 0804 02EA0303 		and	r3, r2, r3
 26221 0808 9AB2     		uxth	r2, r3
 26222 080a 7B68     		ldr	r3, [r7, #4]
 26223 080c 9A80     		strh	r2, [r3, #4]	@ movhi
 26224              	.L76:
1054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 26225              		.loc 1 1055 0
 26226 080e 07F10C07 		add	r7, r7, #12
 26227 0812 BD46     		mov	sp, r7
 26228 0814 80BC     		pop	{r7}
 26229 0816 7047     		bx	lr
 26230              		.cfi_endproc
 26231              	.LFE136:
 26233              		.align	2
 26234              		.global	I2C_CheckEvent
 26235              		.thumb
 26236              		.thumb_func
 26238              	I2C_CheckEvent:
 26239              	.LFB137:
1056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           1. Basic state monitoring                    
1060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the last I2Cx Event is equal to the one passed
1065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         as parameter.
1066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_EVENT: specifies the event to be checked. 
1068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED: EV1
1070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED: EV1
1071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED: EV1
1072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED: EV1
1073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED: EV1
1074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_RECEIVED: EV2
1075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_DUALF): EV2
1076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_GENCALL): EV2
1077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_TRANSMITTED: EV3
1078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_DUALF): EV3
1079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_GENCALL): EV3
1080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_ACK_FAILURE: EV3_2
1081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_STOP_DETECTED: EV4
1082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_SELECT: EV5
1083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED: EV6     
1084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED: EV6
1085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_RECEIVED: EV7
1086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTING: EV8
1087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTED: EV8_2
1088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_ADDRESS10: EV9
1089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *     
1090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         in stm32f4xx_i2c.h file.
1092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
1093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval An ErrorStatus enumeration value:
1094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - SUCCESS: Last event is equal to the I2C_EVENT
1095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - ERROR: Last event is different from the I2C_EVENT
1096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
1098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 26240              		.loc 1 1098 0
 26241              		.cfi_startproc
 26242              		@ args = 0, pretend = 0, frame = 24
 26243              		@ frame_needed = 1, uses_anonymous_args = 0
 26244              		@ link register save eliminated.
 26245 0818 80B4     		push	{r7}
 26246              	.LCFI81:
 26247              		.cfi_def_cfa_offset 4
 26248 081a 87B0     		sub	sp, sp, #28
 26249              	.LCFI82:
 26250              		.cfi_def_cfa_offset 32
 26251 081c 00AF     		add	r7, sp, #0
 26252              		.cfi_offset 7, -4
 26253              	.LCFI83:
 26254              		.cfi_def_cfa_register 7
 26255 081e 7860     		str	r0, [r7, #4]
 26256 0820 3960     		str	r1, [r7, #0]
1099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t lastevent = 0;
 26257              		.loc 1 1099 0
 26258 0822 4FF00003 		mov	r3, #0
 26259 0826 3B61     		str	r3, [r7, #16]
1100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
 26260              		.loc 1 1100 0
 26261 0828 4FF00003 		mov	r3, #0
 26262 082c FB60     		str	r3, [r7, #12]
 26263 082e 4FF00003 		mov	r3, #0
 26264 0832 BB60     		str	r3, [r7, #8]
1101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ErrorStatus status = ERROR;
 26265              		.loc 1 1101 0
 26266 0834 4FF00003 		mov	r3, #0
 26267 0838 FB75     		strb	r3, [r7, #23]
1102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_EVENT(I2C_EVENT));
1106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read the I2Cx status register */
1108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 26268              		.loc 1 1108 0
 26269 083a 7B68     		ldr	r3, [r7, #4]
 26270 083c 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 26271 083e 9BB2     		uxth	r3, r3
 26272 0840 FB60     		str	r3, [r7, #12]
1109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = I2Cx->SR2;
 26273              		.loc 1 1109 0
 26274 0842 7B68     		ldr	r3, [r7, #4]
 26275 0844 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 26276 0846 9BB2     		uxth	r3, r3
 26277 0848 BB60     		str	r3, [r7, #8]
1110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = flag2 << 16;
 26278              		.loc 1 1110 0
 26279 084a BB68     		ldr	r3, [r7, #8]
 26280 084c 4FEA0343 		lsl	r3, r3, #16
 26281 0850 BB60     		str	r3, [r7, #8]
1111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the last event value from I2C status register */
1113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 26282              		.loc 1 1113 0
 26283 0852 FA68     		ldr	r2, [r7, #12]
 26284 0854 BB68     		ldr	r3, [r7, #8]
 26285 0856 42EA0303 		orr	r3, r2, r3
 26286 085a 23F07F43 		bic	r3, r3, #-16777216
 26287 085e 3B61     		str	r3, [r7, #16]
1114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check whether the last event contains the I2C_EVENT */
1116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if ((lastevent & I2C_EVENT) == I2C_EVENT)
 26288              		.loc 1 1116 0
 26289 0860 3A69     		ldr	r2, [r7, #16]
 26290 0862 3B68     		ldr	r3, [r7, #0]
 26291 0864 1A40     		ands	r2, r2, r3
 26292 0866 3B68     		ldr	r3, [r7, #0]
 26293 0868 9A42     		cmp	r2, r3
 26294 086a 03D1     		bne	.L80
1117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* SUCCESS: last event is equal to I2C_EVENT */
1119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     status = SUCCESS;
 26295              		.loc 1 1119 0
 26296 086c 4FF00103 		mov	r3, #1
 26297 0870 FB75     		strb	r3, [r7, #23]
 26298 0872 02E0     		b	.L81
 26299              	.L80:
1120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* ERROR: last event is different from I2C_EVENT */
1124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     status = ERROR;
 26300              		.loc 1 1124 0
 26301 0874 4FF00003 		mov	r3, #0
 26302 0878 FB75     		strb	r3, [r7, #23]
 26303              	.L81:
1125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return status */
1127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return status;
 26304              		.loc 1 1127 0
 26305 087a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 26306              		.loc 1 1128 0
 26307 087c 1846     		mov	r0, r3
 26308 087e 07F11C07 		add	r7, r7, #28
 26309 0882 BD46     		mov	sp, r7
 26310 0884 80BC     		pop	{r7}
 26311 0886 7047     		bx	lr
 26312              		.cfi_endproc
 26313              	.LFE137:
 26315              		.align	2
 26316              		.global	I2C_GetLastEvent
 26317              		.thumb
 26318              		.thumb_func
 26320              	I2C_GetLastEvent:
 26321              	.LFB138:
1129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           2. Advanced state monitoring                   
1133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the last I2Cx Event.
1138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *     
1140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         in stm32f4xx_i2c.h file.
1142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
1143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The last event
1144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
1146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 26322              		.loc 1 1146 0
 26323              		.cfi_startproc
 26324              		@ args = 0, pretend = 0, frame = 24
 26325              		@ frame_needed = 1, uses_anonymous_args = 0
 26326              		@ link register save eliminated.
 26327 0888 80B4     		push	{r7}
 26328              	.LCFI84:
 26329              		.cfi_def_cfa_offset 4
 26330 088a 87B0     		sub	sp, sp, #28
 26331              	.LCFI85:
 26332              		.cfi_def_cfa_offset 32
 26333 088c 00AF     		add	r7, sp, #0
 26334              		.cfi_offset 7, -4
 26335              	.LCFI86:
 26336              		.cfi_def_cfa_register 7
 26337 088e 7860     		str	r0, [r7, #4]
1147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t lastevent = 0;
 26338              		.loc 1 1147 0
 26339 0890 4FF00003 		mov	r3, #0
 26340 0894 7B61     		str	r3, [r7, #20]
1148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
 26341              		.loc 1 1148 0
 26342 0896 4FF00003 		mov	r3, #0
 26343 089a 3B61     		str	r3, [r7, #16]
 26344 089c 4FF00003 		mov	r3, #0
 26345 08a0 FB60     		str	r3, [r7, #12]
1149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read the I2Cx status register */
1154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 26346              		.loc 1 1154 0
 26347 08a2 7B68     		ldr	r3, [r7, #4]
 26348 08a4 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 26349 08a6 9BB2     		uxth	r3, r3
 26350 08a8 3B61     		str	r3, [r7, #16]
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = I2Cx->SR2;
 26351              		.loc 1 1155 0
 26352 08aa 7B68     		ldr	r3, [r7, #4]
 26353 08ac 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 26354 08ae 9BB2     		uxth	r3, r3
 26355 08b0 FB60     		str	r3, [r7, #12]
1156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = flag2 << 16;
 26356              		.loc 1 1156 0
 26357 08b2 FB68     		ldr	r3, [r7, #12]
 26358 08b4 4FEA0343 		lsl	r3, r3, #16
 26359 08b8 FB60     		str	r3, [r7, #12]
1157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the last event value from I2C status register */
1159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 26360              		.loc 1 1159 0
 26361 08ba 3A69     		ldr	r2, [r7, #16]
 26362 08bc FB68     		ldr	r3, [r7, #12]
 26363 08be 42EA0303 		orr	r3, r2, r3
 26364 08c2 23F07F43 		bic	r3, r3, #-16777216
 26365 08c6 7B61     		str	r3, [r7, #20]
1160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return status */
1162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return lastevent;
 26366              		.loc 1 1162 0
 26367 08c8 7B69     		ldr	r3, [r7, #20]
1163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 26368              		.loc 1 1163 0
 26369 08ca 1846     		mov	r0, r3
 26370 08cc 07F11C07 		add	r7, r7, #28
 26371 08d0 BD46     		mov	sp, r7
 26372 08d2 80BC     		pop	{r7}
 26373 08d4 7047     		bx	lr
 26374              		.cfi_endproc
 26375              	.LFE138:
 26377 08d6 00BF     		.align	2
 26378              		.global	I2C_GetFlagStatus
 26379              		.thumb
 26380              		.thumb_func
 26382              	I2C_GetFlagStatus:
 26383              	.LFB139:
1164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           3. Flag-based state monitoring                   
1168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the specified I2C flag is set or not.
1173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to check. 
1175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_DUALF: Dual flag (Slave mode)
1177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBHOST: SMBus host header (Slave mode)
1178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBDEFAULT: SMBus default header (Slave mode)
1179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_GENCALL: General call header flag (Slave mode)
1180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TRA: Transmitter/Receiver flag
1181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BUSY: Bus busy flag
1182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_MSL: Master/Slave flag
1183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TXE: Data register empty flag (Transmitter)
1191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_RXNE: Data register not empty (Receiver) flag
1192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_STOPF: Stop detection flag (Slave mode)
1193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ADD10: 10-bit header sent flag (Master mode)
1194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BTF: Byte transfer finished flag
1195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ADDR: Address sent flag (Master mode) "ADSL"
1196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                Address matched flag (Slave mode)"ENDAD"
1197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
1198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The new state of I2C_FLAG (SET or RESET).
1199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 26384              		.loc 1 1201 0
 26385              		.cfi_startproc
 26386              		@ args = 0, pretend = 0, frame = 24
 26387              		@ frame_needed = 1, uses_anonymous_args = 0
 26388              		@ link register save eliminated.
 26389 08d8 80B4     		push	{r7}
 26390              	.LCFI87:
 26391              		.cfi_def_cfa_offset 4
 26392 08da 87B0     		sub	sp, sp, #28
 26393              	.LCFI88:
 26394              		.cfi_def_cfa_offset 32
 26395 08dc 00AF     		add	r7, sp, #0
 26396              		.cfi_offset 7, -4
 26397              	.LCFI89:
 26398              		.cfi_def_cfa_register 7
 26399 08de 7860     		str	r0, [r7, #4]
 26400 08e0 3960     		str	r1, [r7, #0]
1202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   FlagStatus bitstatus = RESET;
 26401              		.loc 1 1202 0
 26402 08e2 4FF00003 		mov	r3, #0
 26403 08e6 FB75     		strb	r3, [r7, #23]
1203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   __IO uint32_t i2creg = 0, i2cxbase = 0;
 26404              		.loc 1 1203 0
 26405 08e8 4FF00003 		mov	r3, #0
 26406 08ec 3B61     		str	r3, [r7, #16]
 26407 08ee 4FF00003 		mov	r3, #0
 26408 08f2 FB60     		str	r3, [r7, #12]
1204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
1208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx peripheral base address */
1210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   i2cxbase = (uint32_t)I2Cx;
 26409              		.loc 1 1210 0
 26410 08f4 7B68     		ldr	r3, [r7, #4]
 26411 08f6 FB60     		str	r3, [r7, #12]
1211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read flag register index */
1213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   i2creg = I2C_FLAG >> 28;
 26412              		.loc 1 1213 0
 26413 08f8 3B68     		ldr	r3, [r7, #0]
 26414 08fa 4FEA1373 		lsr	r3, r3, #28
 26415 08fe 3B61     		str	r3, [r7, #16]
1214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get bit[23:0] of the flag */
1216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_FLAG &= FLAG_MASK;
 26416              		.loc 1 1216 0
 26417 0900 3B68     		ldr	r3, [r7, #0]
 26418 0902 23F07F43 		bic	r3, r3, #-16777216
 26419 0906 3B60     		str	r3, [r7, #0]
1217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if(i2creg != 0)
 26420              		.loc 1 1218 0
 26421 0908 3B69     		ldr	r3, [r7, #16]
 26422 090a 002B     		cmp	r3, #0
 26423 090c 04D0     		beq	.L84
1219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Get the I2Cx SR1 register address */
1221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     i2cxbase += 0x14;
 26424              		.loc 1 1221 0
 26425 090e FB68     		ldr	r3, [r7, #12]
 26426 0910 03F11403 		add	r3, r3, #20
 26427 0914 FB60     		str	r3, [r7, #12]
 26428 0916 07E0     		b	.L85
 26429              	.L84:
1222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Flag in I2Cx SR2 Register */
1226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 26430              		.loc 1 1226 0
 26431 0918 3B68     		ldr	r3, [r7, #0]
 26432 091a 4FEA1343 		lsr	r3, r3, #16
 26433 091e 3B60     		str	r3, [r7, #0]
1227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Get the I2Cx SR2 register address */
1228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     i2cxbase += 0x18;
 26434              		.loc 1 1228 0
 26435 0920 FB68     		ldr	r3, [r7, #12]
 26436 0922 03F11803 		add	r3, r3, #24
 26437 0926 FB60     		str	r3, [r7, #12]
 26438              	.L85:
1229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 26439              		.loc 1 1231 0
 26440 0928 FB68     		ldr	r3, [r7, #12]
 26441 092a 1A68     		ldr	r2, [r3, #0]
 26442 092c 3B68     		ldr	r3, [r7, #0]
 26443 092e 02EA0303 		and	r3, r2, r3
 26444 0932 002B     		cmp	r3, #0
 26445 0934 03D0     		beq	.L86
1232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_FLAG is set */
1234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = SET;
 26446              		.loc 1 1234 0
 26447 0936 4FF00103 		mov	r3, #1
 26448 093a FB75     		strb	r3, [r7, #23]
 26449 093c 02E0     		b	.L87
 26450              	.L86:
1235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_FLAG is reset */
1239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = RESET;
 26451              		.loc 1 1239 0
 26452 093e 4FF00003 		mov	r3, #0
 26453 0942 FB75     		strb	r3, [r7, #23]
 26454              	.L87:
1240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the I2C_FLAG status */
1243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return  bitstatus;
 26455              		.loc 1 1243 0
 26456 0944 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 26457              		.loc 1 1244 0
 26458 0946 1846     		mov	r0, r3
 26459 0948 07F11C07 		add	r7, r7, #28
 26460 094c BD46     		mov	sp, r7
 26461 094e 80BC     		pop	{r7}
 26462 0950 7047     		bx	lr
 26463              		.cfi_endproc
 26464              	.LFE139:
 26466 0952 00BF     		.align	2
 26467              		.global	I2C_ClearFlag
 26468              		.thumb
 26469              		.thumb_func
 26471              	I2C_ClearFlag:
 26472              	.LFB140:
1245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Clears the I2Cx's pending flags.
1248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to clear. 
1250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *   
1259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetFlagStatus()) followed by a write operation 
1261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetFlagStatus()) followed by writing the 
1264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          second byte of the address in DR register.
1265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetFlagStatus()) followed by a 
1267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetFlagStatus()) followed by a read operation to 
1270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   SB (Start Bit) is cleared software sequence: a read operation to I2C_SR1
1272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          register (I2C_GetFlagStatus()) followed by a write operation to I2C_DR
1273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          register (I2C_SendData()).
1274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  
1275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 26473              		.loc 1 1278 0
 26474              		.cfi_startproc
 26475              		@ args = 0, pretend = 0, frame = 16
 26476              		@ frame_needed = 1, uses_anonymous_args = 0
 26477              		@ link register save eliminated.
 26478 0954 80B4     		push	{r7}
 26479              	.LCFI90:
 26480              		.cfi_def_cfa_offset 4
 26481 0956 85B0     		sub	sp, sp, #20
 26482              	.LCFI91:
 26483              		.cfi_def_cfa_offset 24
 26484 0958 00AF     		add	r7, sp, #0
 26485              		.cfi_offset 7, -4
 26486              	.LCFI92:
 26487              		.cfi_def_cfa_register 7
 26488 095a 7860     		str	r0, [r7, #4]
 26489 095c 3960     		str	r1, [r7, #0]
1279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flagpos = 0;
 26490              		.loc 1 1279 0
 26491 095e 4FF00003 		mov	r3, #0
 26492 0962 FB60     		str	r3, [r7, #12]
1280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
1283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2C flag position */
1284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flagpos = I2C_FLAG & FLAG_MASK;
 26493              		.loc 1 1284 0
 26494 0964 3B68     		ldr	r3, [r7, #0]
 26495 0966 23F07F43 		bic	r3, r3, #-16777216
 26496 096a FB60     		str	r3, [r7, #12]
1285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear the selected I2C flag */
1286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 26497              		.loc 1 1286 0
 26498 096c FB68     		ldr	r3, [r7, #12]
 26499 096e 9BB2     		uxth	r3, r3
 26500 0970 6FEA0303 		mvn	r3, r3
 26501 0974 9AB2     		uxth	r2, r3
 26502 0976 7B68     		ldr	r3, [r7, #4]
 26503 0978 9A82     		strh	r2, [r3, #20]	@ movhi
1287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 26504              		.loc 1 1287 0
 26505 097a 07F11407 		add	r7, r7, #20
 26506 097e BD46     		mov	sp, r7
 26507 0980 80BC     		pop	{r7}
 26508 0982 7047     		bx	lr
 26509              		.cfi_endproc
 26510              	.LFE140:
 26512              		.align	2
 26513              		.global	I2C_GetITStatus
 26514              		.thumb
 26515              		.thumb_func
 26517              	I2C_GetITStatus:
 26518              	.LFB141:
1288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the specified I2C interrupt has occurred or not.
1291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt source to check. 
1293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert flag
1295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error flag
1296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception flag
1297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun flag (Slave mode)
1298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure flag
1299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost flag (Master mode)
1300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error flag
1301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TXE: Data register empty flag (Transmitter)
1302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_RXNE: Data register not empty (Receiver) flag
1303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_STOPF: Stop detection flag (Slave mode)
1304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ADD10: 10-bit header sent flag (Master mode)
1305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BTF: Byte transfer finished flag
1306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
1307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                              Address matched flag (Slave mode)"ENDAD"
1308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SB: Start bit flag (Master mode)
1309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The new state of I2C_IT (SET or RESET).
1310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 26519              		.loc 1 1312 0
 26520              		.cfi_startproc
 26521              		@ args = 0, pretend = 0, frame = 16
 26522              		@ frame_needed = 1, uses_anonymous_args = 0
 26523              		@ link register save eliminated.
 26524 0984 80B4     		push	{r7}
 26525              	.LCFI93:
 26526              		.cfi_def_cfa_offset 4
 26527 0986 85B0     		sub	sp, sp, #20
 26528              	.LCFI94:
 26529              		.cfi_def_cfa_offset 24
 26530 0988 00AF     		add	r7, sp, #0
 26531              		.cfi_offset 7, -4
 26532              	.LCFI95:
 26533              		.cfi_def_cfa_register 7
 26534 098a 7860     		str	r0, [r7, #4]
 26535 098c 3960     		str	r1, [r7, #0]
1313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ITStatus bitstatus = RESET;
 26536              		.loc 1 1313 0
 26537 098e 4FF00003 		mov	r3, #0
 26538 0992 FB73     		strb	r3, [r7, #15]
1314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t enablestatus = 0;
 26539              		.loc 1 1314 0
 26540 0994 4FF00003 		mov	r3, #0
 26541 0998 BB60     		str	r3, [r7, #8]
1315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_GET_IT(I2C_IT));
1319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check if the interrupt source is enabled or not */
1321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 26542              		.loc 1 1321 0
 26543 099a 3B68     		ldr	r3, [r7, #0]
 26544 099c 03F0E063 		and	r3, r3, #117440512
 26545 09a0 4FEA1342 		lsr	r2, r3, #16
 26546 09a4 7B68     		ldr	r3, [r7, #4]
 26547 09a6 9B88     		ldrh	r3, [r3, #4]	@ movhi
 26548 09a8 9BB2     		uxth	r3, r3
 26549 09aa 02EA0303 		and	r3, r2, r3
 26550 09ae BB60     		str	r3, [r7, #8]
1322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get bit[23:0] of the flag */
1324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_IT &= FLAG_MASK;
 26551              		.loc 1 1324 0
 26552 09b0 3B68     		ldr	r3, [r7, #0]
 26553 09b2 23F07F43 		bic	r3, r3, #-16777216
 26554 09b6 3B60     		str	r3, [r7, #0]
1325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the status of the specified I2C flag */
1327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 26555              		.loc 1 1327 0
 26556 09b8 7B68     		ldr	r3, [r7, #4]
 26557 09ba 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 26558 09bc 9BB2     		uxth	r3, r3
 26559 09be 1A46     		mov	r2, r3
 26560 09c0 3B68     		ldr	r3, [r7, #0]
 26561 09c2 02EA0303 		and	r3, r2, r3
 26562 09c6 002B     		cmp	r3, #0
 26563 09c8 06D0     		beq	.L90
 26564              		.loc 1 1327 0 is_stmt 0 discriminator 1
 26565 09ca BB68     		ldr	r3, [r7, #8]
 26566 09cc 002B     		cmp	r3, #0
 26567 09ce 03D0     		beq	.L90
1328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_IT is set */
1330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = SET;
 26568              		.loc 1 1330 0 is_stmt 1
 26569 09d0 4FF00103 		mov	r3, #1
 26570 09d4 FB73     		strb	r3, [r7, #15]
 26571 09d6 02E0     		b	.L91
 26572              	.L90:
1331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_IT is reset */
1335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = RESET;
 26573              		.loc 1 1335 0
 26574 09d8 4FF00003 		mov	r3, #0
 26575 09dc FB73     		strb	r3, [r7, #15]
 26576              	.L91:
1336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the I2C_IT status */
1338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return  bitstatus;
 26577              		.loc 1 1338 0
 26578 09de FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 26579              		.loc 1 1339 0
 26580 09e0 1846     		mov	r0, r3
 26581 09e2 07F11407 		add	r7, r7, #20
 26582 09e6 BD46     		mov	sp, r7
 26583 09e8 80BC     		pop	{r7}
 26584 09ea 7047     		bx	lr
 26585              		.cfi_endproc
 26586              	.LFE141:
 26588              		.align	2
 26589              		.global	I2C_ClearITPendingBit
 26590              		.thumb
 26591              		.thumb_func
 26593              	I2C_ClearITPendingBit:
 26594              	.LFB142:
1340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Clears the I2Cx's interrupt pending bits.
1343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt pending bit to clear. 
1345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert interrupt
1347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error interrupt
1348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception  interrupt
1349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun interrupt (Slave mode)
1350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure interrupt
1351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost interrupt (Master mode)
1352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error interrupt
1353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
1354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetITStatus()) followed by writing the second 
1359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          byte of the address in I2C_DR register.
1360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetITStatus()) followed by a 
1362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a read operation to 
1365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   SB (Start Bit) is cleared by software sequence: a read operation to 
1367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_DR register (I2C_SendData()).
1369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 26595              		.loc 1 1372 0
 26596              		.cfi_startproc
 26597              		@ args = 0, pretend = 0, frame = 16
 26598              		@ frame_needed = 1, uses_anonymous_args = 0
 26599              		@ link register save eliminated.
 26600 09ec 80B4     		push	{r7}
 26601              	.LCFI96:
 26602              		.cfi_def_cfa_offset 4
 26603 09ee 85B0     		sub	sp, sp, #20
 26604              	.LCFI97:
 26605              		.cfi_def_cfa_offset 24
 26606 09f0 00AF     		add	r7, sp, #0
 26607              		.cfi_offset 7, -4
 26608              	.LCFI98:
 26609              		.cfi_def_cfa_register 7
 26610 09f2 7860     		str	r0, [r7, #4]
 26611 09f4 3960     		str	r1, [r7, #0]
1373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flagpos = 0;
 26612              		.loc 1 1373 0
 26613 09f6 4FF00003 		mov	r3, #0
 26614 09fa FB60     		str	r3, [r7, #12]
1374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLEAR_IT(I2C_IT));
1377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2C flag position */
1379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flagpos = I2C_IT & FLAG_MASK;
 26615              		.loc 1 1379 0
 26616 09fc 3B68     		ldr	r3, [r7, #0]
 26617 09fe 23F07F43 		bic	r3, r3, #-16777216
 26618 0a02 FB60     		str	r3, [r7, #12]
1380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear the selected I2C flag */
1382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 26619              		.loc 1 1382 0
 26620 0a04 FB68     		ldr	r3, [r7, #12]
 26621 0a06 9BB2     		uxth	r3, r3
 26622 0a08 6FEA0303 		mvn	r3, r3
 26623 0a0c 9AB2     		uxth	r2, r3
 26624 0a0e 7B68     		ldr	r3, [r7, #4]
 26625 0a10 9A82     		strh	r2, [r3, #20]	@ movhi
1383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 26626              		.loc 1 1383 0
 26627 0a12 07F11407 		add	r7, r7, #20
 26628 0a16 BD46     		mov	sp, r7
 26629 0a18 80BC     		pop	{r7}
 26630 0a1a 7047     		bx	lr
 26631              		.cfi_endproc
 26632              	.LFE142:
 26634              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_i2c.c
     /tmp/cc6kswq8.s:24572  .text:00000000 $t
     /tmp/cc6kswq8.s:24577  .text:00000000 I2C_DeInit
     /tmp/cc6kswq8.s:24646  .text:00000074 $d
     /tmp/cc6kswq8.s:24652  .text:00000080 $t
     /tmp/cc6kswq8.s:24657  .text:00000080 I2C_Init
     /tmp/cc6kswq8.s:24880  .text:00000220 $d
     /tmp/cc6kswq8.s:24887  .text:00000230 $t
     /tmp/cc6kswq8.s:24892  .text:00000230 I2C_StructInit
     /tmp/cc6kswq8.s:24947  .text:00000274 I2C_Cmd
     /tmp/cc6kswq8.s:25003  .text:000002b4 I2C_GenerateSTART
     /tmp/cc6kswq8.s:25059  .text:000002f4 I2C_GenerateSTOP
     /tmp/cc6kswq8.s:25115  .text:00000334 I2C_Send7bitAddress
     /tmp/cc6kswq8.s:25170  .text:00000370 I2C_AcknowledgeConfig
     /tmp/cc6kswq8.s:25226  .text:000003b0 I2C_OwnAddress2Config
     /tmp/cc6kswq8.s:25283  .text:000003f4 I2C_DualAddressCmd
     /tmp/cc6kswq8.s:25339  .text:00000434 I2C_GeneralCallCmd
     /tmp/cc6kswq8.s:25395  .text:00000474 I2C_SoftwareResetCmd
     /tmp/cc6kswq8.s:25453  .text:000004bc I2C_StretchClockCmd
     /tmp/cc6kswq8.s:25509  .text:000004fc I2C_FastModeDutyCycleConfig
     /tmp/cc6kswq8.s:25565  .text:0000053c I2C_NACKPositionConfig
     /tmp/cc6kswq8.s:25621  .text:0000057c I2C_SMBusAlertConfig
     /tmp/cc6kswq8.s:25677  .text:000005bc I2C_ARPCmd
     /tmp/cc6kswq8.s:25733  .text:000005fc I2C_SendData
     /tmp/cc6kswq8.s:25771  .text:0000061c I2C_ReceiveData
     /tmp/cc6kswq8.s:25808  .text:00000638 I2C_TransmitPEC
     /tmp/cc6kswq8.s:25864  .text:00000678 I2C_PECPositionConfig
     /tmp/cc6kswq8.s:25920  .text:000006b8 I2C_CalculatePEC
     /tmp/cc6kswq8.s:25976  .text:000006f8 I2C_GetPEC
     /tmp/cc6kswq8.s:26015  .text:0000071c I2C_DMACmd
     /tmp/cc6kswq8.s:26071  .text:0000075c I2C_DMALastTransferCmd
     /tmp/cc6kswq8.s:26127  .text:0000079c I2C_ReadRegister
     /tmp/cc6kswq8.s:26176  .text:000007cc I2C_ITConfig
     /tmp/cc6kswq8.s:26238  .text:00000818 I2C_CheckEvent
     /tmp/cc6kswq8.s:26320  .text:00000888 I2C_GetLastEvent
     /tmp/cc6kswq8.s:26382  .text:000008d8 I2C_GetFlagStatus
     /tmp/cc6kswq8.s:26471  .text:00000954 I2C_ClearFlag
     /tmp/cc6kswq8.s:26517  .text:00000984 I2C_GetITStatus
     /tmp/cc6kswq8.s:26593  .text:000009ec I2C_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
