   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f4xx_pwr.c"
  23              	.Ltext0:
  24              		.file 1 "../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c"
 24620              		.align	2
 24621              		.global	PWR_DeInit
 24622              		.thumb
 24623              		.thumb_func
 24625              	PWR_DeInit:
 24626              	.LFB110:
   1:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
   2:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
   3:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @file    stm32f4xx_pwr.c
   4:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @version V1.0.2
   6:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @date    05-March-2012
   7:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:           
   9:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Backup Domain Access
  10:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - PVD configuration
  11:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - WakeUp pin configuration
  12:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Main and Backup Regulators configuration
  13:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - FLASH Power Down configuration
  14:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Low Power modes configuration
  15:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Flags management
  16:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *               
  17:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
  18:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @attention
  19:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  20:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  21:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  22:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  23:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * You may not use this file except in compliance with the License.
  24:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * You may obtain a copy of the License at:
  25:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  26:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  27:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  28:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * Unless required by applicable law or agreed to in writing, software 
  29:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  30:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  31:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * See the License for the specific language governing permissions and
  32:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * limitations under the License.
  33:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  34:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
  35:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */ 
  36:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  37:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Includes ------------------------------------------------------------------*/
  38:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #include "stm32f4xx_pwr.h"
  39:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #include "stm32f4xx_rcc.h"
  40:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  41:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  42:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  43:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
  44:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  45:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR 
  46:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief PWR driver modules
  47:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  48:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */ 
  49:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  50:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  51:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private define ------------------------------------------------------------*/
  52:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --------- PWR registers bit address in the alias region ---------- */
  53:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PWR_OFFSET               (PWR_BASE - PERIPH_BASE)
  54:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  55:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --- CR Register ---*/
  56:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  57:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of DBP bit */
  58:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_OFFSET                (PWR_OFFSET + 0x00)
  59:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define DBP_BitNumber            0x08
  60:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
  61:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  62:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of PVDE bit */
  63:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PVDE_BitNumber           0x04
  64:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PVDE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PVDE_BitNumber * 4))
  65:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  66:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of FPDS bit */
  67:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define FPDS_BitNumber           0x09
  68:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_FPDS_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (FPDS_BitNumber * 4))
  69:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  70:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of PMODE bit */
  71:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PMODE_BitNumber           0x0E
  72:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PMODE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PMODE_BitNumber * 4))
  73:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  74:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  75:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --- CSR Register ---*/
  76:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  77:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of EWUP bit */
  78:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_OFFSET               (PWR_OFFSET + 0x04)
  79:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define EWUP_BitNumber           0x08
  80:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_EWUP_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP_BitNumber * 4))
  81:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  82:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of BRE bit */
  83:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define BRE_BitNumber            0x09
  84:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_BRE_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (BRE_BitNumber * 4))
  85:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  86:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* ------------------ PWR registers bit mask ------------------------ */
  87:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  88:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* CR register bit mask */
  89:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_DS_MASK               ((uint32_t)0xFFFFFFFC)
  90:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PLS_MASK              ((uint32_t)0xFFFFFF1F)
  91:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  92:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private macro -------------------------------------------------------------*/
  93:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private variables ---------------------------------------------------------*/
  94:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  95:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private functions ---------------------------------------------------------*/
  96:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  97:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Private_Functions
  98:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  99:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group1 Backup Domain Access function 
 102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Backup Domain Access function  
 103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                             Backup Domain Access function 
 107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   After reset, the backup domain (RTC registers, RTC backup data 
 110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   registers and backup SRAM) is protected against possible unwanted 
 111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   write accesses. 
 112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   To enable access to the RTC Domain and RTC registers, proceed as follows:
 113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Enable the Power Controller (PWR) APB1 interface clock using the
 114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       RCC_APB1PeriphClockCmd() function.
 115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
 116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
 123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  None
 124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_DeInit(void)
 127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 24627              		.loc 1 127 0
 24628              		.cfi_startproc
 24629              		@ args = 0, pretend = 0, frame = 0
 24630              		@ frame_needed = 1, uses_anonymous_args = 0
 24631 0000 80B5     		push	{r7, lr}
 24632              	.LCFI0:
 24633              		.cfi_def_cfa_offset 8
 24634 0002 00AF     		add	r7, sp, #0
 24635              		.cfi_offset 14, -4
 24636              		.cfi_offset 7, -8
 24637              	.LCFI1:
 24638              		.cfi_def_cfa_register 7
 128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 24639              		.loc 1 128 0
 24640 0004 4FF08050 		mov	r0, #268435456
 24641 0008 4FF00101 		mov	r1, #1
 24642 000c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 24643              		.loc 1 129 0
 24644 0010 4FF08050 		mov	r0, #268435456
 24645 0014 4FF00001 		mov	r1, #0
 24646 0018 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 24647              		.loc 1 130 0
 24648 001c 80BD     		pop	{r7, pc}
 24649              		.cfi_endproc
 24650              	.LFE110:
 24652 001e 00BF     		.align	2
 24653              		.global	PWR_BackupAccessCmd
 24654              		.thumb
 24655              		.thumb_func
 24657              	PWR_BackupAccessCmd:
 24658              	.LFB111:
 131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables access to the backup domain (RTC registers, RTC 
 134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         backup data registers and backup SRAM).
 135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         Backup Domain Access should be kept enabled.
 137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the access to the backup domain.
 138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_BackupAccessCmd(FunctionalState NewState)
 142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 24659              		.loc 1 142 0
 24660              		.cfi_startproc
 24661              		@ args = 0, pretend = 0, frame = 8
 24662              		@ frame_needed = 1, uses_anonymous_args = 0
 24663              		@ link register save eliminated.
 24664 0020 80B4     		push	{r7}
 24665              	.LCFI2:
 24666              		.cfi_def_cfa_offset 4
 24667 0022 83B0     		sub	sp, sp, #12
 24668              	.LCFI3:
 24669              		.cfi_def_cfa_offset 16
 24670 0024 00AF     		add	r7, sp, #0
 24671              		.cfi_offset 7, -4
 24672              	.LCFI4:
 24673              		.cfi_def_cfa_register 7
 24674 0026 0346     		mov	r3, r0
 24675 0028 FB71     		strb	r3, [r7, #7]
 143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 24676              		.loc 1 146 0
 24677 002a 044B     		ldr	r3, .L3
 24678 002c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 24679 002e 1A60     		str	r2, [r3, #0]
 147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 24680              		.loc 1 147 0
 24681 0030 07F10C07 		add	r7, r7, #12
 24682 0034 BD46     		mov	sp, r7
 24683 0036 80BC     		pop	{r7}
 24684 0038 7047     		bx	lr
 24685              	.L4:
 24686 003a 00BF     		.align	2
 24687              	.L3:
 24688 003c 20000E42 		.word	1108213792
 24689              		.cfi_endproc
 24690              	.LFE111:
 24692              		.align	2
 24693              		.global	PWR_PVDLevelConfig
 24694              		.thumb
 24695              		.thumb_func
 24697              	PWR_PVDLevelConfig:
 24698              	.LFB112:
 148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group2 PVD configuration functions
 154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   PVD configuration functions 
 155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                            PVD configuration functions
 159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The PVD is used to monitor the VDD power supply by comparing it to a threshold
 162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
 163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - A PVDO flag is available to indicate if VDD/VDDA is higher or lower than the 
 164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    PVD threshold. This event is internally connected to the EXTI line16
 165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    and can generate an interrupt if enabled through the EXTI registers.
 166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The PVD is stopped in Standby mode.
 167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_PVDLevel: specifies the PVD detection level
 175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_0
 177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_1
 178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_2
 179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_3
 180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_4
 181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_5
 182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_6
 183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_7
 184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   Refer to the electrical characteristics of your device datasheet for
 185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         more details about the voltage threshold corresponding to each 
 186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         detection level.
 187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
 190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 24699              		.loc 1 190 0
 24700              		.cfi_startproc
 24701              		@ args = 0, pretend = 0, frame = 16
 24702              		@ frame_needed = 1, uses_anonymous_args = 0
 24703              		@ link register save eliminated.
 24704 0040 80B4     		push	{r7}
 24705              	.LCFI5:
 24706              		.cfi_def_cfa_offset 4
 24707 0042 85B0     		sub	sp, sp, #20
 24708              	.LCFI6:
 24709              		.cfi_def_cfa_offset 24
 24710 0044 00AF     		add	r7, sp, #0
 24711              		.cfi_offset 7, -4
 24712              	.LCFI7:
 24713              		.cfi_def_cfa_register 7
 24714 0046 7860     		str	r0, [r7, #4]
 191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 24715              		.loc 1 191 0
 24716 0048 4FF00003 		mov	r3, #0
 24717 004c FB60     		str	r3, [r7, #12]
 192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
 195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 24718              		.loc 1 196 0
 24719 004e 0A4B     		ldr	r3, .L6
 24720 0050 1B68     		ldr	r3, [r3, #0]
 24721 0052 FB60     		str	r3, [r7, #12]
 197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear PLS[7:5] bits */
 199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg &= CR_PLS_MASK;
 24722              		.loc 1 199 0
 24723 0054 FB68     		ldr	r3, [r7, #12]
 24724 0056 23F0E003 		bic	r3, r3, #224
 24725 005a FB60     		str	r3, [r7, #12]
 200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set PLS[7:5] bits according to PWR_PVDLevel value */
 202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_PVDLevel;
 24726              		.loc 1 202 0
 24727 005c FA68     		ldr	r2, [r7, #12]
 24728 005e 7B68     		ldr	r3, [r7, #4]
 24729 0060 42EA0303 		orr	r3, r2, r3
 24730 0064 FB60     		str	r3, [r7, #12]
 203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Store the new value */
 205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 24731              		.loc 1 205 0
 24732 0066 044B     		ldr	r3, .L6
 24733 0068 FA68     		ldr	r2, [r7, #12]
 24734 006a 1A60     		str	r2, [r3, #0]
 206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 24735              		.loc 1 206 0
 24736 006c 07F11407 		add	r7, r7, #20
 24737 0070 BD46     		mov	sp, r7
 24738 0072 80BC     		pop	{r7}
 24739 0074 7047     		bx	lr
 24740              	.L7:
 24741 0076 00BF     		.align	2
 24742              	.L6:
 24743 0078 00700040 		.word	1073770496
 24744              		.cfi_endproc
 24745              	.LFE112:
 24747              		.align	2
 24748              		.global	PWR_PVDCmd
 24749              		.thumb
 24750              		.thumb_func
 24752              	PWR_PVDCmd:
 24753              	.LFB113:
 207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Power Voltage Detector(PVD).
 210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the PVD.
 211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_PVDCmd(FunctionalState NewState)
 215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 24754              		.loc 1 215 0
 24755              		.cfi_startproc
 24756              		@ args = 0, pretend = 0, frame = 8
 24757              		@ frame_needed = 1, uses_anonymous_args = 0
 24758              		@ link register save eliminated.
 24759 007c 80B4     		push	{r7}
 24760              	.LCFI8:
 24761              		.cfi_def_cfa_offset 4
 24762 007e 83B0     		sub	sp, sp, #12
 24763              	.LCFI9:
 24764              		.cfi_def_cfa_offset 16
 24765 0080 00AF     		add	r7, sp, #0
 24766              		.cfi_offset 7, -4
 24767              	.LCFI10:
 24768              		.cfi_def_cfa_register 7
 24769 0082 0346     		mov	r3, r0
 24770 0084 FB71     		strb	r3, [r7, #7]
 216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 24771              		.loc 1 219 0
 24772 0086 044B     		ldr	r3, .L9
 24773 0088 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 24774 008a 1A60     		str	r2, [r3, #0]
 220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 24775              		.loc 1 220 0
 24776 008c 07F10C07 		add	r7, r7, #12
 24777 0090 BD46     		mov	sp, r7
 24778 0092 80BC     		pop	{r7}
 24779 0094 7047     		bx	lr
 24780              	.L10:
 24781 0096 00BF     		.align	2
 24782              	.L9:
 24783 0098 10000E42 		.word	1108213776
 24784              		.cfi_endproc
 24785              	.LFE113:
 24787              		.align	2
 24788              		.global	PWR_WakeUpPinCmd
 24789              		.thumb
 24790              		.thumb_func
 24792              	PWR_WakeUpPinCmd:
 24793              	.LFB114:
 221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group3 WakeUp pin configuration functions
 227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   WakeUp pin configuration functions 
 228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     WakeUp pin configuration functions
 232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - WakeUp pin is used to wakeup the system from Standby mode. This pin is 
 235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    forced in input pull down configuration and is active on rising edges.
 236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - There is only one WakeUp pin: WakeUp Pin 1 on PA.00.
 237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the WakeUp Pin functionality.
 245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_WakeUpPinCmd(FunctionalState NewState)
 249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 24794              		.loc 1 249 0
 24795              		.cfi_startproc
 24796              		@ args = 0, pretend = 0, frame = 8
 24797              		@ frame_needed = 1, uses_anonymous_args = 0
 24798              		@ link register save eliminated.
 24799 009c 80B4     		push	{r7}
 24800              	.LCFI11:
 24801              		.cfi_def_cfa_offset 4
 24802 009e 83B0     		sub	sp, sp, #12
 24803              	.LCFI12:
 24804              		.cfi_def_cfa_offset 16
 24805 00a0 00AF     		add	r7, sp, #0
 24806              		.cfi_offset 7, -4
 24807              	.LCFI13:
 24808              		.cfi_def_cfa_register 7
 24809 00a2 0346     		mov	r3, r0
 24810 00a4 FB71     		strb	r3, [r7, #7]
 250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */  
 251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 24811              		.loc 1 253 0
 24812 00a6 044B     		ldr	r3, .L12
 24813 00a8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 24814 00aa 1A60     		str	r2, [r3, #0]
 254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 24815              		.loc 1 254 0
 24816 00ac 07F10C07 		add	r7, r7, #12
 24817 00b0 BD46     		mov	sp, r7
 24818 00b2 80BC     		pop	{r7}
 24819 00b4 7047     		bx	lr
 24820              	.L13:
 24821 00b6 00BF     		.align	2
 24822              	.L12:
 24823 00b8 A0000E42 		.word	1108213920
 24824              		.cfi_endproc
 24825              	.LFE114:
 24827              		.align	2
 24828              		.global	PWR_BackupRegulatorCmd
 24829              		.thumb
 24830              		.thumb_func
 24832              	PWR_BackupRegulatorCmd:
 24833              	.LFB115:
 255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group4 Main and Backup Regulators configuration functions
 261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Main and Backup Regulators configuration functions 
 262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     Main and Backup Regulators configuration functions
 266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The backup domain includes 4 Kbytes of backup SRAM accessible only from the 
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    CPU, and address in 32-bit, 16-bit or 8-bit mode. Its content is retained 
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    even in Standby or VBAT mode when the low power backup regulator is enabled. 
 271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    It can be considered as an internal EEPROM when VBAT is always present.
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    You can use the PWR_BackupRegulatorCmd() function to enable the low power
 273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    backup regulator and use the PWR_GetFlagStatus(PWR_FLAG_BRR) to check if it is
 274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ready or not. 
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - When the backup domain is supplied by VDD (analog switch connected to VDD) 
 277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    the backup SRAM is powered from VDD which replaces the VBAT power supply to 
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    save battery life.
 279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The backup SRAM is not mass erased by an tamper event. It is read protected 
 281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    to prevent confidential data, such as cryptographic private key, from being 
 282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    accessed. The backup SRAM can be erased only through the Flash interface when
 283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    a protection level change from level 1 to level 0 is requested. 
 284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Refer to the description of Read protection (RDP) in the Flash programming manual.
 285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The main internal regulator can be configured to have a tradeoff between performance
 287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    and power consumption when the device does not operate at the maximum frequency. 
 288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    This is done through PWR_MainRegulatorModeConfig() function which configure VOS bit
 289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    in PWR_CR register: 
 290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - When this bit is set (Regulator voltage output Scale 1 mode selected) the System
 291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         frequency can go up to 168 MHz. 
 292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - When this bit is reset (Regulator voltage output Scale 2 mode selected) the System
 293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         frequency can go up to 144 MHz. 
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Refer to the datasheets for more details.
 295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            
 296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Backup Regulator.
 302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Backup Regulator.
 303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_BackupRegulatorCmd(FunctionalState NewState)
 307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 24834              		.loc 1 307 0
 24835              		.cfi_startproc
 24836              		@ args = 0, pretend = 0, frame = 8
 24837              		@ frame_needed = 1, uses_anonymous_args = 0
 24838              		@ link register save eliminated.
 24839 00bc 80B4     		push	{r7}
 24840              	.LCFI14:
 24841              		.cfi_def_cfa_offset 4
 24842 00be 83B0     		sub	sp, sp, #12
 24843              	.LCFI15:
 24844              		.cfi_def_cfa_offset 16
 24845 00c0 00AF     		add	r7, sp, #0
 24846              		.cfi_offset 7, -4
 24847              	.LCFI16:
 24848              		.cfi_def_cfa_register 7
 24849 00c2 0346     		mov	r3, r0
 24850 00c4 FB71     		strb	r3, [r7, #7]
 308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 24851              		.loc 1 311 0
 24852 00c6 044B     		ldr	r3, .L15
 24853 00c8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 24854 00ca 1A60     		str	r2, [r3, #0]
 312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 24855              		.loc 1 312 0
 24856 00cc 07F10C07 		add	r7, r7, #12
 24857 00d0 BD46     		mov	sp, r7
 24858 00d2 80BC     		pop	{r7}
 24859 00d4 7047     		bx	lr
 24860              	.L16:
 24861 00d6 00BF     		.align	2
 24862              	.L15:
 24863 00d8 A4000E42 		.word	1108213924
 24864              		.cfi_endproc
 24865              	.LFE115:
 24867              		.align	2
 24868              		.global	PWR_MainRegulatorModeConfig
 24869              		.thumb
 24870              		.thumb_func
 24872              	PWR_MainRegulatorModeConfig:
 24873              	.LFB116:
 313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Configures the main internal regulator output voltage.
 316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator_Voltage: specifies the regulator output voltage to achieve
 317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         a tradeoff between performance and power consumption when the device does
 318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         not operate at the maximum frequency (refer to the datasheets for more details).
 319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale1: Regulator voltage output Scale 1 mode, 
 321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 168 MHz. 
 322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale2: Regulator voltage output Scale 2 mode, 
 323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 144 MHz.    
 324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
 327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 24874              		.loc 1 327 0
 24875              		.cfi_startproc
 24876              		@ args = 0, pretend = 0, frame = 8
 24877              		@ frame_needed = 1, uses_anonymous_args = 0
 24878              		@ link register save eliminated.
 24879 00dc 80B4     		push	{r7}
 24880              	.LCFI17:
 24881              		.cfi_def_cfa_offset 4
 24882 00de 83B0     		sub	sp, sp, #12
 24883              	.LCFI18:
 24884              		.cfi_def_cfa_offset 16
 24885 00e0 00AF     		add	r7, sp, #0
 24886              		.cfi_offset 7, -4
 24887              	.LCFI19:
 24888              		.cfi_def_cfa_register 7
 24889 00e2 7860     		str	r0, [r7, #4]
 328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));
 330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if (PWR_Regulator_Voltage == PWR_Regulator_Voltage_Scale2)
 24890              		.loc 1 331 0
 24891 00e4 7B68     		ldr	r3, [r7, #4]
 24892 00e6 002B     		cmp	r3, #0
 24893 00e8 06D1     		bne	.L18
 332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     PWR->CR &= ~PWR_Regulator_Voltage_Scale1;
 24894              		.loc 1 333 0
 24895 00ea 094B     		ldr	r3, .L20
 24896 00ec 084A     		ldr	r2, .L20
 24897 00ee 1268     		ldr	r2, [r2, #0]
 24898 00f0 22F48042 		bic	r2, r2, #16384
 24899 00f4 1A60     		str	r2, [r3, #0]
 24900 00f6 05E0     		b	.L17
 24901              	.L18:
 334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {    
 337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     PWR->CR |= PWR_Regulator_Voltage_Scale1;
 24902              		.loc 1 337 0
 24903 00f8 054B     		ldr	r3, .L20
 24904 00fa 054A     		ldr	r2, .L20
 24905 00fc 1268     		ldr	r2, [r2, #0]
 24906 00fe 42F48042 		orr	r2, r2, #16384
 24907 0102 1A60     		str	r2, [r3, #0]
 24908              	.L17:
 338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 24909              		.loc 1 339 0
 24910 0104 07F10C07 		add	r7, r7, #12
 24911 0108 BD46     		mov	sp, r7
 24912 010a 80BC     		pop	{r7}
 24913 010c 7047     		bx	lr
 24914              	.L21:
 24915 010e 00BF     		.align	2
 24916              	.L20:
 24917 0110 00700040 		.word	1073770496
 24918              		.cfi_endproc
 24919              	.LFE116:
 24921              		.align	2
 24922              		.global	PWR_FlashPowerDownCmd
 24923              		.thumb
 24924              		.thumb_func
 24926              	PWR_FlashPowerDownCmd:
 24927              	.LFB117:
 340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group5 FLASH Power Down configuration functions
 346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   FLASH Power Down configuration functions 
 347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            FLASH Power Down configuration functions
 351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - By setting the FPDS bit in the PWR_CR register by using the PWR_FlashPowerDownCmd()
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    function, the Flash memory also enters power down mode when the device enters 
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Stop mode. When the Flash memory is in power down mode, an additional startup 
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    delay is incurred when waking up from Stop mode.
 357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Flash Power Down in STOP mode.
 364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Flash power mode.
 365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_FlashPowerDownCmd(FunctionalState NewState)
 369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 24928              		.loc 1 369 0
 24929              		.cfi_startproc
 24930              		@ args = 0, pretend = 0, frame = 8
 24931              		@ frame_needed = 1, uses_anonymous_args = 0
 24932              		@ link register save eliminated.
 24933 0114 80B4     		push	{r7}
 24934              	.LCFI20:
 24935              		.cfi_def_cfa_offset 4
 24936 0116 83B0     		sub	sp, sp, #12
 24937              	.LCFI21:
 24938              		.cfi_def_cfa_offset 16
 24939 0118 00AF     		add	r7, sp, #0
 24940              		.cfi_offset 7, -4
 24941              	.LCFI22:
 24942              		.cfi_def_cfa_register 7
 24943 011a 0346     		mov	r3, r0
 24944 011c FB71     		strb	r3, [r7, #7]
 370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 24945              		.loc 1 373 0
 24946 011e 044B     		ldr	r3, .L23
 24947 0120 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 24948 0122 1A60     		str	r2, [r3, #0]
 374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 24949              		.loc 1 374 0
 24950 0124 07F10C07 		add	r7, r7, #12
 24951 0128 BD46     		mov	sp, r7
 24952 012a 80BC     		pop	{r7}
 24953 012c 7047     		bx	lr
 24954              	.L24:
 24955 012e 00BF     		.align	2
 24956              	.L23:
 24957 0130 24000E42 		.word	1108213796
 24958              		.cfi_endproc
 24959              	.LFE117:
 24961              		.align	2
 24962              		.global	PWR_EnterSTOPMode
 24963              		.thumb
 24964              		.thumb_func
 24966              	PWR_EnterSTOPMode:
 24967              	.LFB118:
 375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group6 Low Power modes configuration functions
 381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Low Power modes configuration functions 
 382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     Low Power modes configuration functions
 386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   The devices feature 3 low-power modes:
 389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - Sleep mode: Cortex-M4 core stopped, peripherals kept running.
 390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - Stop mode: all clocks are stopped, regulator running, regulator in low power mode
 391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - Standby mode: 1.2V domain powered off.
 392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Sleep mode
 394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ===========
 395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Entry:
 396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - The Sleep mode is entered by using the __WFI() or __WFE() functions.
 397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Exit:
 398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - Any peripheral interrupt acknowledged by the nested vectored interrupt 
 399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         controller (NVIC) can wake up the device from Sleep mode.
 400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Stop mode
 402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ==========
 403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    In Stop mode, all clocks in the 1.2V domain are stopped, the PLL, the HSI,
 404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    and the HSE RC oscillators are disabled. Internal SRAM and register contents 
 405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    are preserved.
 406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The voltage regulator can be configured either in normal or low-power mode.
 407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    To minimize the consumption In Stop mode, FLASH can be powered off before 
 408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    entering the Stop mode. It can be switched on again by software after exiting 
 409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    the Stop mode using the PWR_FlashPowerDownCmd() function. 
 410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Entry:
 412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - The Stop mode is entered using the PWR_EnterSTOPMode(PWR_Regulator_LowPower,) 
 413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         function with regulator in LowPower or with Regulator ON.
 414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Exit:
 415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       
 417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Standby mode
 418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ============
 419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The Standby mode allows to achieve the lowest power consumption. It is based 
 420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    on the Cortex-M4 deepsleep mode, with the voltage regulator disabled. 
 421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The 1.2V domain is consequently powered off. The PLL, the HSI oscillator and 
 422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    the HSE oscillator are also switched off. SRAM and register contents are lost 
 423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    except for the RTC registers, RTC backup registers, backup SRAM and Standby 
 424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    circuitry.
 425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The voltage regulator is OFF.
 427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       
 428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Entry:
 429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - The Standby mode is entered using the PWR_EnterSTANDBYMode() function.
 430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Exit:
 431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - WKUP pin rising edge, RTC alarm (Alarm A and Alarm B), RTC wakeup,
 432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         tamper event, time-stamp event, external reset in NRST pin, IWDG reset.              
 433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Auto-wakeup (AWU) from low-power mode
 435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    =====================================
 436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC 
 437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Wakeup event, a tamper event, a time-stamp event, or a comparator event, 
 438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    without depending on an external interrupt (Auto-wakeup mode).
 439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - RTC auto-wakeup (AWU) from the Stop mode
 441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      ----------------------------------------
 442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      
 443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Stop mode with an RTC alarm event, it is necessary to:
 444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the EXTI Line 17 to be sensitive to rising edges (Interrupt 
 445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          and RTC_AlarmCmd() functions.
 449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Stop mode with an RTC Tamper or time stamp event, it 
 450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        is necessary to:
 451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the EXTI Line 21 to be sensitive to rising edges (Interrupt 
 452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          function
 455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to detect the tamper or time stamp event using the
 456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          functions.
 458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Stop mode with an RTC WakeUp event, it is necessary to:
 459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the EXTI Line 22 to be sensitive to rising edges (Interrupt 
 460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
 462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(), 
 463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - RTC auto-wakeup (AWU) from the Standby mode
 466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      -------------------------------------------
 467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Standby mode with an RTC alarm event, it is necessary to:
 468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          and RTC_AlarmCmd() functions.
 471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Standby mode with an RTC Tamper or time stamp event, it 
 472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        is necessary to:
 473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          function
 475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to detect the tamper or time stamp event using the
 476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          functions.
 478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Standby mode with an RTC WakeUp event, it is necessary to:
 479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
 480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(), 
 481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enters STOP mode.
 489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *   
 490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   In Stop mode, all I/O pins keep the same state as in Run mode.
 491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   When exiting Stop mode by issuing an interrupt or a wakeup event, 
 492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   When the voltage regulator operates in low power mode, an additional 
 494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         is higher although the startup time is reduced.           
 497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *     
 498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator: specifies the regulator state in STOP mode.
 499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_ON: STOP mode with regulator ON
 501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_LowPower: STOP mode with regulator in low power mode
 502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
 503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
 505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
 506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
 509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 24968              		.loc 1 509 0
 24969              		.cfi_startproc
 24970              		@ args = 0, pretend = 0, frame = 16
 24971              		@ frame_needed = 1, uses_anonymous_args = 0
 24972              		@ link register save eliminated.
 24973 0134 80B4     		push	{r7}
 24974              	.LCFI23:
 24975              		.cfi_def_cfa_offset 4
 24976 0136 85B0     		sub	sp, sp, #20
 24977              	.LCFI24:
 24978              		.cfi_def_cfa_offset 24
 24979 0138 00AF     		add	r7, sp, #0
 24980              		.cfi_offset 7, -4
 24981              	.LCFI25:
 24982              		.cfi_def_cfa_register 7
 24983 013a 7860     		str	r0, [r7, #4]
 24984 013c 0B46     		mov	r3, r1
 24985 013e FB70     		strb	r3, [r7, #3]
 510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 24986              		.loc 1 510 0
 24987 0140 4FF00003 		mov	r3, #0
 24988 0144 FB60     		str	r3, [r7, #12]
 511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR(PWR_Regulator));
 514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
 515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 24989              		.loc 1 517 0
 24990 0146 134B     		ldr	r3, .L28
 24991 0148 1B68     		ldr	r3, [r3, #0]
 24992 014a FB60     		str	r3, [r7, #12]
 518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear PDDS and LPDSR bits */
 519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg &= CR_DS_MASK;
 24993              		.loc 1 519 0
 24994 014c FB68     		ldr	r3, [r7, #12]
 24995 014e 23F00303 		bic	r3, r3, #3
 24996 0152 FB60     		str	r3, [r7, #12]
 520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set LPDSR bit according to PWR_Regulator value */
 522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_Regulator;
 24997              		.loc 1 522 0
 24998 0154 FA68     		ldr	r2, [r7, #12]
 24999 0156 7B68     		ldr	r3, [r7, #4]
 25000 0158 42EA0303 		orr	r3, r2, r3
 25001 015c FB60     		str	r3, [r7, #12]
 523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Store the new value */
 525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 25002              		.loc 1 525 0
 25003 015e 0D4B     		ldr	r3, .L28
 25004 0160 FA68     		ldr	r2, [r7, #12]
 25005 0162 1A60     		str	r2, [r3, #0]
 526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 25006              		.loc 1 528 0
 25007 0164 0C4B     		ldr	r3, .L28+4
 25008 0166 0C4A     		ldr	r2, .L28+4
 25009 0168 1269     		ldr	r2, [r2, #16]
 25010 016a 42F00402 		orr	r2, r2, #4
 25011 016e 1A61     		str	r2, [r3, #16]
 529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 25012              		.loc 1 531 0
 25013 0170 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25014 0172 012B     		cmp	r3, #1
 25015 0174 01D1     		bne	.L26
 25016              	.LBB8:
 25017              	.LBB9:
   1:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /**************************************************************************//**
   2:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  * @version  V2.10
   5:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  * @date     19. July 2011
   6:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  *
   7:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  * @note
   8:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  *
  10:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  * @par
  11:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors. 
  14:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  *
  15:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  * @par
  16:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  *
  22:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  ******************************************************************************/
  23:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  24:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  27:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  28:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****   Access to dedicated instructions
  31:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****   @{
  32:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** */
  33:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  34:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /* ARM armcc specific functions */
  36:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  37:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #endif
  40:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  41:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  42:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
  43:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  44:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  */
  46:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #define __NOP                             __nop
  47:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  48:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  49:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  51:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
  53:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  */
  54:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #define __WFI                             __wfi
  55:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  56:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  57:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
  58:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  59:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  */
  62:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #define __WFE                             __wfe
  63:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  64:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  65:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
  66:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  67:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  */
  69:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #define __SEV                             __sev
  70:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  71:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  72:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  74:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
  75:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
  76:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  */
  78:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  80:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  81:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  83:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
  84:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  */
  86:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  88:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  89:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  91:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
  92:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  */
  94:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  96:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  97:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
  99:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 101:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 103:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  */
 104:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #define __REV                             __rev
 105:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 106:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 107:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 109:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 111:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 113:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  */
 114:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 115:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** {
 116:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****   rev16 r0, r0
 117:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****   bx lr
 118:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** }
 119:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 120:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 121:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 123:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 125:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 127:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  */
 128:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 129:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** {
 130:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****   revsh r0, r0
 131:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****   bx lr
 132:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** }
 133:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 134:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 135:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 136:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 137:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 138:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 139:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 140:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 141:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 142:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 143:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  */
 144:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #define __RBIT                            __rbit
 145:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 146:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 147:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 148:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 149:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 150:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 151:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 152:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 153:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  */
 154:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 155:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 156:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 157:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 158:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 159:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 160:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 161:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 162:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 163:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  */
 164:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 165:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 166:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 167:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 168:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 169:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 170:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 171:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 172:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 173:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  */
 174:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 175:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 176:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 177:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 178:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 179:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 180:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 181:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 182:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 183:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 184:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 185:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  */
 186:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 187:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 188:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 189:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 190:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 191:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 192:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 193:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 194:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 195:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 196:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 197:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  */
 198:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 199:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 200:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 201:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 202:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 203:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 204:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 205:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 206:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 207:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 208:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 209:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  */
 210:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 211:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 212:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 213:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 214:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 215:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 216:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 217:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  */
 218:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #define __CLREX                           __clrex
 219:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 220:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 221:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Signed Saturate
 222:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 223:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     This function saturates a signed value.
 224:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 225:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 226:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 227:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 228:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  */
 229:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #define __SSAT                            __ssat
 230:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 231:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 232:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 233:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 234:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     This function saturates an unsigned value.
 235:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 236:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 238:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 239:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  */
 240:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #define __USAT                            __usat
 241:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 242:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 243:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Count leading zeros
 244:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 245:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 246:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 247:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 248:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     \return             number of leading zeros in value
 249:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  */
 250:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #define __CLZ                             __clz 
 251:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 252:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 253:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 254:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 255:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 256:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 257:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /* IAR iccarm specific functions */
 258:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 259:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #include <cmsis_iar.h>
 260:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 261:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 262:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 263:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /* GNU gcc specific functions */
 264:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 265:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
 266:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 267:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 268:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  */
 269:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 270:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** {
 271:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("nop");
 272:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** }
 273:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 274:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 275:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 276:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 277:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 278:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
 279:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  */
 280:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 281:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** {
 282:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfi");
 25018              		.loc 7 282 0
 25019              	@ 282 "/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h" 1
 25020 0176 30BF     		wfi
 25021              	@ 0 "" 2
 25022              		.thumb
 25023 0178 00E0     		b	.L27
 25024              	.L26:
 25025              	.LBE9:
 25026              	.LBE8:
 25027              	.LBB10:
 25028              	.LBB11:
 283:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** }
 284:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 285:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 286:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
 287:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** 
 288:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 289:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 290:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****  */
 291:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
 292:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h **** {
 293:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfe");
 25029              		.loc 7 293 0
 25030              	@ 293 "/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h" 1
 25031 017a 20BF     		wfe
 25032              	@ 0 "" 2
 25033              		.thumb
 25034              	.L27:
 25035              	.LBE11:
 25036              	.LBE10:
 532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {   
 533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Request Wait For Interrupt */
 534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     __WFI();
 535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Request Wait For Event */
 539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     __WFE();
 540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 25037              		.loc 1 542 0
 25038 017c 064B     		ldr	r3, .L28+4
 25039 017e 064A     		ldr	r2, .L28+4
 25040 0180 1269     		ldr	r2, [r2, #16]
 25041 0182 22F00402 		bic	r2, r2, #4
 25042 0186 1A61     		str	r2, [r3, #16]
 543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 25043              		.loc 1 543 0
 25044 0188 07F11407 		add	r7, r7, #20
 25045 018c BD46     		mov	sp, r7
 25046 018e 80BC     		pop	{r7}
 25047 0190 7047     		bx	lr
 25048              	.L29:
 25049 0192 00BF     		.align	2
 25050              	.L28:
 25051 0194 00700040 		.word	1073770496
 25052 0198 00ED00E0 		.word	-536810240
 25053              		.cfi_endproc
 25054              	.LFE118:
 25056              		.align	2
 25057              		.global	PWR_EnterSTANDBYMode
 25058              		.thumb
 25059              		.thumb_func
 25061              	PWR_EnterSTANDBYMode:
 25062              	.LFB119:
 544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enters STANDBY mode.
 547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   In Standby mode, all I/O pins are high impedance except for:
 548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - Reset pad (still available) 
 549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - RTC_AF1 pin (PC13) if configured for tamper, time-stamp, RTC 
 550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            Alarm out, or RTC clock calibration out.
 551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
 552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - WKUP pin 1 (PA0) if enabled.       
 553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  None
 554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_EnterSTANDBYMode(void)
 557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 25063              		.loc 1 557 0
 25064              		.cfi_startproc
 25065              		@ args = 0, pretend = 0, frame = 0
 25066              		@ frame_needed = 1, uses_anonymous_args = 0
 25067              		@ link register save eliminated.
 25068 019c 80B4     		push	{r7}
 25069              	.LCFI26:
 25070              		.cfi_def_cfa_offset 4
 25071 019e 00AF     		add	r7, sp, #0
 25072              		.cfi_offset 7, -4
 25073              	.LCFI27:
 25074              		.cfi_def_cfa_register 7
 558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear Wakeup flag */
 559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |= PWR_CR_CWUF;
 25075              		.loc 1 559 0
 25076 01a0 0A4B     		ldr	r3, .L31
 25077 01a2 0A4A     		ldr	r2, .L31
 25078 01a4 1268     		ldr	r2, [r2, #0]
 25079 01a6 42F00402 		orr	r2, r2, #4
 25080 01aa 1A60     		str	r2, [r3, #0]
 560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select STANDBY mode */
 562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |= PWR_CR_PDDS;
 25081              		.loc 1 562 0
 25082 01ac 074B     		ldr	r3, .L31
 25083 01ae 074A     		ldr	r2, .L31
 25084 01b0 1268     		ldr	r2, [r2, #0]
 25085 01b2 42F00202 		orr	r2, r2, #2
 25086 01b6 1A60     		str	r2, [r3, #0]
 563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 25087              		.loc 1 565 0
 25088 01b8 054B     		ldr	r3, .L31+4
 25089 01ba 054A     		ldr	r2, .L31+4
 25090 01bc 1269     		ldr	r2, [r2, #16]
 25091 01be 42F00402 		orr	r2, r2, #4
 25092 01c2 1A61     		str	r2, [r3, #16]
 25093              	.LBB12:
 25094              	.LBB13:
 282:/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfi");
 25095              		.loc 7 282 0
 25096              	@ 282 "/home/junpei/workspace/arm/F4_Discovery_Template/Libraries/CMSIS/Include/core_cmInstr.h" 1
 25097 01c4 30BF     		wfi
 25098              	@ 0 "" 2
 25099              		.thumb
 25100              	.LBE13:
 25101              	.LBE12:
 566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* This option is used to ensure that store operations are completed */
 568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined ( __CC_ARM   )
 569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   __force_stores();
 570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif
 571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Request Wait For Interrupt */
 572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   __WFI();
 573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 25102              		.loc 1 573 0
 25103 01c6 BD46     		mov	sp, r7
 25104 01c8 80BC     		pop	{r7}
 25105 01ca 7047     		bx	lr
 25106              	.L32:
 25107              		.align	2
 25108              	.L31:
 25109 01cc 00700040 		.word	1073770496
 25110 01d0 00ED00E0 		.word	-536810240
 25111              		.cfi_endproc
 25112              	.LFE119:
 25114              		.align	2
 25115              		.global	PWR_GetFlagStatus
 25116              		.thumb
 25117              		.thumb_func
 25119              	PWR_GetFlagStatus:
 25120              	.LFB120:
 574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group7 Flags management functions
 580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Flags management functions 
 581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                            Flags management functions
 585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Checks whether the specified PWR flag is set or not.
 593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to check.
 594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag. This flag indicates that a wakeup event 
 596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  was received from the WKUP pin or from the RTC alarm (Alarm A 
 597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  or Alarm B), RTC Tamper event, RTC TimeStamp event or RTC Wakeup.
 598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  An additional wakeup event is detected if the WKUP pin is enabled 
 599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  (by setting the EWUP bit) when the WKUP pin level is already high.  
 600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag. This flag indicates that the system was
 601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  resumed from StandBy mode.    
 602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_PVDO: PVD Output. This flag is valid only if PVD is enabled 
 603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  by the PWR_PVDCmd() function. The PVD is stopped by Standby mode 
 604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  For this reason, this bit is equal to 0 after Standby or reset
 605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  until the PVDE bit is set.
 606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_BRR: Backup regulator ready flag. This bit is not reset 
 607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  when the device wakes up from Standby mode or by a system reset 
 608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  or power reset.  
 609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_VOSRDY: This flag indicates that the Regulator voltage 
 610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                 scaling output selection is ready. 
 611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval The new state of PWR_FLAG (SET or RESET).
 612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
 614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 25121              		.loc 1 614 0
 25122              		.cfi_startproc
 25123              		@ args = 0, pretend = 0, frame = 16
 25124              		@ frame_needed = 1, uses_anonymous_args = 0
 25125              		@ link register save eliminated.
 25126 01d4 80B4     		push	{r7}
 25127              	.LCFI28:
 25128              		.cfi_def_cfa_offset 4
 25129 01d6 85B0     		sub	sp, sp, #20
 25130              	.LCFI29:
 25131              		.cfi_def_cfa_offset 24
 25132 01d8 00AF     		add	r7, sp, #0
 25133              		.cfi_offset 7, -4
 25134              	.LCFI30:
 25135              		.cfi_def_cfa_register 7
 25136 01da 7860     		str	r0, [r7, #4]
 615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   FlagStatus bitstatus = RESET;
 25137              		.loc 1 615 0
 25138 01dc 4FF00003 		mov	r3, #0
 25139 01e0 FB73     		strb	r3, [r7, #15]
 616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
 619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 25140              		.loc 1 620 0
 25141 01e2 0A4B     		ldr	r3, .L36
 25142 01e4 5A68     		ldr	r2, [r3, #4]
 25143 01e6 7B68     		ldr	r3, [r7, #4]
 25144 01e8 02EA0303 		and	r3, r2, r3
 25145 01ec 002B     		cmp	r3, #0
 25146 01ee 03D0     		beq	.L34
 621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     bitstatus = SET;
 25147              		.loc 1 622 0
 25148 01f0 4FF00103 		mov	r3, #1
 25149 01f4 FB73     		strb	r3, [r7, #15]
 25150 01f6 02E0     		b	.L35
 25151              	.L34:
 623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     bitstatus = RESET;
 25152              		.loc 1 626 0
 25153 01f8 4FF00003 		mov	r3, #0
 25154 01fc FB73     		strb	r3, [r7, #15]
 25155              	.L35:
 627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Return the flag status */
 629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   return bitstatus;
 25156              		.loc 1 629 0
 25157 01fe FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 25158              		.loc 1 630 0
 25159 0200 1846     		mov	r0, r3
 25160 0202 07F11407 		add	r7, r7, #20
 25161 0206 BD46     		mov	sp, r7
 25162 0208 80BC     		pop	{r7}
 25163 020a 7047     		bx	lr
 25164              	.L37:
 25165              		.align	2
 25166              	.L36:
 25167 020c 00700040 		.word	1073770496
 25168              		.cfi_endproc
 25169              	.LFE120:
 25171              		.align	2
 25172              		.global	PWR_ClearFlag
 25173              		.thumb
 25174              		.thumb_func
 25176              	PWR_ClearFlag:
 25177              	.LFB121:
 631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Clears the PWR's pending flags.
 634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to clear.
 635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag
 637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag
 638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_ClearFlag(uint32_t PWR_FLAG)
 641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 25178              		.loc 1 641 0
 25179              		.cfi_startproc
 25180              		@ args = 0, pretend = 0, frame = 8
 25181              		@ frame_needed = 1, uses_anonymous_args = 0
 25182              		@ link register save eliminated.
 25183 0210 80B4     		push	{r7}
 25184              	.LCFI31:
 25185              		.cfi_def_cfa_offset 4
 25186 0212 83B0     		sub	sp, sp, #12
 25187              	.LCFI32:
 25188              		.cfi_def_cfa_offset 16
 25189 0214 00AF     		add	r7, sp, #0
 25190              		.cfi_offset 7, -4
 25191              	.LCFI33:
 25192              		.cfi_def_cfa_register 7
 25193 0216 7860     		str	r0, [r7, #4]
 642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
 644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          
 645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |=  PWR_FLAG << 2;
 25194              		.loc 1 645 0
 25195 0218 064B     		ldr	r3, .L39
 25196 021a 064A     		ldr	r2, .L39
 25197 021c 1168     		ldr	r1, [r2, #0]
 25198 021e 7A68     		ldr	r2, [r7, #4]
 25199 0220 4FEA8202 		lsl	r2, r2, #2
 25200 0224 41EA0202 		orr	r2, r1, r2
 25201 0228 1A60     		str	r2, [r3, #0]
 646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 25202              		.loc 1 646 0
 25203 022a 07F10C07 		add	r7, r7, #12
 25204 022e BD46     		mov	sp, r7
 25205 0230 80BC     		pop	{r7}
 25206 0232 7047     		bx	lr
 25207              	.L40:
 25208              		.align	2
 25209              	.L39:
 25210 0234 00700040 		.word	1073770496
 25211              		.cfi_endproc
 25212              	.LFE121:
 25214              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_pwr.c
     /tmp/ccrtvMmp.s:24620  .text:00000000 $t
     /tmp/ccrtvMmp.s:24625  .text:00000000 PWR_DeInit
     /tmp/ccrtvMmp.s:24657  .text:00000020 PWR_BackupAccessCmd
     /tmp/ccrtvMmp.s:24688  .text:0000003c $d
     /tmp/ccrtvMmp.s:24692  .text:00000040 $t
     /tmp/ccrtvMmp.s:24697  .text:00000040 PWR_PVDLevelConfig
     /tmp/ccrtvMmp.s:24743  .text:00000078 $d
     /tmp/ccrtvMmp.s:24747  .text:0000007c $t
     /tmp/ccrtvMmp.s:24752  .text:0000007c PWR_PVDCmd
     /tmp/ccrtvMmp.s:24783  .text:00000098 $d
     /tmp/ccrtvMmp.s:24787  .text:0000009c $t
     /tmp/ccrtvMmp.s:24792  .text:0000009c PWR_WakeUpPinCmd
     /tmp/ccrtvMmp.s:24823  .text:000000b8 $d
     /tmp/ccrtvMmp.s:24827  .text:000000bc $t
     /tmp/ccrtvMmp.s:24832  .text:000000bc PWR_BackupRegulatorCmd
     /tmp/ccrtvMmp.s:24863  .text:000000d8 $d
     /tmp/ccrtvMmp.s:24867  .text:000000dc $t
     /tmp/ccrtvMmp.s:24872  .text:000000dc PWR_MainRegulatorModeConfig
     /tmp/ccrtvMmp.s:24917  .text:00000110 $d
     /tmp/ccrtvMmp.s:24921  .text:00000114 $t
     /tmp/ccrtvMmp.s:24926  .text:00000114 PWR_FlashPowerDownCmd
     /tmp/ccrtvMmp.s:24957  .text:00000130 $d
     /tmp/ccrtvMmp.s:24961  .text:00000134 $t
     /tmp/ccrtvMmp.s:24966  .text:00000134 PWR_EnterSTOPMode
     /tmp/ccrtvMmp.s:25051  .text:00000194 $d
     /tmp/ccrtvMmp.s:25056  .text:0000019c $t
     /tmp/ccrtvMmp.s:25061  .text:0000019c PWR_EnterSTANDBYMode
     /tmp/ccrtvMmp.s:25109  .text:000001cc $d
     /tmp/ccrtvMmp.s:25114  .text:000001d4 $t
     /tmp/ccrtvMmp.s:25119  .text:000001d4 PWR_GetFlagStatus
     /tmp/ccrtvMmp.s:25167  .text:0000020c $d
     /tmp/ccrtvMmp.s:25171  .text:00000210 $t
     /tmp/ccrtvMmp.s:25176  .text:00000210 PWR_ClearFlag
     /tmp/ccrtvMmp.s:25210  .text:00000234 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
