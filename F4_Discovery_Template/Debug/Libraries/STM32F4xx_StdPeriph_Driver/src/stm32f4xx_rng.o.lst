   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f4xx_rng.c"
  23              	.Ltext0:
  24              		.file 1 "../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c"
 24563              		.align	2
 24564              		.global	RNG_DeInit
 24565              		.thumb
 24566              		.thumb_func
 24568              	RNG_DeInit:
 24569              	.LFB110:
   1:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
   2:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ******************************************************************************
   3:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @file    stm32f4xx_rng.c
   4:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @version V1.0.2
   6:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @date    05-March-2012
   7:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     * @brief This file provides firmware functions to manage the following 
   8:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          functionalities of the Random Number Generator (RNG) peripheral:           
   9:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Initialization and Configuration 
  10:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Get 32 bit Random number      
  11:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Interrupts and flags management       
  12:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
  13:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *  @verbatim
  14:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *                               
  15:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          ===================================================================      
  16:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *                                   How to use this driver
  17:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          ===================================================================          
  18:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          1. Enable The RNG controller clock using 
  19:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_RNG, ENABLE) function.
  20:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *              
  21:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          2. Activate the RNG peripheral using RNG_Cmd() function.
  22:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          
  23:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          3. Wait until the 32 bit Random number Generator contains a valid 
  24:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            random data (using polling/interrupt mode). For more details, 
  25:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            refer to "Interrupts and flags management functions" module 
  26:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            description.
  27:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           
  28:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          4. Get the 32 bit Random number using RNG_GetRandomNumber() function
  29:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          
  30:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          5. To get another 32 bit Random number, go to step 3.       
  31:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  32:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
  33:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *              
  34:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *  @endverbatim
  35:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
  36:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ******************************************************************************
  37:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @attention
  38:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  39:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  40:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  41:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  42:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * You may not use this file except in compliance with the License.
  43:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * You may obtain a copy of the License at:
  44:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  45:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  46:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  47:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * Unless required by applicable law or agreed to in writing, software 
  48:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  49:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  50:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * See the License for the specific language governing permissions and
  51:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * limitations under the License.
  52:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  53:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ******************************************************************************
  54:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  55:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  56:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Includes ------------------------------------------------------------------*/
  57:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** #include "stm32f4xx_rng.h"
  58:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** #include "stm32f4xx_rcc.h"
  59:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  60:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  61:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  62:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  63:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  64:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG 
  65:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief RNG driver modules
  66:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  67:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */ 
  68:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  69:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private typedef -----------------------------------------------------------*/
  70:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private define ------------------------------------------------------------*/
  71:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private macro -------------------------------------------------------------*/
  72:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private variables ---------------------------------------------------------*/
  73:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private function prototypes -----------------------------------------------*/
  74:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private functions ---------------------------------------------------------*/
  75:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  76:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Private_Functions
  77:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  78:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */ 
  79:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  80:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group1 Initialization and Configuration functions
  81:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *  @brief    Initialization and Configuration functions 
  82:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *
  83:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @verbatim    
  84:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================
  85:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                       Initialization and Configuration functions
  86:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================  
  87:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   This section provides functions allowing to 
  88:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    - Initialize the RNG peripheral
  89:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    - Enable or disable the RNG peripheral
  90:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
  91:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @endverbatim
  92:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  93:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  94:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  95:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
  96:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Deinitializes the RNG peripheral registers to their default reset values.
  97:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  None
  98:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
  99:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_DeInit(void)
 101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 24570              		.loc 1 101 0
 24571              		.cfi_startproc
 24572              		@ args = 0, pretend = 0, frame = 0
 24573              		@ frame_needed = 1, uses_anonymous_args = 0
 24574 0000 80B5     		push	{r7, lr}
 24575              	.LCFI0:
 24576              		.cfi_def_cfa_offset 8
 24577 0002 00AF     		add	r7, sp, #0
 24578              		.cfi_offset 14, -4
 24579              		.cfi_offset 7, -8
 24580              	.LCFI1:
 24581              		.cfi_def_cfa_register 7
 102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Enable RNG reset state */
 103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 24582              		.loc 1 103 0
 24583 0004 4FF04000 		mov	r0, #64
 24584 0008 4FF00101 		mov	r1, #1
 24585 000c FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
 104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Release RNG from reset state */
 106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 24586              		.loc 1 106 0
 24587 0010 4FF04000 		mov	r0, #64
 24588 0014 4FF00001 		mov	r1, #0
 24589 0018 FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
 107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 24590              		.loc 1 107 0
 24591 001c 80BD     		pop	{r7, pc}
 24592              		.cfi_endproc
 24593              	.LFE110:
 24595 001e 00BF     		.align	2
 24596              		.global	RNG_Cmd
 24597              		.thumb
 24598              		.thumb_func
 24600              	RNG_Cmd:
 24601              	.LFB111:
 108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Enables or disables the RNG peripheral.
 111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  NewState: new state of the RNG peripheral.
 112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be: ENABLE or DISABLE.
 113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_Cmd(FunctionalState NewState)
 116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 24602              		.loc 1 116 0
 24603              		.cfi_startproc
 24604              		@ args = 0, pretend = 0, frame = 8
 24605              		@ frame_needed = 1, uses_anonymous_args = 0
 24606              		@ link register save eliminated.
 24607 0020 80B4     		push	{r7}
 24608              	.LCFI2:
 24609              		.cfi_def_cfa_offset 4
 24610 0022 83B0     		sub	sp, sp, #12
 24611              	.LCFI3:
 24612              		.cfi_def_cfa_offset 16
 24613 0024 00AF     		add	r7, sp, #0
 24614              		.cfi_offset 7, -4
 24615              	.LCFI4:
 24616              		.cfi_def_cfa_register 7
 24617 0026 0346     		mov	r3, r0
 24618 0028 FB71     		strb	r3, [r7, #7]
 117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if (NewState != DISABLE)
 24619              		.loc 1 120 0
 24620 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 24621 002c 002B     		cmp	r3, #0
 24622 002e 06D0     		beq	.L3
 121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Enable the RNG */
 123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR |= RNG_CR_RNGEN;
 24623              		.loc 1 123 0
 24624 0030 084B     		ldr	r3, .L5
 24625 0032 084A     		ldr	r2, .L5
 24626 0034 1268     		ldr	r2, [r2, #0]
 24627 0036 42F00402 		orr	r2, r2, #4
 24628 003a 1A60     		str	r2, [r3, #0]
 24629 003c 05E0     		b	.L2
 24630              	.L3:
 124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Disable the RNG */
 128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR &= ~RNG_CR_RNGEN;
 24631              		.loc 1 128 0
 24632 003e 054B     		ldr	r3, .L5
 24633 0040 044A     		ldr	r2, .L5
 24634 0042 1268     		ldr	r2, [r2, #0]
 24635 0044 22F00402 		bic	r2, r2, #4
 24636 0048 1A60     		str	r2, [r3, #0]
 24637              	.L2:
 129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 24638              		.loc 1 130 0
 24639 004a 07F10C07 		add	r7, r7, #12
 24640 004e BD46     		mov	sp, r7
 24641 0050 80BC     		pop	{r7}
 24642 0052 7047     		bx	lr
 24643              	.L6:
 24644              		.align	2
 24645              	.L5:
 24646 0054 00080650 		.word	1342572544
 24647              		.cfi_endproc
 24648              	.LFE111:
 24650              		.align	2
 24651              		.global	RNG_GetRandomNumber
 24652              		.thumb
 24653              		.thumb_func
 24655              	RNG_GetRandomNumber:
 24656              	.LFB112:
 131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @}
 133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group2 Get 32 bit Random number function
 136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *  @brief    Get 32 bit Random number function 
 137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *
 138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @verbatim    
 140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================
 141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                       Get 32 bit Random number function
 142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================  
 143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   This section provides a function allowing to get the 32 bit Random number  
 144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   @note  Before to call this function you have to wait till DRDY flag is set,
 146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****          using RNG_GetFlagStatus(RNG_FLAG_DRDY) function. 
 147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
 148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @endverbatim
 149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
 150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Returns a 32-bit random number.
 155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *   
 156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   Before to call this function you have to wait till DRDY (data ready)
 157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         flag is set, using RNG_GetFlagStatus(RNG_FLAG_DRDY) function.
 158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   Each time the the Random number data is read (using RNG_GetRandomNumber()
 159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         function), the RNG_FLAG_DRDY flag is automatically cleared.
 160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   In the case of a seed error, the generation of random numbers is 
 161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         interrupted for as long as the SECS bit is '1'. If a number is 
 162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         available in the RNG_DR register, it must not be used because it may 
 163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         not have enough entropy. In this case, it is recommended to clear the 
 164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         SEIS bit(using RNG_ClearFlag(RNG_FLAG_SECS) function), then disable 
 165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         and enable the RNG peripheral (using RNG_Cmd() function) to 
 166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         reinitialize and restart the RNG.
 167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   In the case of a clock error, the RNG is no more able to generate 
 168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         random numbers because the PLL48CLK clock is not correct. User have 
 169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         to check that the clock controller is correctly configured to provide
 170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         the RNG clock and clear the CEIS bit (using RNG_ClearFlag(RNG_FLAG_CECS) 
 171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         function) . The clock error has no impact on the previously generated 
 172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         random numbers, and the RNG_DR register contents can be used.
 173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
 174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  None
 175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval 32-bit random number.
 176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** uint32_t RNG_GetRandomNumber(void)
 178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 24657              		.loc 1 178 0
 24658              		.cfi_startproc
 24659              		@ args = 0, pretend = 0, frame = 0
 24660              		@ frame_needed = 1, uses_anonymous_args = 0
 24661              		@ link register save eliminated.
 24662 0058 80B4     		push	{r7}
 24663              	.LCFI5:
 24664              		.cfi_def_cfa_offset 4
 24665 005a 00AF     		add	r7, sp, #0
 24666              		.cfi_offset 7, -4
 24667              	.LCFI6:
 24668              		.cfi_def_cfa_register 7
 179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Return the 32 bit random number from the DR register */
 180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   return RNG->DR;
 24669              		.loc 1 180 0
 24670 005c 024B     		ldr	r3, .L8
 24671 005e 9B68     		ldr	r3, [r3, #8]
 181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 24672              		.loc 1 181 0
 24673 0060 1846     		mov	r0, r3
 24674 0062 BD46     		mov	sp, r7
 24675 0064 80BC     		pop	{r7}
 24676 0066 7047     		bx	lr
 24677              	.L9:
 24678              		.align	2
 24679              	.L8:
 24680 0068 00080650 		.word	1342572544
 24681              		.cfi_endproc
 24682              	.LFE112:
 24684              		.align	2
 24685              		.global	RNG_ITConfig
 24686              		.thumb
 24687              		.thumb_func
 24689              	RNG_ITConfig:
 24690              	.LFB113:
 182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @}
 186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group3 Interrupts and flags management functions
 189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *  @brief   Interrupts and flags management functions
 190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *
 191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @verbatim   
 192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================
 193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                    Interrupts and flags management functions
 194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================  
 195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   This section provides functions allowing to configure the RNG Interrupts and 
 197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   to get the status and clear flags and Interrupts pending bits.
 198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   The RNG provides 3 Interrupts sources and 3 Flags:
 200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   Flags :
 202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ---------- 
 203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****      1. RNG_FLAG_DRDY :  In the case of the RNG_DR register contains valid 
 204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                          random data. it is cleared by reading the valid data 
 205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                          (using RNG_GetRandomNumber() function).
 206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****      2. RNG_FLAG_CECS : In the case of a seed error detection. 
 208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       
 209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****      3. RNG_FLAG_SECS : In the case of a clock error detection.
 210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****               
 211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   Interrupts :
 213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ------------
 214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    if enabled, an RNG interrupt is pending :
 215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     
 216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    1.  In the case of the RNG_DR register contains valid random data. 
 217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        This interrupt source is cleared once the RNG_DR register has been read 
 218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        (using RNG_GetRandomNumber() function) until a new valid value is 
 219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        computed. 
 220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
 221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    or 
 222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    2. In the case of a seed error : One of the following faulty sequences has 
 223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       been detected:
 224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - More than 64 consecutive bits at the same value (0 or 1)
 225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - More than 32 consecutive alternance of 0 and 1 (0101010101...01)
 226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       This interrupt source is cleared using RNG_ClearITPendingBit(RNG_IT_SEI)
 227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       function.
 228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
 229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    or
 230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    3. In the case of a clock error : the PLL48CLK (RNG peripheral clock source) 
 231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       was not correctly detected (fPLL48CLK< fHCLK/16).
 232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       This interrupt source is cleared using RNG_ClearITPendingBit(RNG_IT_CEI)
 233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       function.
 234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       @note In this case, User have to check that the clock controller is 
 235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****             correctly configured to provide the RNG clock. 
 236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   Managing the RNG controller events :
 238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ------------------------------------ 
 239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   The user should identify which mode will be used in his application to manage 
 240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   the RNG controller events: Polling mode or Interrupt mode.
 241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   1.  In the Polling Mode it is advised to use the following functions:
 243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_GetFlagStatus() : to check if flags events occur. 
 244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_ClearFlag()     : to clear the flags events.
 245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   @note RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag(). it is cleared only 
 247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****         by reading the Random number data.      
 248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   2.  In the Interrupt Mode it is advised to use the following functions:
 250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_ITConfig()       : to enable or disable the interrupt source.
 251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_GetITStatus()    : to check if Interrupt occurs.
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_ClearITPendingBit() : to clear the Interrupt pending Bit 
 253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                                 (corresponding Flag). 
 254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @endverbatim
 257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */ 
 259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Enables or disables the RNG interrupt.
 262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   The RNG provides 3 interrupt sources,
 263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Computed data is ready event (DRDY), and           
 264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Seed error Interrupt (SEI) and 
 265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Clock error Interrupt (CEI), 
 266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         all these interrupts sources are enabled by setting the IE bit in 
 267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         CR register. However, each interrupt have its specific status bit
 268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         (see RNG_GetITStatus() function) and clear bit except the DRDY event
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         (see RNG_ClearITPendingBit() function).
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  NewState: new state of the RNG interrupt.
 271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be: ENABLE or DISABLE.
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_ITConfig(FunctionalState NewState)
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 24691              		.loc 1 275 0
 24692              		.cfi_startproc
 24693              		@ args = 0, pretend = 0, frame = 8
 24694              		@ frame_needed = 1, uses_anonymous_args = 0
 24695              		@ link register save eliminated.
 24696 006c 80B4     		push	{r7}
 24697              	.LCFI7:
 24698              		.cfi_def_cfa_offset 4
 24699 006e 83B0     		sub	sp, sp, #12
 24700              	.LCFI8:
 24701              		.cfi_def_cfa_offset 16
 24702 0070 00AF     		add	r7, sp, #0
 24703              		.cfi_offset 7, -4
 24704              	.LCFI9:
 24705              		.cfi_def_cfa_register 7
 24706 0072 0346     		mov	r3, r0
 24707 0074 FB71     		strb	r3, [r7, #7]
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if (NewState != DISABLE)
 24708              		.loc 1 279 0
 24709 0076 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 24710 0078 002B     		cmp	r3, #0
 24711 007a 06D0     		beq	.L11
 280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Enable the RNG interrupt */
 282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR |= RNG_CR_IE;
 24712              		.loc 1 282 0
 24713 007c 084B     		ldr	r3, .L13
 24714 007e 084A     		ldr	r2, .L13
 24715 0080 1268     		ldr	r2, [r2, #0]
 24716 0082 42F00802 		orr	r2, r2, #8
 24717 0086 1A60     		str	r2, [r3, #0]
 24718 0088 05E0     		b	.L10
 24719              	.L11:
 283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Disable the RNG interrupt */
 287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR &= ~RNG_CR_IE;
 24720              		.loc 1 287 0
 24721 008a 054B     		ldr	r3, .L13
 24722 008c 044A     		ldr	r2, .L13
 24723 008e 1268     		ldr	r2, [r2, #0]
 24724 0090 22F00802 		bic	r2, r2, #8
 24725 0094 1A60     		str	r2, [r3, #0]
 24726              	.L10:
 288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 24727              		.loc 1 289 0
 24728 0096 07F10C07 		add	r7, r7, #12
 24729 009a BD46     		mov	sp, r7
 24730 009c 80BC     		pop	{r7}
 24731 009e 7047     		bx	lr
 24732              	.L14:
 24733              		.align	2
 24734              	.L13:
 24735 00a0 00080650 		.word	1342572544
 24736              		.cfi_endproc
 24737              	.LFE113:
 24739              		.align	2
 24740              		.global	RNG_GetFlagStatus
 24741              		.thumb
 24742              		.thumb_func
 24744              	RNG_GetFlagStatus:
 24745              	.LFB114:
 290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Checks whether the specified RNG flag is set or not.
 293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_FLAG: specifies the RNG flag to check.
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be one of the following values:
 295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_DRDY: Data Ready flag.
 296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_CECS: Clock Error Current flag.
 297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_SECS: Seed Error Current flag.
 298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval The new state of RNG_FLAG (SET or RESET).
 299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
 301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 24746              		.loc 1 301 0
 24747              		.cfi_startproc
 24748              		@ args = 0, pretend = 0, frame = 16
 24749              		@ frame_needed = 1, uses_anonymous_args = 0
 24750              		@ link register save eliminated.
 24751 00a4 80B4     		push	{r7}
 24752              	.LCFI10:
 24753              		.cfi_def_cfa_offset 4
 24754 00a6 85B0     		sub	sp, sp, #20
 24755              	.LCFI11:
 24756              		.cfi_def_cfa_offset 24
 24757 00a8 00AF     		add	r7, sp, #0
 24758              		.cfi_offset 7, -4
 24759              	.LCFI12:
 24760              		.cfi_def_cfa_register 7
 24761 00aa 0346     		mov	r3, r0
 24762 00ac FB71     		strb	r3, [r7, #7]
 302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   FlagStatus bitstatus = RESET;
 24763              		.loc 1 302 0
 24764 00ae 4FF00003 		mov	r3, #0
 24765 00b2 FB73     		strb	r3, [r7, #15]
 303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_GET_FLAG(RNG_FLAG));
 305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the status of the specified RNG flag */
 307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 24766              		.loc 1 307 0
 24767 00b4 0A4B     		ldr	r3, .L18
 24768 00b6 5A68     		ldr	r2, [r3, #4]
 24769 00b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 24770 00ba 02EA0303 		and	r3, r2, r3
 24771 00be 002B     		cmp	r3, #0
 24772 00c0 03D0     		beq	.L16
 308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_FLAG is set */
 310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = SET;
 24773              		.loc 1 310 0
 24774 00c2 4FF00103 		mov	r3, #1
 24775 00c6 FB73     		strb	r3, [r7, #15]
 24776 00c8 02E0     		b	.L17
 24777              	.L16:
 311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_FLAG is reset */
 315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = RESET;
 24778              		.loc 1 315 0
 24779 00ca 4FF00003 		mov	r3, #0
 24780 00ce FB73     		strb	r3, [r7, #15]
 24781              	.L17:
 316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Return the RNG_FLAG status */
 318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   return  bitstatus;
 24782              		.loc 1 318 0
 24783 00d0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 24784              		.loc 1 319 0
 24785 00d2 1846     		mov	r0, r3
 24786 00d4 07F11407 		add	r7, r7, #20
 24787 00d8 BD46     		mov	sp, r7
 24788 00da 80BC     		pop	{r7}
 24789 00dc 7047     		bx	lr
 24790              	.L19:
 24791 00de 00BF     		.align	2
 24792              	.L18:
 24793 00e0 00080650 		.word	1342572544
 24794              		.cfi_endproc
 24795              	.LFE114:
 24797              		.align	2
 24798              		.global	RNG_ClearFlag
 24799              		.thumb
 24800              		.thumb_func
 24802              	RNG_ClearFlag:
 24803              	.LFB115:
 320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Clears the RNG flags.
 324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_FLAG: specifies the flag to clear. 
 325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be any combination of the following values:
 326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_CECS: Clock Error Current flag.
 327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_SECS: Seed Error Current flag.
 328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag() function. 
 329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         This flag is cleared only by reading the Random number data (using 
 330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         RNG_GetRandomNumber() function).                           
 331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_ClearFlag(uint8_t RNG_FLAG)
 334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 24804              		.loc 1 334 0
 24805              		.cfi_startproc
 24806              		@ args = 0, pretend = 0, frame = 8
 24807              		@ frame_needed = 1, uses_anonymous_args = 0
 24808              		@ link register save eliminated.
 24809 00e4 80B4     		push	{r7}
 24810              	.LCFI13:
 24811              		.cfi_def_cfa_offset 4
 24812 00e6 83B0     		sub	sp, sp, #12
 24813              	.LCFI14:
 24814              		.cfi_def_cfa_offset 16
 24815 00e8 00AF     		add	r7, sp, #0
 24816              		.cfi_offset 7, -4
 24817              	.LCFI15:
 24818              		.cfi_def_cfa_register 7
 24819 00ea 0346     		mov	r3, r0
 24820 00ec FB71     		strb	r3, [r7, #7]
 335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
 337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Clear the selected RNG flags */
 338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 24821              		.loc 1 338 0
 24822 00ee 064B     		ldr	r3, .L21
 24823 00f0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 24824 00f2 4FEA0212 		lsl	r2, r2, #4
 24825 00f6 6FEA0202 		mvn	r2, r2
 24826 00fa 5A60     		str	r2, [r3, #4]
 339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 24827              		.loc 1 339 0
 24828 00fc 07F10C07 		add	r7, r7, #12
 24829 0100 BD46     		mov	sp, r7
 24830 0102 80BC     		pop	{r7}
 24831 0104 7047     		bx	lr
 24832              	.L22:
 24833 0106 00BF     		.align	2
 24834              	.L21:
 24835 0108 00080650 		.word	1342572544
 24836              		.cfi_endproc
 24837              	.LFE115:
 24839              		.align	2
 24840              		.global	RNG_GetITStatus
 24841              		.thumb
 24842              		.thumb_func
 24844              	RNG_GetITStatus:
 24845              	.LFB116:
 340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Checks whether the specified RNG interrupt has occurred or not.
 343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_IT: specifies the RNG interrupt source to check.
 344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be one of the following values:
 345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_CEI: Clock Error Interrupt.
 346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
 347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval The new state of RNG_IT (SET or RESET).
 348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** ITStatus RNG_GetITStatus(uint8_t RNG_IT)
 350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 24846              		.loc 1 350 0
 24847              		.cfi_startproc
 24848              		@ args = 0, pretend = 0, frame = 16
 24849              		@ frame_needed = 1, uses_anonymous_args = 0
 24850              		@ link register save eliminated.
 24851 010c 80B4     		push	{r7}
 24852              	.LCFI16:
 24853              		.cfi_def_cfa_offset 4
 24854 010e 85B0     		sub	sp, sp, #20
 24855              	.LCFI17:
 24856              		.cfi_def_cfa_offset 24
 24857 0110 00AF     		add	r7, sp, #0
 24858              		.cfi_offset 7, -4
 24859              	.LCFI18:
 24860              		.cfi_def_cfa_register 7
 24861 0112 0346     		mov	r3, r0
 24862 0114 FB71     		strb	r3, [r7, #7]
 351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ITStatus bitstatus = RESET;
 24863              		.loc 1 351 0
 24864 0116 4FF00003 		mov	r3, #0
 24865 011a FB73     		strb	r3, [r7, #15]
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_GET_IT(RNG_IT));
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the status of the specified RNG interrupt */
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 24866              		.loc 1 356 0
 24867 011c 0A4B     		ldr	r3, .L26
 24868 011e 5A68     		ldr	r2, [r3, #4]
 24869 0120 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 24870 0122 02EA0303 		and	r3, r2, r3
 24871 0126 002B     		cmp	r3, #0
 24872 0128 03D0     		beq	.L24
 357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_IT is set */
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = SET;
 24873              		.loc 1 359 0
 24874 012a 4FF00103 		mov	r3, #1
 24875 012e FB73     		strb	r3, [r7, #15]
 24876 0130 02E0     		b	.L25
 24877              	.L24:
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_IT is reset */
 364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = RESET;
 24878              		.loc 1 364 0
 24879 0132 4FF00003 		mov	r3, #0
 24880 0136 FB73     		strb	r3, [r7, #15]
 24881              	.L25:
 365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Return the RNG_IT status */
 367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   return bitstatus;
 24882              		.loc 1 367 0
 24883 0138 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 24884              		.loc 1 368 0
 24885 013a 1846     		mov	r0, r3
 24886 013c 07F11407 		add	r7, r7, #20
 24887 0140 BD46     		mov	sp, r7
 24888 0142 80BC     		pop	{r7}
 24889 0144 7047     		bx	lr
 24890              	.L27:
 24891 0146 00BF     		.align	2
 24892              	.L26:
 24893 0148 00080650 		.word	1342572544
 24894              		.cfi_endproc
 24895              	.LFE116:
 24897              		.align	2
 24898              		.global	RNG_ClearITPendingBit
 24899              		.thumb
 24900              		.thumb_func
 24902              	RNG_ClearITPendingBit:
 24903              	.LFB117:
 369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Clears the RNG interrupt pending bit(s).
 373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_IT: specifies the RNG interrupt pending bit(s) to clear.
 374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be any combination of the following values:
 375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_CEI: Clock Error Interrupt.
 376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_SEI: Seed Error Interrupt.
 377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_ClearITPendingBit(uint8_t RNG_IT)
 380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 24904              		.loc 1 380 0
 24905              		.cfi_startproc
 24906              		@ args = 0, pretend = 0, frame = 8
 24907              		@ frame_needed = 1, uses_anonymous_args = 0
 24908              		@ link register save eliminated.
 24909 014c 80B4     		push	{r7}
 24910              	.LCFI19:
 24911              		.cfi_def_cfa_offset 4
 24912 014e 83B0     		sub	sp, sp, #12
 24913              	.LCFI20:
 24914              		.cfi_def_cfa_offset 16
 24915 0150 00AF     		add	r7, sp, #0
 24916              		.cfi_offset 7, -4
 24917              	.LCFI21:
 24918              		.cfi_def_cfa_register 7
 24919 0152 0346     		mov	r3, r0
 24920 0154 FB71     		strb	r3, [r7, #7]
 381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_IT(RNG_IT));
 383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Clear the selected RNG interrupt pending bit */
 385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RNG->SR = (uint8_t)~RNG_IT;
 24921              		.loc 1 385 0
 24922 0156 054B     		ldr	r3, .L29
 24923 0158 FA79     		ldrb	r2, [r7, #7]
 24924 015a 6FEA0202 		mvn	r2, r2
 24925 015e D2B2     		uxtb	r2, r2
 24926 0160 5A60     		str	r2, [r3, #4]
 386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 24927              		.loc 1 386 0
 24928 0162 07F10C07 		add	r7, r7, #12
 24929 0166 BD46     		mov	sp, r7
 24930 0168 80BC     		pop	{r7}
 24931 016a 7047     		bx	lr
 24932              	.L30:
 24933              		.align	2
 24934              	.L29:
 24935 016c 00080650 		.word	1342572544
 24936              		.cfi_endproc
 24937              	.LFE117:
 24939              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rng.c
     /tmp/ccJf5SEX.s:24563  .text:00000000 $t
     /tmp/ccJf5SEX.s:24568  .text:00000000 RNG_DeInit
     /tmp/ccJf5SEX.s:24600  .text:00000020 RNG_Cmd
     /tmp/ccJf5SEX.s:24646  .text:00000054 $d
     /tmp/ccJf5SEX.s:24650  .text:00000058 $t
     /tmp/ccJf5SEX.s:24655  .text:00000058 RNG_GetRandomNumber
     /tmp/ccJf5SEX.s:24680  .text:00000068 $d
     /tmp/ccJf5SEX.s:24684  .text:0000006c $t
     /tmp/ccJf5SEX.s:24689  .text:0000006c RNG_ITConfig
     /tmp/ccJf5SEX.s:24735  .text:000000a0 $d
     /tmp/ccJf5SEX.s:24739  .text:000000a4 $t
     /tmp/ccJf5SEX.s:24744  .text:000000a4 RNG_GetFlagStatus
     /tmp/ccJf5SEX.s:24793  .text:000000e0 $d
     /tmp/ccJf5SEX.s:24797  .text:000000e4 $t
     /tmp/ccJf5SEX.s:24802  .text:000000e4 RNG_ClearFlag
     /tmp/ccJf5SEX.s:24835  .text:00000108 $d
     /tmp/ccJf5SEX.s:24839  .text:0000010c $t
     /tmp/ccJf5SEX.s:24844  .text:0000010c RNG_GetITStatus
     /tmp/ccJf5SEX.s:24893  .text:00000148 $d
     /tmp/ccJf5SEX.s:24897  .text:0000014c $t
     /tmp/ccJf5SEX.s:24902  .text:0000014c RNG_ClearITPendingBit
     /tmp/ccJf5SEX.s:24935  .text:0000016c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_AHB2PeriphResetCmd
