   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f4xx_rtc.c"
  23              	.Ltext0:
  24              		.file 1 "../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c"
 24595              		.align	2
 24596              		.global	RTC_DeInit
 24597              		.thumb
 24598              		.thumb_func
 24600              	RTC_DeInit:
 24601              	.LFB110:
   1:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
   2:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
   3:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @version V1.0.2
   6:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @date    05-March-2012
   7:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Initialization
  10:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Calendar (Time and Date) configuration
  11:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Alarms (Alarm A and Alarm B) configuration
  12:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - WakeUp Timer configuration
  13:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Daylight Saving configuration
  14:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Output pin Configuration
  15:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Coarse digital Calibration configuration
  16:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Smooth digital Calibration configuration
  17:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - TimeStamp configuration
  18:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Tampers configuration
  19:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Backup Data Registers configuration
  20:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Shift control synchronisation    
  21:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Interrupts and flags management
  23:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  24:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @verbatim
  25:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  26:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  27:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                               Backup Domain Operating Condition
  28:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  29:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The real-time clock (RTC), the RTC backup registers, and the backup 
  30:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  31:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          VDD supply is powered off.
  32:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To retain the content of the RTC backup registers, backup SRAM, 
  33:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          and supply the RTC when VDD is turned off, VBAT pin can be connected 
  34:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to an optional standby voltage supplied by a battery or by another 
  35:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          source.
  36:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  37:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To allow the RTC to operate even when the main digital supply (VDD) 
  38:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          is turned off, the VBAT pin powers the following blocks:
  39:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - The RTC
  40:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - The LSE oscillator
  41:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - The backup SRAM when the low power backup regulator is enabled
  42:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            4 - PC13 to PC15 I/Os, plus PI8 I/O (when available)
  43:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  44:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VDD (analog switch connected 
  45:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VDD), the following functions are available:
  46:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as either GPIO or LSE pins
  47:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as a GPIO or as the RTC_AF1 pin
  48:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as a GPIO or as the RTC_AF2 pin
  49:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  50:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VBAT (analog switch connected 
  51:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VBAT because VDD is not present), the following functions are available:
  52:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as LSE pins only
  53:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as the RTC_AF1 pin 
  54:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as the RTC_AF2 pin
  55:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  56:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  57:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Backup Domain Reset
  58:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  59:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The backup domain reset sets all RTC registers and the RCC_BDCR 
  60:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          register to their reset values. The BKPSRAM is not affected by this
  61:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          reset. The only way of resetting the BKPSRAM is through the Flash 
  62:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          interface by requesting a protection level change from 1 to 0.
  63:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          A backup domain reset is generated when one of the following events
  64:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          occurs:
  65:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - Software reset, triggered by setting the BDRST bit in the 
  66:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC Backup domain control register (RCC_BDCR). You can use the
  67:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC_BackupResetCmd().
  68:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - VDD or VBAT power on, if both supplies have previously been
  69:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                powered off.
  70:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  71:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  72:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   Backup Domain Access
  73:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  74:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          After reset, the backup domain (RTC registers, RTC backup data 
  75:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          registers and backup SRAM) is protected against possible unwanted 
  76:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          write accesses. 
  77:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To enable access to the RTC Domain and RTC registers, proceed as follows:
  78:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Power Controller (PWR) APB1 interface clock using the
  79:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RCC_APB1PeriphClockCmd() function.
  80:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  81:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Select the RTC clock source using the RCC_RTCCLKConfig() function.
  82:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable RTC Clock using the RCC_RTCCLKCmd() function.
  83:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  84:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  85:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   RTC Driver: how to use it
  86:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  87:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC domain access (see description in the section above)
  88:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Prescaler (Asynchronous and Synchronous) and
  89:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC hour format using the RTC_Init() function.
  90:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  91:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Time and Date configuration
  92:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===========================
  93:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  94:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and RTC_SetDate() functions.
  95:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate()
  96:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              functions.
  97:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Use the RTC_DayLightSavingConfig() function to add or sub one
  98:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              hour to the RTC Calendar.    
  99:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Alarm configuration
 101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================
 102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Alarm use the RTC_SetAlarm() function.
 103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Alarm, use the RTC_GetAlarm() function.
 105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          RTC Wakeup configuration
 108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ========================
 109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() 
 112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Outputs configuration
 118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =====================
 119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC has 2 different outputs:
 120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and WaKeUp signals.          
 122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the selected RTC signal on RTC_AF1 pin, use the 
 123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_OutputConfig() function.                
 124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB: this output is 512Hz signal or 1Hz .  
 125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the RTC Clock on RTC_AF1 pin, use the RTC_CalibOutputCmd()
 126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Smooth digital Calibration configuration
 129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================    
 130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Original Digital Calibration Value and the corresponding
 131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Coarse digital Calibration configuration
 135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================
 136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Coarse Calibration Value and the corresponding
 137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              sign using the RTC_CoarseCalibConfig() function.
 138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() 
 139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          TimeStamp configuration
 142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =======================
 143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC_AF1 trigger and enables the RTC TimeStamp 
 144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              using the RTC_TimeStampCmd() function.
 145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp Time and Date register, use the 
 146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStamp() function.
 147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp SubSecond register, use the 
 148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStampSubSecond() function.
 149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TamperPinSelection()
 152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin.     
 153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Tamper configuration
 155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ====================
 156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *             - Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function. 
 159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() function
 161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper precharge or discharge duration using 
 164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TamperPinsPrechargeDuration() function.
 165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Time stamp on Tamper detection event using  
 167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TSOnTamperDetecCmd() function.
 168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 depending on the value of the TSINSEL bit in the 
 170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TimeStampPinSelection()
 171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin. 
 172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Backup Data Registers configuration
 174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================
 175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.  
 177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                  RTC and low power modes
 182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The MCU can be woken up from a low power mode by an RTC alternate 
 184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           function.
 185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           These RTC alternate functions can wake up the system from the Stop 
 188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           and Standby lowpower modes.
 189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The system can also wake up from low power modes without depending 
 190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           or the RTC wakeup events.
 192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC provides a programmable time base for waking up from the 
 193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Stop or Standby mode at regular intervals.
 194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Wakeup from STOP and Standby modes is possible only when the RTC 
 195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           clock source is LSE or LSI.
 196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF1 alternate functions
 199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF1 pin (PC13) can be used for the following purposes:
 201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM output
 202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB output
 203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    
 208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin 
 209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |          |          |           |              | selection  |  selection   
 210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | Calibration out |          |          |           |              |    Don't   |     Don't    
 218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     
 219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |          |          |           |              |            |     Don't    
 221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     0    |    0     |     1     |      0       |      0     |     care     
 222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |          |          |           |              |            |              
 224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       
 225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |          |          |           |              |            |              
 226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |          |          |           |              |    Don't   |              
 228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0    |    0     |     0     |      1       |    care    |      0       
 229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  
 231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF2 alternate functions
 236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF2 pin (PI8) can be used for the following purposes:
 238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |           |              | selection  |  selection   |Configuration |
 245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |           |              |            |     Don't    |              |
 247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |           |              |            |              |              |
 250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |           |              |            |              |              |
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |           |              |    Don't   |              |              |
 254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
 257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @endverbatim
 261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @attention
 264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
 266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * You may not use this file except in compliance with the License.
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * You may obtain a copy of the License at:
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * Unless required by applicable law or agreed to in writing, software 
 274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * See the License for the specific language governing permissions and
 277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * limitations under the License.
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC 
 290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Masks Definition */
 298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F | \
 306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RECALPF | RTC_FLAG_SHPF))
 307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                  Initialization and Configuration functions
 331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to initialize and configure the RTC
 334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Write protection, enter and exit the RTC initialization mode, RTC registers
 336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   synchronization check and reference clock detection enable.
 337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   1. The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      split into 2 programmable prescalers to minimize power consumption.
 340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - When both prescalers are used, it is recommended to configure the asynchronous
 342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****        prescaler to a high value to minimize consumption.
 343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   2. All RTC registers are Write protected. Writing to the RTC registers
 345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      is enabled by writing a key into the Write Protection register, RTC_WPR.
 346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   3. To Configure the RTC Calendar, user application should enter initialization
 348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      mode. In this mode, the calendar counter is stopped and its value can be 
 349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      updated. When the initialization sequence is complete, the calendar restarts 
 350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      counting after 4 RTCCLK cycles.
 351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   4. To read the calendar through the shadow registers after Calendar initialization,
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      calendar update or after wakeup from low power modes the software must first 
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      clear the RSF flag. The software must then wait until it is set again before 
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      reading the calendar, which means that the calendar registers have been 
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      correctly copied into the RTC_TR and RTC_DR shadow registers.
 357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      The RTC_WaitForSynchro() function implements the above software sequence 
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      (RSF clear and RSF check).
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         registers.       
 368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 24602              		.loc 1 374 0
 24603              		.cfi_startproc
 24604              		@ args = 0, pretend = 0, frame = 16
 24605              		@ frame_needed = 1, uses_anonymous_args = 0
 24606 0000 80B5     		push	{r7, lr}
 24607              	.LCFI0:
 24608              		.cfi_def_cfa_offset 8
 24609 0002 84B0     		sub	sp, sp, #16
 24610              	.LCFI1:
 24611              		.cfi_def_cfa_offset 24
 24612 0004 00AF     		add	r7, sp, #0
 24613              		.cfi_offset 14, -4
 24614              		.cfi_offset 7, -8
 24615              	.LCFI2:
 24616              		.cfi_def_cfa_register 7
 375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 24617              		.loc 1 375 0
 24618 0006 4FF00003 		mov	r3, #0
 24619 000a 7B60     		str	r3, [r7, #4]
 376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 24620              		.loc 1 376 0
 24621 000c 4FF00003 		mov	r3, #0
 24622 0010 BB60     		str	r3, [r7, #8]
 377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 24623              		.loc 1 377 0
 24624 0012 4FF00003 		mov	r3, #0
 24625 0016 FB73     		strb	r3, [r7, #15]
 378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 24626              		.loc 1 380 0
 24627 0018 3F4B     		ldr	r3, .L8
 24628 001a 4FF0CA02 		mov	r2, #202
 24629 001e 5A62     		str	r2, [r3, #36]
 381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 24630              		.loc 1 381 0
 24631 0020 3D4B     		ldr	r3, .L8
 24632 0022 4FF05302 		mov	r2, #83
 24633 0026 5A62     		str	r2, [r3, #36]
 382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 24634              		.loc 1 384 0
 24635 0028 FFF7FEFF 		bl	RTC_EnterInitMode
 24636 002c 0346     		mov	r3, r0
 24637 002e 002B     		cmp	r3, #0
 24638 0030 03D1     		bne	.L2
 385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 24639              		.loc 1 386 0
 24640 0032 4FF00003 		mov	r3, #0
 24641 0036 FB73     		strb	r3, [r7, #15]
 24642 0038 64E0     		b	.L3
 24643              	.L2:
 387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
 24644              		.loc 1 391 0
 24645 003a 374B     		ldr	r3, .L8
 24646 003c 4FF00002 		mov	r2, #0
 24647 0040 1A60     		str	r2, [r3, #0]
 392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 24648              		.loc 1 392 0
 24649 0042 354B     		ldr	r3, .L8
 24650 0044 42F20112 		movw	r2, #8449
 24651 0048 5A60     		str	r2, [r3, #4]
 393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
 24652              		.loc 1 394 0
 24653 004a 334B     		ldr	r3, .L8
 24654 004c 324A     		ldr	r2, .L8
 24655 004e 9268     		ldr	r2, [r2, #8]
 24656 0050 02F00702 		and	r2, r2, #7
 24657 0054 9A60     		str	r2, [r3, #8]
 24658              	.L5:
 395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 24659              		.loc 1 399 0 discriminator 1
 24660 0056 304B     		ldr	r3, .L8
 24661 0058 DB68     		ldr	r3, [r3, #12]
 24662 005a 03F00403 		and	r3, r3, #4
 24663 005e BB60     		str	r3, [r7, #8]
 400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 24664              		.loc 1 400 0 discriminator 1
 24665 0060 7B68     		ldr	r3, [r7, #4]
 24666 0062 03F10103 		add	r3, r3, #1
 24667 0066 7B60     		str	r3, [r7, #4]
 401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 24668              		.loc 1 401 0 discriminator 1
 24669 0068 7B68     		ldr	r3, [r7, #4]
 24670 006a B3F5803F 		cmp	r3, #65536
 24671 006e 02D0     		beq	.L4
 24672 0070 BB68     		ldr	r3, [r7, #8]
 24673 0072 002B     		cmp	r3, #0
 24674 0074 EFD0     		beq	.L5
 24675              	.L4:
 402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 24676              		.loc 1 403 0
 24677 0076 284B     		ldr	r3, .L8
 24678 0078 DB68     		ldr	r3, [r3, #12]
 24679 007a 03F00403 		and	r3, r3, #4
 24680 007e 002B     		cmp	r3, #0
 24681 0080 03D1     		bne	.L6
 404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 24682              		.loc 1 405 0
 24683 0082 4FF00003 		mov	r3, #0
 24684 0086 FB73     		strb	r3, [r7, #15]
 24685 0088 3CE0     		b	.L3
 24686              	.L6:
 406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 24687              		.loc 1 410 0
 24688 008a 234B     		ldr	r3, .L8
 24689 008c 9B68     		ldr	r3, [r3, #8]
 24690 008e 224B     		ldr	r3, .L8
 24691 0090 4FF00002 		mov	r2, #0
 24692 0094 9A60     		str	r2, [r3, #8]
 411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 24693              		.loc 1 411 0
 24694 0096 204B     		ldr	r3, .L8
 24695 0098 4FF6FF72 		movw	r2, #65535
 24696 009c 5A61     		str	r2, [r3, #20]
 412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 24697              		.loc 1 412 0
 24698 009e 1E4B     		ldr	r3, .L8
 24699 00a0 1E4A     		ldr	r2, .L8+4
 24700 00a2 1A61     		str	r2, [r3, #16]
 413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 24701              		.loc 1 413 0
 24702 00a4 1C4B     		ldr	r3, .L8
 24703 00a6 4FF00002 		mov	r2, #0
 24704 00aa 9A61     		str	r2, [r3, #24]
 414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 24705              		.loc 1 414 0
 24706 00ac 1A4B     		ldr	r3, .L8
 24707 00ae 4FF00002 		mov	r2, #0
 24708 00b2 DA61     		str	r2, [r3, #28]
 415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 24709              		.loc 1 415 0
 24710 00b4 184B     		ldr	r3, .L8
 24711 00b6 4FF00002 		mov	r2, #0
 24712 00ba 1A62     		str	r2, [r3, #32]
 416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)0x00000000;
 24713              		.loc 1 416 0
 24714 00bc 164B     		ldr	r3, .L8
 24715 00be 4FF00002 		mov	r2, #0
 24716 00c2 DA62     		str	r2, [r3, #44]
 417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALR = (uint32_t)0x00000000;
 24717              		.loc 1 417 0
 24718 00c4 144B     		ldr	r3, .L8
 24719 00c6 4FF00002 		mov	r2, #0
 24720 00ca DA63     		str	r2, [r3, #60]
 418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMASSR = (uint32_t)0x00000000;
 24721              		.loc 1 418 0
 24722 00cc 124B     		ldr	r3, .L8
 24723 00ce 4FF00002 		mov	r2, #0
 24724 00d2 5A64     		str	r2, [r3, #68]
 419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBSSR = (uint32_t)0x00000000;
 24725              		.loc 1 419 0
 24726 00d4 104B     		ldr	r3, .L8
 24727 00d6 4FF00002 		mov	r2, #0
 24728 00da 9A64     		str	r2, [r3, #72]
 420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 24729              		.loc 1 422 0
 24730 00dc 0E4B     		ldr	r3, .L8
 24731 00de 4FF00002 		mov	r2, #0
 24732 00e2 DA60     		str	r2, [r3, #12]
 423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 24733              		.loc 1 425 0
 24734 00e4 0C4B     		ldr	r3, .L8
 24735 00e6 4FF00002 		mov	r2, #0
 24736 00ea 1A64     		str	r2, [r3, #64]
 426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 24737              		.loc 1 427 0
 24738 00ec FFF7FEFF 		bl	RTC_WaitForSynchro
 24739 00f0 0346     		mov	r3, r0
 24740 00f2 002B     		cmp	r3, #0
 24741 00f4 03D1     		bne	.L7
 428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 24742              		.loc 1 429 0
 24743 00f6 4FF00003 		mov	r3, #0
 24744 00fa FB73     		strb	r3, [r7, #15]
 24745 00fc 02E0     		b	.L3
 24746              	.L7:
 430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
 432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 24747              		.loc 1 433 0
 24748 00fe 4FF00103 		mov	r3, #1
 24749 0102 FB73     		strb	r3, [r7, #15]
 24750              	.L3:
 434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 24751              		.loc 1 439 0
 24752 0104 044B     		ldr	r3, .L8
 24753 0106 4FF0FF02 		mov	r2, #255
 24754 010a 5A62     		str	r2, [r3, #36]
 440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 24755              		.loc 1 441 0
 24756 010c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 24757              		.loc 1 442 0
 24758 010e 1846     		mov	r0, r3
 24759 0110 07F11007 		add	r7, r7, #16
 24760 0114 BD46     		mov	sp, r7
 24761 0116 80BD     		pop	{r7, pc}
 24762              	.L9:
 24763              		.align	2
 24764              	.L8:
 24765 0118 00280040 		.word	1073752064
 24766 011c FF007F00 		.word	8323327
 24767              		.cfi_endproc
 24768              	.LFE110:
 24770              		.align	2
 24771              		.global	RTC_Init
 24772              		.thumb
 24773              		.thumb_func
 24775              	RTC_Init:
 24776              	.LFB111:
 443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization mode only.  
 451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 24777              		.loc 1 456 0
 24778              		.cfi_startproc
 24779              		@ args = 0, pretend = 0, frame = 16
 24780              		@ frame_needed = 1, uses_anonymous_args = 0
 24781 0120 80B5     		push	{r7, lr}
 24782              	.LCFI3:
 24783              		.cfi_def_cfa_offset 8
 24784 0122 84B0     		sub	sp, sp, #16
 24785              	.LCFI4:
 24786              		.cfi_def_cfa_offset 24
 24787 0124 00AF     		add	r7, sp, #0
 24788              		.cfi_offset 14, -4
 24789              		.cfi_offset 7, -8
 24790              	.LCFI5:
 24791              		.cfi_def_cfa_register 7
 24792 0126 7860     		str	r0, [r7, #4]
 457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 24793              		.loc 1 457 0
 24794 0128 4FF00003 		mov	r3, #0
 24795 012c FB73     		strb	r3, [r7, #15]
 458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 24796              		.loc 1 465 0
 24797 012e 1E4B     		ldr	r3, .L13
 24798 0130 4FF0CA02 		mov	r2, #202
 24799 0134 5A62     		str	r2, [r3, #36]
 466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 24800              		.loc 1 466 0
 24801 0136 1C4B     		ldr	r3, .L13
 24802 0138 4FF05302 		mov	r2, #83
 24803 013c 5A62     		str	r2, [r3, #36]
 467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 24804              		.loc 1 469 0
 24805 013e FFF7FEFF 		bl	RTC_EnterInitMode
 24806 0142 0346     		mov	r3, r0
 24807 0144 002B     		cmp	r3, #0
 24808 0146 03D1     		bne	.L11
 470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 24809              		.loc 1 471 0
 24810 0148 4FF00003 		mov	r3, #0
 24811 014c FB73     		strb	r3, [r7, #15]
 24812 014e 20E0     		b	.L12
 24813              	.L11:
 472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 24814              		.loc 1 476 0
 24815 0150 154B     		ldr	r3, .L13
 24816 0152 154A     		ldr	r2, .L13
 24817 0154 9268     		ldr	r2, [r2, #8]
 24818 0156 22F04002 		bic	r2, r2, #64
 24819 015a 9A60     		str	r2, [r3, #8]
 477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 24820              		.loc 1 478 0
 24821 015c 124B     		ldr	r3, .L13
 24822 015e 124A     		ldr	r2, .L13
 24823 0160 9168     		ldr	r1, [r2, #8]
 24824 0162 7A68     		ldr	r2, [r7, #4]
 24825 0164 1268     		ldr	r2, [r2, #0]
 24826 0166 41EA0202 		orr	r2, r1, r2
 24827 016a 9A60     		str	r2, [r3, #8]
 479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 24828              		.loc 1 481 0
 24829 016c 0E4B     		ldr	r3, .L13
 24830 016e 7A68     		ldr	r2, [r7, #4]
 24831 0170 9268     		ldr	r2, [r2, #8]
 24832 0172 1A61     		str	r2, [r3, #16]
 482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 24833              		.loc 1 482 0
 24834 0174 0C4B     		ldr	r3, .L13
 24835 0176 0C4A     		ldr	r2, .L13
 24836 0178 1169     		ldr	r1, [r2, #16]
 24837 017a 7A68     		ldr	r2, [r7, #4]
 24838 017c 5268     		ldr	r2, [r2, #4]
 24839 017e 4FEA0242 		lsl	r2, r2, #16
 24840 0182 41EA0202 		orr	r2, r1, r2
 24841 0186 1A61     		str	r2, [r3, #16]
 483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 24842              		.loc 1 485 0
 24843 0188 FFF7FEFF 		bl	RTC_ExitInitMode
 486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 24844              		.loc 1 487 0
 24845 018c 4FF00103 		mov	r3, #1
 24846 0190 FB73     		strb	r3, [r7, #15]
 24847              	.L12:
 488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 24848              		.loc 1 490 0
 24849 0192 054B     		ldr	r3, .L13
 24850 0194 4FF0FF02 		mov	r2, #255
 24851 0198 5A62     		str	r2, [r3, #36]
 491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 24852              		.loc 1 492 0
 24853 019a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 24854              		.loc 1 493 0
 24855 019c 1846     		mov	r0, r3
 24856 019e 07F11007 		add	r7, r7, #16
 24857 01a2 BD46     		mov	sp, r7
 24858 01a4 80BD     		pop	{r7, pc}
 24859              	.L14:
 24860 01a6 00BF     		.align	2
 24861              	.L13:
 24862 01a8 00280040 		.word	1073752064
 24863              		.cfi_endproc
 24864              	.LFE111:
 24866              		.align	2
 24867              		.global	RTC_StructInit
 24868              		.thumb
 24869              		.thumb_func
 24871              	RTC_StructInit:
 24872              	.LFB112:
 494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 24873              		.loc 1 502 0
 24874              		.cfi_startproc
 24875              		@ args = 0, pretend = 0, frame = 8
 24876              		@ frame_needed = 1, uses_anonymous_args = 0
 24877              		@ link register save eliminated.
 24878 01ac 80B4     		push	{r7}
 24879              	.LCFI6:
 24880              		.cfi_def_cfa_offset 4
 24881 01ae 83B0     		sub	sp, sp, #12
 24882              	.LCFI7:
 24883              		.cfi_def_cfa_offset 16
 24884 01b0 00AF     		add	r7, sp, #0
 24885              		.cfi_offset 7, -4
 24886              	.LCFI8:
 24887              		.cfi_def_cfa_register 7
 24888 01b2 7860     		str	r0, [r7, #4]
 503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 24889              		.loc 1 504 0
 24890 01b4 7B68     		ldr	r3, [r7, #4]
 24891 01b6 4FF00002 		mov	r2, #0
 24892 01ba 1A60     		str	r2, [r3, #0]
 505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 24893              		.loc 1 507 0
 24894 01bc 7B68     		ldr	r3, [r7, #4]
 24895 01be 4FF07F02 		mov	r2, #127
 24896 01c2 5A60     		str	r2, [r3, #4]
 508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 24897              		.loc 1 510 0
 24898 01c4 7B68     		ldr	r3, [r7, #4]
 24899 01c6 4FF0FF02 		mov	r2, #255
 24900 01ca 9A60     		str	r2, [r3, #8]
 511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 24901              		.loc 1 511 0
 24902 01cc 07F10C07 		add	r7, r7, #12
 24903 01d0 BD46     		mov	sp, r7
 24904 01d2 80BC     		pop	{r7}
 24905 01d4 7047     		bx	lr
 24906              		.cfi_endproc
 24907              	.LFE112:
 24909 01d6 00BF     		.align	2
 24910              		.global	RTC_WriteProtectionCmd
 24911              		.thumb
 24912              		.thumb_func
 24914              	RTC_WriteProtectionCmd:
 24915              	.LFB113:
 512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 24916              		.loc 1 524 0
 24917              		.cfi_startproc
 24918              		@ args = 0, pretend = 0, frame = 8
 24919              		@ frame_needed = 1, uses_anonymous_args = 0
 24920              		@ link register save eliminated.
 24921 01d8 80B4     		push	{r7}
 24922              	.LCFI9:
 24923              		.cfi_def_cfa_offset 4
 24924 01da 83B0     		sub	sp, sp, #12
 24925              	.LCFI10:
 24926              		.cfi_def_cfa_offset 16
 24927 01dc 00AF     		add	r7, sp, #0
 24928              		.cfi_offset 7, -4
 24929              	.LCFI11:
 24930              		.cfi_def_cfa_register 7
 24931 01de 0346     		mov	r3, r0
 24932 01e0 FB71     		strb	r3, [r7, #7]
 525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 24933              		.loc 1 528 0
 24934 01e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 24935 01e4 002B     		cmp	r3, #0
 24936 01e6 04D0     		beq	.L17
 529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 24937              		.loc 1 531 0
 24938 01e8 084B     		ldr	r3, .L19
 24939 01ea 4FF0FF02 		mov	r2, #255
 24940 01ee 5A62     		str	r2, [r3, #36]
 24941 01f0 07E0     		b	.L16
 24942              	.L17:
 532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 24943              		.loc 1 536 0
 24944 01f2 064B     		ldr	r3, .L19
 24945 01f4 4FF0CA02 		mov	r2, #202
 24946 01f8 5A62     		str	r2, [r3, #36]
 537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 24947              		.loc 1 537 0
 24948 01fa 044B     		ldr	r3, .L19
 24949 01fc 4FF05302 		mov	r2, #83
 24950 0200 5A62     		str	r2, [r3, #36]
 24951              	.L16:
 538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 24952              		.loc 1 539 0
 24953 0202 07F10C07 		add	r7, r7, #12
 24954 0206 BD46     		mov	sp, r7
 24955 0208 80BC     		pop	{r7}
 24956 020a 7047     		bx	lr
 24957              	.L20:
 24958              		.align	2
 24959              	.L19:
 24960 020c 00280040 		.word	1073752064
 24961              		.cfi_endproc
 24962              	.LFE113:
 24964              		.align	2
 24965              		.global	RTC_EnterInitMode
 24966              		.thumb
 24967              		.thumb_func
 24969              	RTC_EnterInitMode:
 24970              	.LFB114:
 540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 24971              		.loc 1 551 0
 24972              		.cfi_startproc
 24973              		@ args = 0, pretend = 0, frame = 16
 24974              		@ frame_needed = 1, uses_anonymous_args = 0
 24975              		@ link register save eliminated.
 24976 0210 80B4     		push	{r7}
 24977              	.LCFI12:
 24978              		.cfi_def_cfa_offset 4
 24979 0212 85B0     		sub	sp, sp, #20
 24980              	.LCFI13:
 24981              		.cfi_def_cfa_offset 24
 24982 0214 00AF     		add	r7, sp, #0
 24983              		.cfi_offset 7, -4
 24984              	.LCFI14:
 24985              		.cfi_def_cfa_register 7
 552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 24986              		.loc 1 552 0
 24987 0216 4FF00003 		mov	r3, #0
 24988 021a 7B60     		str	r3, [r7, #4]
 553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 24989              		.loc 1 553 0
 24990 021c 4FF00003 		mov	r3, #0
 24991 0220 FB73     		strb	r3, [r7, #15]
 554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 24992              		.loc 1 554 0
 24993 0222 4FF00003 		mov	r3, #0
 24994 0226 BB60     		str	r3, [r7, #8]
 555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      
 556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 24995              		.loc 1 557 0
 24996 0228 184B     		ldr	r3, .L27
 24997 022a DB68     		ldr	r3, [r3, #12]
 24998 022c 03F04003 		and	r3, r3, #64
 24999 0230 002B     		cmp	r3, #0
 25000 0232 21D1     		bne	.L22
 558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 25001              		.loc 1 560 0
 25002 0234 154B     		ldr	r3, .L27
 25003 0236 4FF0FF32 		mov	r2, #-1
 25004 023a DA60     		str	r2, [r3, #12]
 25005              	.L24:
 561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 25006              		.loc 1 565 0 discriminator 1
 25007 023c 134B     		ldr	r3, .L27
 25008 023e DB68     		ldr	r3, [r3, #12]
 25009 0240 03F04003 		and	r3, r3, #64
 25010 0244 BB60     		str	r3, [r7, #8]
 566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 25011              		.loc 1 566 0 discriminator 1
 25012 0246 7B68     		ldr	r3, [r7, #4]
 25013 0248 03F10103 		add	r3, r3, #1
 25014 024c 7B60     		str	r3, [r7, #4]
 567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 25015              		.loc 1 567 0 discriminator 1
 25016 024e 7B68     		ldr	r3, [r7, #4]
 25017 0250 B3F5803F 		cmp	r3, #65536
 25018 0254 02D0     		beq	.L23
 25019 0256 BB68     		ldr	r3, [r7, #8]
 25020 0258 002B     		cmp	r3, #0
 25021 025a EFD0     		beq	.L24
 25022              	.L23:
 568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 25023              		.loc 1 569 0
 25024 025c 0B4B     		ldr	r3, .L27
 25025 025e DB68     		ldr	r3, [r3, #12]
 25026 0260 03F04003 		and	r3, r3, #64
 25027 0264 002B     		cmp	r3, #0
 25028 0266 03D0     		beq	.L25
 570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 25029              		.loc 1 571 0
 25030 0268 4FF00103 		mov	r3, #1
 25031 026c FB73     		strb	r3, [r7, #15]
 25032 026e 06E0     		b	.L26
 25033              	.L25:
 572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 25034              		.loc 1 575 0
 25035 0270 4FF00003 		mov	r3, #0
 25036 0274 FB73     		strb	r3, [r7, #15]
 25037 0276 02E0     		b	.L26
 25038              	.L22:
 576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
 577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 25039              		.loc 1 580 0
 25040 0278 4FF00103 		mov	r3, #1
 25041 027c FB73     		strb	r3, [r7, #15]
 25042              	.L26:
 581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status);  
 25043              		.loc 1 583 0
 25044 027e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 25045              		.loc 1 584 0
 25046 0280 1846     		mov	r0, r3
 25047 0282 07F11407 		add	r7, r7, #20
 25048 0286 BD46     		mov	sp, r7
 25049 0288 80BC     		pop	{r7}
 25050 028a 7047     		bx	lr
 25051              	.L28:
 25052              		.align	2
 25053              	.L27:
 25054 028c 00280040 		.word	1073752064
 25055              		.cfi_endproc
 25056              	.LFE114:
 25058              		.align	2
 25059              		.global	RTC_ExitInitMode
 25060              		.thumb
 25061              		.thumb_func
 25063              	RTC_ExitInitMode:
 25064              	.LFB115:
 585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 25065              		.loc 1 596 0
 25066              		.cfi_startproc
 25067              		@ args = 0, pretend = 0, frame = 0
 25068              		@ frame_needed = 1, uses_anonymous_args = 0
 25069              		@ link register save eliminated.
 25070 0290 80B4     		push	{r7}
 25071              	.LCFI15:
 25072              		.cfi_def_cfa_offset 4
 25073 0292 00AF     		add	r7, sp, #0
 25074              		.cfi_offset 7, -4
 25075              	.LCFI16:
 25076              		.cfi_def_cfa_register 7
 597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 25077              		.loc 1 598 0
 25078 0294 044B     		ldr	r3, .L30
 25079 0296 044A     		ldr	r2, .L30
 25080 0298 D268     		ldr	r2, [r2, #12]
 25081 029a 22F08002 		bic	r2, r2, #128
 25082 029e DA60     		str	r2, [r3, #12]
 599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 25083              		.loc 1 599 0
 25084 02a0 BD46     		mov	sp, r7
 25085 02a2 80BC     		pop	{r7}
 25086 02a4 7047     		bx	lr
 25087              	.L31:
 25088 02a6 00BF     		.align	2
 25089              	.L30:
 25090 02a8 00280040 		.word	1073752064
 25091              		.cfi_endproc
 25092              	.LFE115:
 25094              		.align	2
 25095              		.global	RTC_WaitForSynchro
 25096              		.thumb
 25097              		.thumb_func
 25099              	RTC_WaitForSynchro:
 25100              	.LFB116:
 600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 25101              		.loc 1 618 0
 25102              		.cfi_startproc
 25103              		@ args = 0, pretend = 0, frame = 16
 25104              		@ frame_needed = 1, uses_anonymous_args = 0
 25105              		@ link register save eliminated.
 25106 02ac 80B4     		push	{r7}
 25107              	.LCFI17:
 25108              		.cfi_def_cfa_offset 4
 25109 02ae 85B0     		sub	sp, sp, #20
 25110              	.LCFI18:
 25111              		.cfi_def_cfa_offset 24
 25112 02b0 00AF     		add	r7, sp, #0
 25113              		.cfi_offset 7, -4
 25114              	.LCFI19:
 25115              		.cfi_def_cfa_register 7
 619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 25116              		.loc 1 619 0
 25117 02b2 4FF00003 		mov	r3, #0
 25118 02b6 7B60     		str	r3, [r7, #4]
 620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 25119              		.loc 1 620 0
 25120 02b8 4FF00003 		mov	r3, #0
 25121 02bc FB73     		strb	r3, [r7, #15]
 621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 25122              		.loc 1 621 0
 25123 02be 4FF00003 		mov	r3, #0
 25124 02c2 BB60     		str	r3, [r7, #8]
 622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 25125              		.loc 1 624 0
 25126 02c4 1A4B     		ldr	r3, .L37
 25127 02c6 4FF0CA02 		mov	r2, #202
 25128 02ca 5A62     		str	r2, [r3, #36]
 625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 25129              		.loc 1 625 0
 25130 02cc 184B     		ldr	r3, .L37
 25131 02ce 4FF05302 		mov	r2, #83
 25132 02d2 5A62     		str	r2, [r3, #36]
 626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 25133              		.loc 1 628 0
 25134 02d4 164B     		ldr	r3, .L37
 25135 02d6 164A     		ldr	r2, .L37
 25136 02d8 D268     		ldr	r2, [r2, #12]
 25137 02da 22F0A002 		bic	r2, r2, #160
 25138 02de DA60     		str	r2, [r3, #12]
 25139              	.L34:
 629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   do
 632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 25140              		.loc 1 633 0 discriminator 1
 25141 02e0 134B     		ldr	r3, .L37
 25142 02e2 DB68     		ldr	r3, [r3, #12]
 25143 02e4 03F02003 		and	r3, r3, #32
 25144 02e8 BB60     		str	r3, [r7, #8]
 634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 25145              		.loc 1 634 0 discriminator 1
 25146 02ea 7B68     		ldr	r3, [r7, #4]
 25147 02ec 03F10103 		add	r3, r3, #1
 25148 02f0 7B60     		str	r3, [r7, #4]
 635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 25149              		.loc 1 635 0 discriminator 1
 25150 02f2 7B68     		ldr	r3, [r7, #4]
 25151 02f4 B3F5003F 		cmp	r3, #131072
 25152 02f8 02D0     		beq	.L33
 25153 02fa BB68     		ldr	r3, [r7, #8]
 25154 02fc 002B     		cmp	r3, #0
 25155 02fe EFD0     		beq	.L34
 25156              	.L33:
 636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 25157              		.loc 1 637 0
 25158 0300 0B4B     		ldr	r3, .L37
 25159 0302 DB68     		ldr	r3, [r3, #12]
 25160 0304 03F02003 		and	r3, r3, #32
 25161 0308 002B     		cmp	r3, #0
 25162 030a 03D0     		beq	.L35
 638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 25163              		.loc 1 639 0
 25164 030c 4FF00103 		mov	r3, #1
 25165 0310 FB73     		strb	r3, [r7, #15]
 25166 0312 02E0     		b	.L36
 25167              	.L35:
 640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 25168              		.loc 1 643 0
 25169 0314 4FF00003 		mov	r3, #0
 25170 0318 FB73     		strb	r3, [r7, #15]
 25171              	.L36:
 644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }        
 645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 25172              		.loc 1 647 0
 25173 031a 054B     		ldr	r3, .L37
 25174 031c 4FF0FF02 		mov	r2, #255
 25175 0320 5A62     		str	r2, [r3, #36]
 648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status); 
 25176              		.loc 1 649 0
 25177 0322 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 25178              		.loc 1 650 0
 25179 0324 1846     		mov	r0, r3
 25180 0326 07F11407 		add	r7, r7, #20
 25181 032a BD46     		mov	sp, r7
 25182 032c 80BC     		pop	{r7}
 25183 032e 7047     		bx	lr
 25184              	.L38:
 25185              		.align	2
 25186              	.L37:
 25187 0330 00280040 		.word	1073752064
 25188              		.cfi_endproc
 25189              	.LFE116:
 25191              		.align	2
 25192              		.global	RTC_RefClockCmd
 25193              		.thumb
 25194              		.thumb_func
 25196              	RTC_RefClockCmd:
 25197              	.LFB117:
 651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 25198              		.loc 1 661 0
 25199              		.cfi_startproc
 25200              		@ args = 0, pretend = 0, frame = 16
 25201              		@ frame_needed = 1, uses_anonymous_args = 0
 25202 0334 80B5     		push	{r7, lr}
 25203              	.LCFI20:
 25204              		.cfi_def_cfa_offset 8
 25205 0336 84B0     		sub	sp, sp, #16
 25206              	.LCFI21:
 25207              		.cfi_def_cfa_offset 24
 25208 0338 00AF     		add	r7, sp, #0
 25209              		.cfi_offset 14, -4
 25210              		.cfi_offset 7, -8
 25211              	.LCFI22:
 25212              		.cfi_def_cfa_register 7
 25213 033a 0346     		mov	r3, r0
 25214 033c FB71     		strb	r3, [r7, #7]
 662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 25215              		.loc 1 662 0
 25216 033e 4FF00003 		mov	r3, #0
 25217 0342 FB73     		strb	r3, [r7, #15]
 663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 25218              		.loc 1 668 0
 25219 0344 174B     		ldr	r3, .L44
 25220 0346 4FF0CA02 		mov	r2, #202
 25221 034a 5A62     		str	r2, [r3, #36]
 669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 25222              		.loc 1 669 0
 25223 034c 154B     		ldr	r3, .L44
 25224 034e 4FF05302 		mov	r2, #83
 25225 0352 5A62     		str	r2, [r3, #36]
 670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 25226              		.loc 1 672 0
 25227 0354 FFF7FEFF 		bl	RTC_EnterInitMode
 25228 0358 0346     		mov	r3, r0
 25229 035a 002B     		cmp	r3, #0
 25230 035c 03D1     		bne	.L40
 673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 25231              		.loc 1 674 0
 25232 035e 4FF00003 		mov	r3, #0
 25233 0362 FB73     		strb	r3, [r7, #15]
 25234 0364 14E0     		b	.L41
 25235              	.L40:
 675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
 678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 25236              		.loc 1 678 0
 25237 0366 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 25238 0368 002B     		cmp	r3, #0
 25239 036a 06D0     		beq	.L42
 679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 25240              		.loc 1 681 0
 25241 036c 0D4B     		ldr	r3, .L44
 25242 036e 0D4A     		ldr	r2, .L44
 25243 0370 9268     		ldr	r2, [r2, #8]
 25244 0372 42F01002 		orr	r2, r2, #16
 25245 0376 9A60     		str	r2, [r3, #8]
 25246 0378 05E0     		b	.L43
 25247              	.L42:
 682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 25248              		.loc 1 686 0
 25249 037a 0A4B     		ldr	r3, .L44
 25250 037c 094A     		ldr	r2, .L44
 25251 037e 9268     		ldr	r2, [r2, #8]
 25252 0380 22F01002 		bic	r2, r2, #16
 25253 0384 9A60     		str	r2, [r3, #8]
 25254              	.L43:
 687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 25255              		.loc 1 689 0
 25256 0386 FFF7FEFF 		bl	RTC_ExitInitMode
 690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 25257              		.loc 1 691 0
 25258 038a 4FF00103 		mov	r3, #1
 25259 038e FB73     		strb	r3, [r7, #15]
 25260              	.L41:
 692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 25261              		.loc 1 695 0
 25262 0390 044B     		ldr	r3, .L44
 25263 0392 4FF0FF02 		mov	r2, #255
 25264 0396 5A62     		str	r2, [r3, #36]
 696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status; 
 25265              		.loc 1 697 0
 25266 0398 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 25267              		.loc 1 698 0
 25268 039a 1846     		mov	r0, r3
 25269 039c 07F11007 		add	r7, r7, #16
 25270 03a0 BD46     		mov	sp, r7
 25271 03a2 80BD     		pop	{r7, pc}
 25272              	.L45:
 25273              		.align	2
 25274              	.L44:
 25275 03a4 00280040 		.word	1073752064
 25276              		.cfi_endproc
 25277              	.LFE117:
 25279              		.align	2
 25280              		.global	RTC_BypassShadowCmd
 25281              		.thumb
 25282              		.thumb_func
 25284              	RTC_BypassShadowCmd:
 25285              	.LFB118:
 699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
 708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 25286              		.loc 1 709 0
 25287              		.cfi_startproc
 25288              		@ args = 0, pretend = 0, frame = 8
 25289              		@ frame_needed = 1, uses_anonymous_args = 0
 25290              		@ link register save eliminated.
 25291 03a8 80B4     		push	{r7}
 25292              	.LCFI23:
 25293              		.cfi_def_cfa_offset 4
 25294 03aa 83B0     		sub	sp, sp, #12
 25295              	.LCFI24:
 25296              		.cfi_def_cfa_offset 16
 25297 03ac 00AF     		add	r7, sp, #0
 25298              		.cfi_offset 7, -4
 25299              	.LCFI25:
 25300              		.cfi_def_cfa_register 7
 25301 03ae 0346     		mov	r3, r0
 25302 03b0 FB71     		strb	r3, [r7, #7]
 710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 25303              		.loc 1 714 0
 25304 03b2 104B     		ldr	r3, .L49
 25305 03b4 4FF0CA02 		mov	r2, #202
 25306 03b8 5A62     		str	r2, [r3, #36]
 715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 25307              		.loc 1 715 0
 25308 03ba 0E4B     		ldr	r3, .L49
 25309 03bc 4FF05302 		mov	r2, #83
 25310 03c0 5A62     		str	r2, [r3, #36]
 716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 25311              		.loc 1 717 0
 25312 03c2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 25313 03c4 002B     		cmp	r3, #0
 25314 03c6 06D0     		beq	.L47
 718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
 720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 25315              		.loc 1 720 0
 25316 03c8 0A4B     		ldr	r3, .L49
 25317 03ca 0A4A     		ldr	r2, .L49
 25318 03cc 9268     		ldr	r2, [r2, #8]
 25319 03ce 42F02002 		orr	r2, r2, #32
 25320 03d2 9A60     		str	r2, [r3, #8]
 25321 03d4 05E0     		b	.L48
 25322              	.L47:
 721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 25323              		.loc 1 725 0
 25324 03d6 074B     		ldr	r3, .L49
 25325 03d8 064A     		ldr	r2, .L49
 25326 03da 9268     		ldr	r2, [r2, #8]
 25327 03dc 02F0DF02 		and	r2, r2, #223
 25328 03e0 9A60     		str	r2, [r3, #8]
 25329              	.L48:
 726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 25330              		.loc 1 729 0
 25331 03e2 044B     		ldr	r3, .L49
 25332 03e4 4FF0FF02 		mov	r2, #255
 25333 03e8 5A62     		str	r2, [r3, #36]
 730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 25334              		.loc 1 730 0
 25335 03ea 07F10C07 		add	r7, r7, #12
 25336 03ee BD46     		mov	sp, r7
 25337 03f0 80BC     		pop	{r7}
 25338 03f2 7047     		bx	lr
 25339              	.L50:
 25340              		.align	2
 25341              	.L49:
 25342 03f4 00280040 		.word	1073752064
 25343              		.cfi_endproc
 25344              	.LFE118:
 25346              		.align	2
 25347              		.global	RTC_SetTime
 25348              		.thumb
 25349              		.thumb_func
 25351              	RTC_SetTime:
 25352              	.LFB119:
 731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
 734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Time and Date configuration functions
 742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
 743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Calendar
 745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (Time and Date).
 746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 25353              		.loc 1 764 0
 25354              		.cfi_startproc
 25355              		@ args = 0, pretend = 0, frame = 16
 25356              		@ frame_needed = 1, uses_anonymous_args = 0
 25357 03f8 90B5     		push	{r4, r7, lr}
 25358              	.LCFI26:
 25359              		.cfi_def_cfa_offset 12
 25360 03fa 85B0     		sub	sp, sp, #20
 25361              	.LCFI27:
 25362              		.cfi_def_cfa_offset 32
 25363 03fc 00AF     		add	r7, sp, #0
 25364              		.cfi_offset 14, -4
 25365              		.cfi_offset 7, -8
 25366              		.cfi_offset 4, -12
 25367              	.LCFI28:
 25368              		.cfi_def_cfa_register 7
 25369 03fe 7860     		str	r0, [r7, #4]
 25370 0400 3960     		str	r1, [r7, #0]
 765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 25371              		.loc 1 765 0
 25372 0402 4FF00003 		mov	r3, #0
 25373 0406 FB60     		str	r3, [r7, #12]
 766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 25374              		.loc 1 766 0
 25375 0408 4FF00003 		mov	r3, #0
 25376 040c FB72     		strb	r3, [r7, #11]
 767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 25377              		.loc 1 771 0
 25378 040e 7B68     		ldr	r3, [r7, #4]
 25379 0410 002B     		cmp	r3, #0
 25380 0412 0AD1     		bne	.L52
 772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 25381              		.loc 1 773 0
 25382 0414 464B     		ldr	r3, .L61
 25383 0416 9B68     		ldr	r3, [r3, #8]
 25384 0418 03F04003 		and	r3, r3, #64
 25385 041c 002B     		cmp	r3, #0
 25386 041e 16D1     		bne	.L53
 774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 25387              		.loc 1 780 0
 25388 0420 3B68     		ldr	r3, [r7, #0]
 25389 0422 4FF00002 		mov	r2, #0
 25390 0426 DA70     		strb	r2, [r3, #3]
 25391 0428 11E0     		b	.L53
 25392              	.L52:
 781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 25393              		.loc 1 788 0
 25394 042a 414B     		ldr	r3, .L61
 25395 042c 9B68     		ldr	r3, [r3, #8]
 25396 042e 03F04003 		and	r3, r3, #64
 25397 0432 002B     		cmp	r3, #0
 25398 0434 07D0     		beq	.L54
 789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 25399              		.loc 1 790 0
 25400 0436 3B68     		ldr	r3, [r7, #0]
 25401 0438 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 25402 043a 1846     		mov	r0, r3
 25403 043c 01F07EF9 		bl	RTC_Bcd2ToByte
 25404 0440 0346     		mov	r3, r0
 25405 0442 FB60     		str	r3, [r7, #12]
 25406 0444 03E0     		b	.L53
 25407              	.L54:
 791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 25408              		.loc 1 796 0
 25409 0446 3B68     		ldr	r3, [r7, #0]
 25410 0448 4FF00002 		mov	r2, #0
 25411 044c DA70     		strb	r2, [r3, #3]
 25412              	.L53:
 797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 25413              		.loc 1 804 0
 25414 044e 7B68     		ldr	r3, [r7, #4]
 25415 0450 002B     		cmp	r3, #0
 25416 0452 13D0     		beq	.L55
 805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 25417              		.loc 1 806 0
 25418 0454 3B68     		ldr	r3, [r7, #0]
 25419 0456 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 25420 0458 4FEA0342 		lsl	r2, r3, #16
 807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 25421              		.loc 1 807 0
 25422 045c 3B68     		ldr	r3, [r7, #0]
 25423 045e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 25424 0460 4FEA0323 		lsl	r3, r3, #8
 806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 25425              		.loc 1 806 0
 25426 0464 1A43     		orrs	r2, r2, r3
 808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 25427              		.loc 1 808 0
 25428 0466 3B68     		ldr	r3, [r7, #0]
 25429 0468 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 25430              		.loc 1 807 0
 25431 046a 1A43     		orrs	r2, r2, r3
 809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 25432              		.loc 1 809 0
 25433 046c 3B68     		ldr	r3, [r7, #0]
 25434 046e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 25435 0470 4FEA0343 		lsl	r3, r3, #16
 806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 25436              		.loc 1 806 0
 25437 0474 42EA0303 		orr	r3, r2, r3
 25438 0478 FB60     		str	r3, [r7, #12]
 25439 047a 1FE0     		b	.L56
 25440              	.L55:
 810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 25441              		.loc 1 813 0
 25442 047c 3B68     		ldr	r3, [r7, #0]
 25443 047e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 25444 0480 1846     		mov	r0, r3
 25445 0482 01F039F9 		bl	RTC_ByteToBcd2
 25446 0486 0346     		mov	r3, r0
 25447 0488 4FEA0344 		lsl	r4, r3, #16
 814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 25448              		.loc 1 814 0
 25449 048c 3B68     		ldr	r3, [r7, #0]
 25450 048e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 25451 0490 1846     		mov	r0, r3
 25452 0492 01F031F9 		bl	RTC_ByteToBcd2
 25453 0496 0346     		mov	r3, r0
 25454 0498 4FEA0323 		lsl	r3, r3, #8
 813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 25455              		.loc 1 813 0
 25456 049c 1C43     		orrs	r4, r4, r3
 815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 25457              		.loc 1 815 0
 25458 049e 3B68     		ldr	r3, [r7, #0]
 25459 04a0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 25460 04a2 1846     		mov	r0, r3
 25461 04a4 01F028F9 		bl	RTC_ByteToBcd2
 25462 04a8 0346     		mov	r3, r0
 814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 25463              		.loc 1 814 0
 25464 04aa 44EA0302 		orr	r2, r4, r3
 816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 25465              		.loc 1 816 0
 25466 04ae 3B68     		ldr	r3, [r7, #0]
 25467 04b0 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 25468 04b2 4FEA0343 		lsl	r3, r3, #16
 813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 25469              		.loc 1 813 0
 25470 04b6 42EA0303 		orr	r3, r2, r3
 25471 04ba FB60     		str	r3, [r7, #12]
 25472              	.L56:
 817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 25473              		.loc 1 820 0
 25474 04bc 1C4B     		ldr	r3, .L61
 25475 04be 4FF0CA02 		mov	r2, #202
 25476 04c2 5A62     		str	r2, [r3, #36]
 821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 25477              		.loc 1 821 0
 25478 04c4 1A4B     		ldr	r3, .L61
 25479 04c6 4FF05302 		mov	r2, #83
 25480 04ca 5A62     		str	r2, [r3, #36]
 822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 25481              		.loc 1 824 0
 25482 04cc FFF7FEFF 		bl	RTC_EnterInitMode
 25483 04d0 0346     		mov	r3, r0
 25484 04d2 002B     		cmp	r3, #0
 25485 04d4 03D1     		bne	.L57
 825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 25486              		.loc 1 826 0
 25487 04d6 4FF00003 		mov	r3, #0
 25488 04da FB72     		strb	r3, [r7, #11]
 25489 04dc 1DE0     		b	.L58
 25490              	.L57:
 827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
 831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 25491              		.loc 1 831 0
 25492 04de 144A     		ldr	r2, .L61
 25493 04e0 F968     		ldr	r1, [r7, #12]
 25494 04e2 144B     		ldr	r3, .L61+4
 25495 04e4 01EA0303 		and	r3, r1, r3
 25496 04e8 1360     		str	r3, [r2, #0]
 832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 25497              		.loc 1 834 0
 25498 04ea FFF7FEFF 		bl	RTC_ExitInitMode
 835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 25499              		.loc 1 837 0
 25500 04ee 104B     		ldr	r3, .L61
 25501 04f0 9B68     		ldr	r3, [r3, #8]
 25502 04f2 03F02003 		and	r3, r3, #32
 25503 04f6 002B     		cmp	r3, #0
 25504 04f8 0CD1     		bne	.L59
 838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if (RTC_WaitForSynchro() == ERROR)
 25505              		.loc 1 839 0
 25506 04fa FFF7FEFF 		bl	RTC_WaitForSynchro
 25507 04fe 0346     		mov	r3, r0
 25508 0500 002B     		cmp	r3, #0
 25509 0502 03D1     		bne	.L60
 840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 25510              		.loc 1 841 0
 25511 0504 4FF00003 		mov	r3, #0
 25512 0508 FB72     		strb	r3, [r7, #11]
 25513 050a 06E0     		b	.L58
 25514              	.L60:
 842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
 844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
 25515              		.loc 1 845 0
 25516 050c 4FF00103 		mov	r3, #1
 25517 0510 FB72     		strb	r3, [r7, #11]
 25518 0512 02E0     		b	.L58
 25519              	.L59:
 846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 25520              		.loc 1 850 0
 25521 0514 4FF00103 		mov	r3, #1
 25522 0518 FB72     		strb	r3, [r7, #11]
 25523              	.L58:
 851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 25524              		.loc 1 854 0
 25525 051a 054B     		ldr	r3, .L61
 25526 051c 4FF0FF02 		mov	r2, #255
 25527 0520 5A62     		str	r2, [r3, #36]
 855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 25528              		.loc 1 856 0
 25529 0522 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 25530              		.loc 1 857 0
 25531 0524 1846     		mov	r0, r3
 25532 0526 07F11407 		add	r7, r7, #20
 25533 052a BD46     		mov	sp, r7
 25534 052c 90BD     		pop	{r4, r7, pc}
 25535              	.L62:
 25536 052e 00BF     		.align	2
 25537              	.L61:
 25538 0530 00280040 		.word	1073752064
 25539 0534 7F7F7F00 		.word	8355711
 25540              		.cfi_endproc
 25541              	.LFE119:
 25543              		.align	2
 25544              		.global	RTC_TimeStructInit
 25545              		.thumb
 25546              		.thumb_func
 25548              	RTC_TimeStructInit:
 25549              	.LFB120:
 858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 25550              		.loc 1 867 0
 25551              		.cfi_startproc
 25552              		@ args = 0, pretend = 0, frame = 8
 25553              		@ frame_needed = 1, uses_anonymous_args = 0
 25554              		@ link register save eliminated.
 25555 0538 80B4     		push	{r7}
 25556              	.LCFI29:
 25557              		.cfi_def_cfa_offset 4
 25558 053a 83B0     		sub	sp, sp, #12
 25559              	.LCFI30:
 25560              		.cfi_def_cfa_offset 16
 25561 053c 00AF     		add	r7, sp, #0
 25562              		.cfi_offset 7, -4
 25563              	.LCFI31:
 25564              		.cfi_def_cfa_register 7
 25565 053e 7860     		str	r0, [r7, #4]
 868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 25566              		.loc 1 869 0
 25567 0540 7B68     		ldr	r3, [r7, #4]
 25568 0542 4FF00002 		mov	r2, #0
 25569 0546 DA70     		strb	r2, [r3, #3]
 870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 25570              		.loc 1 870 0
 25571 0548 7B68     		ldr	r3, [r7, #4]
 25572 054a 4FF00002 		mov	r2, #0
 25573 054e 1A70     		strb	r2, [r3, #0]
 871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 25574              		.loc 1 871 0
 25575 0550 7B68     		ldr	r3, [r7, #4]
 25576 0552 4FF00002 		mov	r2, #0
 25577 0556 5A70     		strb	r2, [r3, #1]
 872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 25578              		.loc 1 872 0
 25579 0558 7B68     		ldr	r3, [r7, #4]
 25580 055a 4FF00002 		mov	r2, #0
 25581 055e 9A70     		strb	r2, [r3, #2]
 873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 25582              		.loc 1 873 0
 25583 0560 07F10C07 		add	r7, r7, #12
 25584 0564 BD46     		mov	sp, r7
 25585 0566 80BC     		pop	{r7}
 25586 0568 7047     		bx	lr
 25587              		.cfi_endproc
 25588              	.LFE120:
 25590 056a 00BF     		.align	2
 25591              		.global	RTC_GetTime
 25592              		.thumb
 25593              		.thumb_func
 25595              	RTC_GetTime:
 25596              	.LFB121:
 874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 25597              		.loc 1 886 0
 25598              		.cfi_startproc
 25599              		@ args = 0, pretend = 0, frame = 16
 25600              		@ frame_needed = 1, uses_anonymous_args = 0
 25601 056c 80B5     		push	{r7, lr}
 25602              	.LCFI32:
 25603              		.cfi_def_cfa_offset 8
 25604 056e 84B0     		sub	sp, sp, #16
 25605              	.LCFI33:
 25606              		.cfi_def_cfa_offset 24
 25607 0570 00AF     		add	r7, sp, #0
 25608              		.cfi_offset 14, -4
 25609              		.cfi_offset 7, -8
 25610              	.LCFI34:
 25611              		.cfi_def_cfa_register 7
 25612 0572 7860     		str	r0, [r7, #4]
 25613 0574 3960     		str	r1, [r7, #0]
 887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 25614              		.loc 1 887 0
 25615 0576 4FF00003 		mov	r3, #0
 25616 057a FB60     		str	r3, [r7, #12]
 888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 25617              		.loc 1 893 0
 25618 057c 234B     		ldr	r3, .L66
 25619 057e 1A68     		ldr	r2, [r3, #0]
 25620 0580 234B     		ldr	r3, .L66+4
 25621 0582 02EA0303 		and	r3, r2, r3
 25622 0586 FB60     		str	r3, [r7, #12]
 894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 25623              		.loc 1 896 0
 25624 0588 FB68     		ldr	r3, [r7, #12]
 25625 058a 03F47C13 		and	r3, r3, #4128768
 25626 058e 4FEA1343 		lsr	r3, r3, #16
 25627 0592 DAB2     		uxtb	r2, r3
 25628 0594 3B68     		ldr	r3, [r7, #0]
 25629 0596 1A70     		strb	r2, [r3, #0]
 897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 25630              		.loc 1 897 0
 25631 0598 FB68     		ldr	r3, [r7, #12]
 25632 059a 03F4FE43 		and	r3, r3, #32512
 25633 059e 4FEA1323 		lsr	r3, r3, #8
 25634 05a2 DAB2     		uxtb	r2, r3
 25635 05a4 3B68     		ldr	r3, [r7, #0]
 25636 05a6 5A70     		strb	r2, [r3, #1]
 898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 25637              		.loc 1 898 0
 25638 05a8 FB68     		ldr	r3, [r7, #12]
 25639 05aa DBB2     		uxtb	r3, r3
 25640 05ac 03F07F03 		and	r3, r3, #127
 25641 05b0 DAB2     		uxtb	r2, r3
 25642 05b2 3B68     		ldr	r3, [r7, #0]
 25643 05b4 9A70     		strb	r2, [r3, #2]
 899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 25644              		.loc 1 899 0
 25645 05b6 FB68     		ldr	r3, [r7, #12]
 25646 05b8 03F48003 		and	r3, r3, #4194304
 25647 05bc 4FEA1343 		lsr	r3, r3, #16
 25648 05c0 DAB2     		uxtb	r2, r3
 25649 05c2 3B68     		ldr	r3, [r7, #0]
 25650 05c4 DA70     		strb	r2, [r3, #3]
 900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 25651              		.loc 1 902 0
 25652 05c6 7B68     		ldr	r3, [r7, #4]
 25653 05c8 002B     		cmp	r3, #0
 25654 05ca 1AD1     		bne	.L64
 903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 25655              		.loc 1 905 0
 25656 05cc 3B68     		ldr	r3, [r7, #0]
 25657 05ce 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 25658 05d0 1846     		mov	r0, r3
 25659 05d2 01F0B3F8 		bl	RTC_Bcd2ToByte
 25660 05d6 0346     		mov	r3, r0
 25661 05d8 1A46     		mov	r2, r3
 25662 05da 3B68     		ldr	r3, [r7, #0]
 25663 05dc 1A70     		strb	r2, [r3, #0]
 906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 25664              		.loc 1 906 0
 25665 05de 3B68     		ldr	r3, [r7, #0]
 25666 05e0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 25667 05e2 1846     		mov	r0, r3
 25668 05e4 01F0AAF8 		bl	RTC_Bcd2ToByte
 25669 05e8 0346     		mov	r3, r0
 25670 05ea 1A46     		mov	r2, r3
 25671 05ec 3B68     		ldr	r3, [r7, #0]
 25672 05ee 5A70     		strb	r2, [r3, #1]
 907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 25673              		.loc 1 907 0
 25674 05f0 3B68     		ldr	r3, [r7, #0]
 25675 05f2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 25676 05f4 1846     		mov	r0, r3
 25677 05f6 01F0A1F8 		bl	RTC_Bcd2ToByte
 25678 05fa 0346     		mov	r3, r0
 25679 05fc 1A46     		mov	r2, r3
 25680 05fe 3B68     		ldr	r3, [r7, #0]
 25681 0600 9A70     		strb	r2, [r3, #2]
 25682              	.L64:
 908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 25683              		.loc 1 909 0
 25684 0602 07F11007 		add	r7, r7, #16
 25685 0606 BD46     		mov	sp, r7
 25686 0608 80BD     		pop	{r7, pc}
 25687              	.L67:
 25688 060a 00BF     		.align	2
 25689              	.L66:
 25690 060c 00280040 		.word	1073752064
 25691 0610 7F7F7F00 		.word	8355711
 25692              		.cfi_endproc
 25693              	.LFE121:
 25695              		.align	2
 25696              		.global	RTC_GetSubSecond
 25697              		.thumb
 25698              		.thumb_func
 25700              	RTC_GetSubSecond:
 25701              	.LFB122:
 910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Subseconds value.
 913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         SSR register.
 915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Subseconds value.
 917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 25702              		.loc 1 919 0
 25703              		.cfi_startproc
 25704              		@ args = 0, pretend = 0, frame = 8
 25705              		@ frame_needed = 1, uses_anonymous_args = 0
 25706              		@ link register save eliminated.
 25707 0614 80B4     		push	{r7}
 25708              	.LCFI35:
 25709              		.cfi_def_cfa_offset 4
 25710 0616 83B0     		sub	sp, sp, #12
 25711              	.LCFI36:
 25712              		.cfi_def_cfa_offset 16
 25713 0618 00AF     		add	r7, sp, #0
 25714              		.cfi_offset 7, -4
 25715              	.LCFI37:
 25716              		.cfi_def_cfa_register 7
 920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 25717              		.loc 1 920 0
 25718 061a 4FF00003 		mov	r3, #0
 25719 061e 7B60     		str	r3, [r7, #4]
 921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 25720              		.loc 1 923 0
 25721 0620 054B     		ldr	r3, .L69
 25722 0622 9B6A     		ldr	r3, [r3, #40]
 25723 0624 7B60     		str	r3, [r7, #4]
 924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 25724              		.loc 1 926 0
 25725 0626 044B     		ldr	r3, .L69
 25726 0628 5B68     		ldr	r3, [r3, #4]
 927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 25727              		.loc 1 928 0
 25728 062a 7B68     		ldr	r3, [r7, #4]
 929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 25729              		.loc 1 929 0
 25730 062c 1846     		mov	r0, r3
 25731 062e 07F10C07 		add	r7, r7, #12
 25732 0632 BD46     		mov	sp, r7
 25733 0634 80BC     		pop	{r7}
 25734 0636 7047     		bx	lr
 25735              	.L70:
 25736              		.align	2
 25737              	.L69:
 25738 0638 00280040 		.word	1073752064
 25739              		.cfi_endproc
 25740              	.LFE122:
 25742              		.align	2
 25743              		.global	RTC_SetDate
 25744              		.thumb
 25745              		.thumb_func
 25747              	RTC_SetDate:
 25748              	.LFB123:
 930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 25749              		.loc 1 944 0
 25750              		.cfi_startproc
 25751              		@ args = 0, pretend = 0, frame = 16
 25752              		@ frame_needed = 1, uses_anonymous_args = 0
 25753 063c 90B5     		push	{r4, r7, lr}
 25754              	.LCFI38:
 25755              		.cfi_def_cfa_offset 12
 25756 063e 85B0     		sub	sp, sp, #20
 25757              	.LCFI39:
 25758              		.cfi_def_cfa_offset 32
 25759 0640 00AF     		add	r7, sp, #0
 25760              		.cfi_offset 14, -4
 25761              		.cfi_offset 7, -8
 25762              		.cfi_offset 4, -12
 25763              	.LCFI40:
 25764              		.cfi_def_cfa_register 7
 25765 0642 7860     		str	r0, [r7, #4]
 25766 0644 3960     		str	r1, [r7, #0]
 945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 25767              		.loc 1 945 0
 25768 0646 4FF00003 		mov	r3, #0
 25769 064a FB60     		str	r3, [r7, #12]
 946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 25770              		.loc 1 946 0
 25771 064c 4FF00003 		mov	r3, #0
 25772 0650 FB72     		strb	r3, [r7, #11]
 947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 25773              		.loc 1 951 0
 25774 0652 7B68     		ldr	r3, [r7, #4]
 25775 0654 002B     		cmp	r3, #0
 25776 0656 0FD1     		bne	.L72
 25777              		.loc 1 951 0 is_stmt 0 discriminator 1
 25778 0658 3B68     		ldr	r3, [r7, #0]
 25779 065a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 25780 065c 03F01003 		and	r3, r3, #16
 25781 0660 002B     		cmp	r3, #0
 25782 0662 09D0     		beq	.L72
 952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 25783              		.loc 1 953 0 is_stmt 1
 25784 0664 3B68     		ldr	r3, [r7, #0]
 25785 0666 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 25786 0668 23F01003 		bic	r3, r3, #16
 25787 066c DBB2     		uxtb	r3, r3
 25788 066e 03F10A03 		add	r3, r3, #10
 25789 0672 DAB2     		uxtb	r2, r3
 25790 0674 3B68     		ldr	r3, [r7, #0]
 25791 0676 5A70     		strb	r2, [r3, #1]
 25792              	.L72:
 954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 25793              		.loc 1 955 0
 25794 0678 7B68     		ldr	r3, [r7, #4]
 25795 067a 002B     		cmp	r3, #0
 25796 067c 0DD0     		beq	.L73
 956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 25797              		.loc 1 964 0
 25798 067e 3B68     		ldr	r3, [r7, #0]
 25799 0680 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 25800 0682 1846     		mov	r0, r3
 25801 0684 01F05AF8 		bl	RTC_Bcd2ToByte
 25802 0688 0346     		mov	r3, r0
 25803 068a FB60     		str	r3, [r7, #12]
 965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 25804              		.loc 1 966 0
 25805 068c 3B68     		ldr	r3, [r7, #0]
 25806 068e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 25807 0690 1846     		mov	r0, r3
 25808 0692 01F053F8 		bl	RTC_Bcd2ToByte
 25809 0696 0346     		mov	r3, r0
 25810 0698 FB60     		str	r3, [r7, #12]
 25811              	.L73:
 967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 25812              		.loc 1 972 0
 25813 069a 7B68     		ldr	r3, [r7, #4]
 25814 069c 002B     		cmp	r3, #0
 25815 069e 13D0     		beq	.L74
 973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 25816              		.loc 1 974 0
 25817 06a0 3B68     		ldr	r3, [r7, #0]
 25818 06a2 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 25819 06a4 4FEA0342 		lsl	r2, r3, #16
 975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 25820              		.loc 1 975 0
 25821 06a8 3B68     		ldr	r3, [r7, #0]
 25822 06aa 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 25823 06ac 4FEA0323 		lsl	r3, r3, #8
 974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 25824              		.loc 1 974 0
 25825 06b0 1A43     		orrs	r2, r2, r3
 976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 25826              		.loc 1 976 0
 25827 06b2 3B68     		ldr	r3, [r7, #0]
 25828 06b4 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 25829              		.loc 1 975 0
 25830 06b6 1A43     		orrs	r2, r2, r3
 977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 25831              		.loc 1 977 0
 25832 06b8 3B68     		ldr	r3, [r7, #0]
 25833 06ba 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 25834 06bc 4FEA4333 		lsl	r3, r3, #13
 974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 25835              		.loc 1 974 0
 25836 06c0 42EA0303 		orr	r3, r2, r3
 25837 06c4 FB60     		str	r3, [r7, #12]
 25838 06c6 1FE0     		b	.L75
 25839              	.L74:
 978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 25840              		.loc 1 981 0
 25841 06c8 3B68     		ldr	r3, [r7, #0]
 25842 06ca DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 25843 06cc 1846     		mov	r0, r3
 25844 06ce 01F013F8 		bl	RTC_ByteToBcd2
 25845 06d2 0346     		mov	r3, r0
 25846 06d4 4FEA0344 		lsl	r4, r3, #16
 982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 25847              		.loc 1 982 0
 25848 06d8 3B68     		ldr	r3, [r7, #0]
 25849 06da 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 25850 06dc 1846     		mov	r0, r3
 25851 06de 01F00BF8 		bl	RTC_ByteToBcd2
 25852 06e2 0346     		mov	r3, r0
 25853 06e4 4FEA0323 		lsl	r3, r3, #8
 981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 25854              		.loc 1 981 0
 25855 06e8 1C43     		orrs	r4, r4, r3
 983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 25856              		.loc 1 983 0
 25857 06ea 3B68     		ldr	r3, [r7, #0]
 25858 06ec 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 25859 06ee 1846     		mov	r0, r3
 25860 06f0 01F002F8 		bl	RTC_ByteToBcd2
 25861 06f4 0346     		mov	r3, r0
 982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 25862              		.loc 1 982 0
 25863 06f6 44EA0302 		orr	r2, r4, r3
 984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 25864              		.loc 1 984 0
 25865 06fa 3B68     		ldr	r3, [r7, #0]
 25866 06fc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 25867 06fe 4FEA4333 		lsl	r3, r3, #13
 981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 25868              		.loc 1 981 0
 25869 0702 42EA0303 		orr	r3, r2, r3
 25870 0706 FB60     		str	r3, [r7, #12]
 25871              	.L75:
 985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 25872              		.loc 1 988 0
 25873 0708 1C4B     		ldr	r3, .L80
 25874 070a 4FF0CA02 		mov	r2, #202
 25875 070e 5A62     		str	r2, [r3, #36]
 989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 25876              		.loc 1 989 0
 25877 0710 1A4B     		ldr	r3, .L80
 25878 0712 4FF05302 		mov	r2, #83
 25879 0716 5A62     		str	r2, [r3, #36]
 990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 25880              		.loc 1 992 0
 25881 0718 FFF7FEFF 		bl	RTC_EnterInitMode
 25882 071c 0346     		mov	r3, r0
 25883 071e 002B     		cmp	r3, #0
 25884 0720 03D1     		bne	.L76
 993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 25885              		.loc 1 994 0
 25886 0722 4FF00003 		mov	r3, #0
 25887 0726 FB72     		strb	r3, [r7, #11]
 25888 0728 1EE0     		b	.L77
 25889              	.L76:
 995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
 999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 25890              		.loc 1 999 0
 25891 072a 144A     		ldr	r2, .L80
 25892 072c FB68     		ldr	r3, [r7, #12]
 25893 072e 23F07F43 		bic	r3, r3, #-16777216
 25894 0732 23F0C003 		bic	r3, r3, #192
 25895 0736 5360     		str	r3, [r2, #4]
1000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 25896              		.loc 1 1002 0
 25897 0738 FFF7FEFF 		bl	RTC_ExitInitMode
1003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
1005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 25898              		.loc 1 1005 0
 25899 073c 0F4B     		ldr	r3, .L80
 25900 073e 9B68     		ldr	r3, [r3, #8]
 25901 0740 03F02003 		and	r3, r3, #32
 25902 0744 002B     		cmp	r3, #0
 25903 0746 0CD1     		bne	.L78
1006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if (RTC_WaitForSynchro() == ERROR)
 25904              		.loc 1 1007 0
 25905 0748 FFF7FEFF 		bl	RTC_WaitForSynchro
 25906 074c 0346     		mov	r3, r0
 25907 074e 002B     		cmp	r3, #0
 25908 0750 03D1     		bne	.L79
1008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
1009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 25909              		.loc 1 1009 0
 25910 0752 4FF00003 		mov	r3, #0
 25911 0756 FB72     		strb	r3, [r7, #11]
 25912 0758 06E0     		b	.L77
 25913              	.L79:
1010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
1011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
1012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
1013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
 25914              		.loc 1 1013 0
 25915 075a 4FF00103 		mov	r3, #1
 25916 075e FB72     		strb	r3, [r7, #11]
 25917 0760 02E0     		b	.L77
 25918              	.L78:
1014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
1015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 25919              		.loc 1 1018 0
 25920 0762 4FF00103 		mov	r3, #1
 25921 0766 FB72     		strb	r3, [r7, #11]
 25922              	.L77:
1019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 25923              		.loc 1 1022 0
 25924 0768 044B     		ldr	r3, .L80
 25925 076a 4FF0FF02 		mov	r2, #255
 25926 076e 5A62     		str	r2, [r3, #36]
1023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 25927              		.loc 1 1024 0
 25928 0770 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
1025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 25929              		.loc 1 1025 0
 25930 0772 1846     		mov	r0, r3
 25931 0774 07F11407 		add	r7, r7, #20
 25932 0778 BD46     		mov	sp, r7
 25933 077a 90BD     		pop	{r4, r7, pc}
 25934              	.L81:
 25935              		.align	2
 25936              	.L80:
 25937 077c 00280040 		.word	1073752064
 25938              		.cfi_endproc
 25939              	.LFE123:
 25941              		.align	2
 25942              		.global	RTC_DateStructInit
 25943              		.thumb
 25944              		.thumb_func
 25946              	RTC_DateStructInit:
 25947              	.LFB124:
1026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
1032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 25948              		.loc 1 1035 0
 25949              		.cfi_startproc
 25950              		@ args = 0, pretend = 0, frame = 8
 25951              		@ frame_needed = 1, uses_anonymous_args = 0
 25952              		@ link register save eliminated.
 25953 0780 80B4     		push	{r7}
 25954              	.LCFI41:
 25955              		.cfi_def_cfa_offset 4
 25956 0782 83B0     		sub	sp, sp, #12
 25957              	.LCFI42:
 25958              		.cfi_def_cfa_offset 16
 25959 0784 00AF     		add	r7, sp, #0
 25960              		.cfi_offset 7, -4
 25961              	.LCFI43:
 25962              		.cfi_def_cfa_register 7
 25963 0786 7860     		str	r0, [r7, #4]
1036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 25964              		.loc 1 1037 0
 25965 0788 7B68     		ldr	r3, [r7, #4]
 25966 078a 4FF00102 		mov	r2, #1
 25967 078e 1A70     		strb	r2, [r3, #0]
1038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 25968              		.loc 1 1038 0
 25969 0790 7B68     		ldr	r3, [r7, #4]
 25970 0792 4FF00102 		mov	r2, #1
 25971 0796 9A70     		strb	r2, [r3, #2]
1039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 25972              		.loc 1 1039 0
 25973 0798 7B68     		ldr	r3, [r7, #4]
 25974 079a 4FF00102 		mov	r2, #1
 25975 079e 5A70     		strb	r2, [r3, #1]
1040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 25976              		.loc 1 1040 0
 25977 07a0 7B68     		ldr	r3, [r7, #4]
 25978 07a2 4FF00002 		mov	r2, #0
 25979 07a6 DA70     		strb	r2, [r3, #3]
1041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 25980              		.loc 1 1041 0
 25981 07a8 07F10C07 		add	r7, r7, #12
 25982 07ac BD46     		mov	sp, r7
 25983 07ae 80BC     		pop	{r7}
 25984 07b0 7047     		bx	lr
 25985              		.cfi_endproc
 25986              	.LFE124:
 25988 07b2 00BF     		.align	2
 25989              		.global	RTC_GetDate
 25990              		.thumb
 25991              		.thumb_func
 25993              	RTC_GetDate:
 25994              	.LFB125:
1042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 25995              		.loc 1 1054 0
 25996              		.cfi_startproc
 25997              		@ args = 0, pretend = 0, frame = 16
 25998              		@ frame_needed = 1, uses_anonymous_args = 0
 25999 07b4 80B5     		push	{r7, lr}
 26000              	.LCFI44:
 26001              		.cfi_def_cfa_offset 8
 26002 07b6 84B0     		sub	sp, sp, #16
 26003              	.LCFI45:
 26004              		.cfi_def_cfa_offset 24
 26005 07b8 00AF     		add	r7, sp, #0
 26006              		.cfi_offset 14, -4
 26007              		.cfi_offset 7, -8
 26008              	.LCFI46:
 26009              		.cfi_def_cfa_register 7
 26010 07ba 7860     		str	r0, [r7, #4]
 26011 07bc 3960     		str	r1, [r7, #0]
1055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 26012              		.loc 1 1055 0
 26013 07be 4FF00003 		mov	r3, #0
 26014 07c2 FB60     		str	r3, [r7, #12]
1056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 26015              		.loc 1 1061 0
 26016 07c4 234B     		ldr	r3, .L85
 26017 07c6 5B68     		ldr	r3, [r3, #4]
 26018 07c8 23F07F43 		bic	r3, r3, #-16777216
 26019 07cc 23F0C003 		bic	r3, r3, #192
 26020 07d0 FB60     		str	r3, [r7, #12]
1062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 26021              		.loc 1 1064 0
 26022 07d2 FB68     		ldr	r3, [r7, #12]
 26023 07d4 03F47F03 		and	r3, r3, #16711680
 26024 07d8 4FEA1343 		lsr	r3, r3, #16
 26025 07dc DAB2     		uxtb	r2, r3
 26026 07de 3B68     		ldr	r3, [r7, #0]
 26027 07e0 DA70     		strb	r2, [r3, #3]
1065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 26028              		.loc 1 1065 0
 26029 07e2 FB68     		ldr	r3, [r7, #12]
 26030 07e4 03F4F853 		and	r3, r3, #7936
 26031 07e8 4FEA1323 		lsr	r3, r3, #8
 26032 07ec DAB2     		uxtb	r2, r3
 26033 07ee 3B68     		ldr	r3, [r7, #0]
 26034 07f0 5A70     		strb	r2, [r3, #1]
1066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 26035              		.loc 1 1066 0
 26036 07f2 FB68     		ldr	r3, [r7, #12]
 26037 07f4 DBB2     		uxtb	r3, r3
 26038 07f6 03F03F03 		and	r3, r3, #63
 26039 07fa DAB2     		uxtb	r2, r3
 26040 07fc 3B68     		ldr	r3, [r7, #0]
 26041 07fe 9A70     		strb	r2, [r3, #2]
1067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 26042              		.loc 1 1067 0
 26043 0800 FB68     		ldr	r3, [r7, #12]
 26044 0802 03F46043 		and	r3, r3, #57344
 26045 0806 4FEA5333 		lsr	r3, r3, #13
 26046 080a DAB2     		uxtb	r2, r3
 26047 080c 3B68     		ldr	r3, [r7, #0]
 26048 080e 1A70     		strb	r2, [r3, #0]
1068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 26049              		.loc 1 1070 0
 26050 0810 7B68     		ldr	r3, [r7, #4]
 26051 0812 002B     		cmp	r3, #0
 26052 0814 1AD1     		bne	.L83
1071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 26053              		.loc 1 1073 0
 26054 0816 3B68     		ldr	r3, [r7, #0]
 26055 0818 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 26056 081a 1846     		mov	r0, r3
 26057 081c 00F08EFF 		bl	RTC_Bcd2ToByte
 26058 0820 0346     		mov	r3, r0
 26059 0822 1A46     		mov	r2, r3
 26060 0824 3B68     		ldr	r3, [r7, #0]
 26061 0826 DA70     		strb	r2, [r3, #3]
1074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 26062              		.loc 1 1074 0
 26063 0828 3B68     		ldr	r3, [r7, #0]
 26064 082a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 26065 082c 1846     		mov	r0, r3
 26066 082e 00F085FF 		bl	RTC_Bcd2ToByte
 26067 0832 0346     		mov	r3, r0
 26068 0834 1A46     		mov	r2, r3
 26069 0836 3B68     		ldr	r3, [r7, #0]
 26070 0838 5A70     		strb	r2, [r3, #1]
1075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 26071              		.loc 1 1075 0
 26072 083a 3B68     		ldr	r3, [r7, #0]
 26073 083c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 26074 083e 1846     		mov	r0, r3
 26075 0840 00F07CFF 		bl	RTC_Bcd2ToByte
 26076 0844 0346     		mov	r3, r0
 26077 0846 1A46     		mov	r2, r3
 26078 0848 3B68     		ldr	r3, [r7, #0]
 26079 084a 9A70     		strb	r2, [r3, #2]
 26080              	.L83:
1076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 26081              		.loc 1 1077 0
 26082 084c 07F11007 		add	r7, r7, #16
 26083 0850 BD46     		mov	sp, r7
 26084 0852 80BD     		pop	{r7, pc}
 26085              	.L86:
 26086              		.align	2
 26087              	.L85:
 26088 0854 00280040 		.word	1073752064
 26089              		.cfi_endproc
 26090              	.LFE125:
 26092              		.align	2
 26093              		.global	RTC_SetAlarm
 26094              		.thumb
 26095              		.thumb_func
 26097              	RTC_SetAlarm:
 26098              	.LFB126:
1078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               Alarms (Alarm A and Alarm B) configuration functions
1089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Alarms.
1092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 26099              		.loc 1 1114 0
 26100              		.cfi_startproc
 26101              		@ args = 0, pretend = 0, frame = 24
 26102              		@ frame_needed = 1, uses_anonymous_args = 0
 26103 0858 90B5     		push	{r4, r7, lr}
 26104              	.LCFI47:
 26105              		.cfi_def_cfa_offset 12
 26106 085a 87B0     		sub	sp, sp, #28
 26107              	.LCFI48:
 26108              		.cfi_def_cfa_offset 40
 26109 085c 00AF     		add	r7, sp, #0
 26110              		.cfi_offset 14, -4
 26111              		.cfi_offset 7, -8
 26112              		.cfi_offset 4, -12
 26113              	.LCFI49:
 26114              		.cfi_def_cfa_register 7
 26115 085e F860     		str	r0, [r7, #12]
 26116 0860 B960     		str	r1, [r7, #8]
 26117 0862 7A60     		str	r2, [r7, #4]
1115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 26118              		.loc 1 1115 0
 26119 0864 4FF00003 		mov	r3, #0
 26120 0868 7B61     		str	r3, [r7, #20]
1116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 26121              		.loc 1 1123 0
 26122 086a FB68     		ldr	r3, [r7, #12]
 26123 086c 002B     		cmp	r3, #0
 26124 086e 0AD1     		bne	.L88
1124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 26125              		.loc 1 1125 0
 26126 0870 4E4B     		ldr	r3, .L98
 26127 0872 9B68     		ldr	r3, [r3, #8]
 26128 0874 03F04003 		and	r3, r3, #64
 26129 0878 002B     		cmp	r3, #0
 26130 087a 29D1     		bne	.L90
1126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 26131              		.loc 1 1132 0
 26132 087c 7B68     		ldr	r3, [r7, #4]
 26133 087e 4FF00002 		mov	r2, #0
 26134 0882 DA70     		strb	r2, [r3, #3]
 26135 0884 24E0     		b	.L90
 26136              	.L88:
1133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 26137              		.loc 1 1149 0
 26138 0886 494B     		ldr	r3, .L98
 26139 0888 9B68     		ldr	r3, [r3, #8]
 26140 088a 03F04003 		and	r3, r3, #64
 26141 088e 002B     		cmp	r3, #0
 26142 0890 07D0     		beq	.L91
1150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 26143              		.loc 1 1151 0
 26144 0892 7B68     		ldr	r3, [r7, #4]
 26145 0894 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 26146 0896 1846     		mov	r0, r3
 26147 0898 00F050FF 		bl	RTC_Bcd2ToByte
 26148 089c 0346     		mov	r3, r0
 26149 089e 7B61     		str	r3, [r7, #20]
 26150 08a0 03E0     		b	.L92
 26151              	.L91:
1152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 26152              		.loc 1 1157 0
 26153 08a2 7B68     		ldr	r3, [r7, #4]
 26154 08a4 4FF00002 		mov	r2, #0
 26155 08a8 DA70     		strb	r2, [r3, #3]
 26156              	.L92:
1158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 26157              		.loc 1 1164 0
 26158 08aa 7B68     		ldr	r3, [r7, #4]
 26159 08ac 9B68     		ldr	r3, [r3, #8]
 26160 08ae 002B     		cmp	r3, #0
 26161 08b0 07D1     		bne	.L93
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 26162              		.loc 1 1166 0
 26163 08b2 7B68     		ldr	r3, [r7, #4]
 26164 08b4 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 26165 08b6 1846     		mov	r0, r3
 26166 08b8 00F040FF 		bl	RTC_Bcd2ToByte
 26167 08bc 0346     		mov	r3, r0
 26168 08be 7B61     		str	r3, [r7, #20]
 26169 08c0 06E0     		b	.L90
 26170              	.L93:
1167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 26171              		.loc 1 1171 0
 26172 08c2 7B68     		ldr	r3, [r7, #4]
 26173 08c4 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 26174 08c6 1846     		mov	r0, r3
 26175 08c8 00F038FF 		bl	RTC_Bcd2ToByte
 26176 08cc 0346     		mov	r3, r0
 26177 08ce 7B61     		str	r3, [r7, #20]
 26178              	.L90:
1172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 26179              		.loc 1 1177 0
 26180 08d0 FB68     		ldr	r3, [r7, #12]
 26181 08d2 002B     		cmp	r3, #0
 26182 08d4 1ED0     		beq	.L94
1178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 26183              		.loc 1 1179 0
 26184 08d6 7B68     		ldr	r3, [r7, #4]
 26185 08d8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 26186 08da 4FEA0342 		lsl	r2, r3, #16
1180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 26187              		.loc 1 1180 0
 26188 08de 7B68     		ldr	r3, [r7, #4]
 26189 08e0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 26190 08e2 4FEA0323 		lsl	r3, r3, #8
1179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 26191              		.loc 1 1179 0
 26192 08e6 1A43     		orrs	r2, r2, r3
1181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 26193              		.loc 1 1181 0
 26194 08e8 7B68     		ldr	r3, [r7, #4]
 26195 08ea 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
1180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 26196              		.loc 1 1180 0
 26197 08ec 1A43     		orrs	r2, r2, r3
1182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 26198              		.loc 1 1182 0
 26199 08ee 7B68     		ldr	r3, [r7, #4]
 26200 08f0 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 26201 08f2 4FEA0343 		lsl	r3, r3, #16
1181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 26202              		.loc 1 1181 0
 26203 08f6 1A43     		orrs	r2, r2, r3
1183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 26204              		.loc 1 1183 0
 26205 08f8 7B68     		ldr	r3, [r7, #4]
 26206 08fa 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 26207 08fc 4FEA0363 		lsl	r3, r3, #24
1182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 26208              		.loc 1 1182 0
 26209 0900 1A43     		orrs	r2, r2, r3
1184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 26210              		.loc 1 1184 0
 26211 0902 7B68     		ldr	r3, [r7, #4]
 26212 0904 9B68     		ldr	r3, [r3, #8]
1183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 26213              		.loc 1 1183 0
 26214 0906 1A43     		orrs	r2, r2, r3
1185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 26215              		.loc 1 1185 0
 26216 0908 7B68     		ldr	r3, [r7, #4]
 26217 090a 5B68     		ldr	r3, [r3, #4]
1179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 26218              		.loc 1 1179 0
 26219 090c 42EA0303 		orr	r3, r2, r3
 26220 0910 7B61     		str	r3, [r7, #20]
 26221 0912 30E0     		b	.L95
 26222              	.L94:
1186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 26223              		.loc 1 1189 0
 26224 0914 7B68     		ldr	r3, [r7, #4]
 26225 0916 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 26226 0918 1846     		mov	r0, r3
 26227 091a 00F0EDFE 		bl	RTC_ByteToBcd2
 26228 091e 0346     		mov	r3, r0
 26229 0920 4FEA0344 		lsl	r4, r3, #16
1190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 26230              		.loc 1 1190 0
 26231 0924 7B68     		ldr	r3, [r7, #4]
 26232 0926 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 26233 0928 1846     		mov	r0, r3
 26234 092a 00F0E5FE 		bl	RTC_ByteToBcd2
 26235 092e 0346     		mov	r3, r0
 26236 0930 4FEA0323 		lsl	r3, r3, #8
1189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 26237              		.loc 1 1189 0
 26238 0934 1C43     		orrs	r4, r4, r3
1191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 26239              		.loc 1 1191 0
 26240 0936 7B68     		ldr	r3, [r7, #4]
 26241 0938 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 26242 093a 1846     		mov	r0, r3
 26243 093c 00F0DCFE 		bl	RTC_ByteToBcd2
 26244 0940 0346     		mov	r3, r0
1190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 26245              		.loc 1 1190 0
 26246 0942 44EA0302 		orr	r2, r4, r3
1192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 26247              		.loc 1 1192 0
 26248 0946 7B68     		ldr	r3, [r7, #4]
 26249 0948 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 26250 094a 4FEA0343 		lsl	r3, r3, #16
1191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 26251              		.loc 1 1191 0
 26252 094e 42EA0304 		orr	r4, r2, r3
1193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 26253              		.loc 1 1193 0
 26254 0952 7B68     		ldr	r3, [r7, #4]
 26255 0954 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 26256 0956 1846     		mov	r0, r3
 26257 0958 00F0CEFE 		bl	RTC_ByteToBcd2
 26258 095c 0346     		mov	r3, r0
 26259 095e 4FEA0363 		lsl	r3, r3, #24
1192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 26260              		.loc 1 1192 0
 26261 0962 44EA0302 		orr	r2, r4, r3
1194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 26262              		.loc 1 1194 0
 26263 0966 7B68     		ldr	r3, [r7, #4]
 26264 0968 9B68     		ldr	r3, [r3, #8]
1193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 26265              		.loc 1 1193 0
 26266 096a 1A43     		orrs	r2, r2, r3
1195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 26267              		.loc 1 1195 0
 26268 096c 7B68     		ldr	r3, [r7, #4]
 26269 096e 5B68     		ldr	r3, [r3, #4]
1189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 26270              		.loc 1 1189 0
 26271 0970 42EA0303 		orr	r3, r2, r3
 26272 0974 7B61     		str	r3, [r7, #20]
 26273              	.L95:
1196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 26274              		.loc 1 1199 0
 26275 0976 0D4B     		ldr	r3, .L98
 26276 0978 4FF0CA02 		mov	r2, #202
 26277 097c 5A62     		str	r2, [r3, #36]
1200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 26278              		.loc 1 1200 0
 26279 097e 0B4B     		ldr	r3, .L98
 26280 0980 4FF05302 		mov	r2, #83
 26281 0984 5A62     		str	r2, [r3, #36]
1201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
1203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 26282              		.loc 1 1203 0
 26283 0986 BB68     		ldr	r3, [r7, #8]
 26284 0988 B3F5807F 		cmp	r3, #256
 26285 098c 03D1     		bne	.L96
1204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
 26286              		.loc 1 1205 0
 26287 098e 074B     		ldr	r3, .L98
 26288 0990 7A69     		ldr	r2, [r7, #20]
 26289 0992 DA61     		str	r2, [r3, #28]
 26290 0994 02E0     		b	.L97
 26291              	.L96:
1206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
 26292              		.loc 1 1209 0
 26293 0996 054B     		ldr	r3, .L98
 26294 0998 7A69     		ldr	r2, [r7, #20]
 26295 099a 1A62     		str	r2, [r3, #32]
 26296              	.L97:
1210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 26297              		.loc 1 1213 0
 26298 099c 034B     		ldr	r3, .L98
 26299 099e 4FF0FF02 		mov	r2, #255
 26300 09a2 5A62     		str	r2, [r3, #36]
1214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 26301              		.loc 1 1214 0
 26302 09a4 07F11C07 		add	r7, r7, #28
 26303 09a8 BD46     		mov	sp, r7
 26304 09aa 90BD     		pop	{r4, r7, pc}
 26305              	.L99:
 26306              		.align	2
 26307              	.L98:
 26308 09ac 00280040 		.word	1073752064
 26309              		.cfi_endproc
 26310              	.LFE126:
 26312              		.align	2
 26313              		.global	RTC_AlarmStructInit
 26314              		.thumb
 26315              		.thumb_func
 26317              	RTC_AlarmStructInit:
 26318              	.LFB127:
1215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         all fields are masked).
1220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         will be initialized.
1222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 26319              		.loc 1 1225 0
 26320              		.cfi_startproc
 26321              		@ args = 0, pretend = 0, frame = 8
 26322              		@ frame_needed = 1, uses_anonymous_args = 0
 26323              		@ link register save eliminated.
 26324 09b0 80B4     		push	{r7}
 26325              	.LCFI50:
 26326              		.cfi_def_cfa_offset 4
 26327 09b2 83B0     		sub	sp, sp, #12
 26328              	.LCFI51:
 26329              		.cfi_def_cfa_offset 16
 26330 09b4 00AF     		add	r7, sp, #0
 26331              		.cfi_offset 7, -4
 26332              	.LCFI52:
 26333              		.cfi_def_cfa_register 7
 26334 09b6 7860     		str	r0, [r7, #4]
1226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 26335              		.loc 1 1227 0
 26336 09b8 7B68     		ldr	r3, [r7, #4]
 26337 09ba 4FF00002 		mov	r2, #0
 26338 09be DA70     		strb	r2, [r3, #3]
1228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 26339              		.loc 1 1228 0
 26340 09c0 7B68     		ldr	r3, [r7, #4]
 26341 09c2 4FF00002 		mov	r2, #0
 26342 09c6 1A70     		strb	r2, [r3, #0]
1229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 26343              		.loc 1 1229 0
 26344 09c8 7B68     		ldr	r3, [r7, #4]
 26345 09ca 4FF00002 		mov	r2, #0
 26346 09ce 5A70     		strb	r2, [r3, #1]
1230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 26347              		.loc 1 1230 0
 26348 09d0 7B68     		ldr	r3, [r7, #4]
 26349 09d2 4FF00002 		mov	r2, #0
 26350 09d6 9A70     		strb	r2, [r3, #2]
1231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 26351              		.loc 1 1233 0
 26352 09d8 7B68     		ldr	r3, [r7, #4]
 26353 09da 4FF00002 		mov	r2, #0
 26354 09de 9A60     		str	r2, [r3, #8]
1234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 26355              		.loc 1 1234 0
 26356 09e0 7B68     		ldr	r3, [r7, #4]
 26357 09e2 4FF00102 		mov	r2, #1
 26358 09e6 1A73     		strb	r2, [r3, #12]
1235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 26359              		.loc 1 1237 0
 26360 09e8 7B68     		ldr	r3, [r7, #4]
 26361 09ea 4FF00002 		mov	r2, #0
 26362 09ee 5A60     		str	r2, [r3, #4]
1238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 26363              		.loc 1 1238 0
 26364 09f0 07F10C07 		add	r7, r7, #12
 26365 09f4 BD46     		mov	sp, r7
 26366 09f6 80BC     		pop	{r7}
 26367 09f8 7047     		bx	lr
 26368              		.cfi_endproc
 26369              	.LFE127:
 26371 09fa 00BF     		.align	2
 26372              		.global	RTC_GetAlarm
 26373              		.thumb
 26374              		.thumb_func
 26376              	RTC_GetAlarm:
 26377              	.LFB128:
1239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 26378              		.loc 1 1255 0
 26379              		.cfi_startproc
 26380              		@ args = 0, pretend = 0, frame = 24
 26381              		@ frame_needed = 1, uses_anonymous_args = 0
 26382 09fc 80B5     		push	{r7, lr}
 26383              	.LCFI53:
 26384              		.cfi_def_cfa_offset 8
 26385 09fe 86B0     		sub	sp, sp, #24
 26386              	.LCFI54:
 26387              		.cfi_def_cfa_offset 32
 26388 0a00 00AF     		add	r7, sp, #0
 26389              		.cfi_offset 14, -4
 26390              		.cfi_offset 7, -8
 26391              	.LCFI55:
 26392              		.cfi_def_cfa_register 7
 26393 0a02 F860     		str	r0, [r7, #12]
 26394 0a04 B960     		str	r1, [r7, #8]
 26395 0a06 7A60     		str	r2, [r7, #4]
1256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 26396              		.loc 1 1256 0
 26397 0a08 4FF00003 		mov	r3, #0
 26398 0a0c 7B61     		str	r3, [r7, #20]
1257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 26399              		.loc 1 1263 0
 26400 0a0e BB68     		ldr	r3, [r7, #8]
 26401 0a10 B3F5807F 		cmp	r3, #256
 26402 0a14 03D1     		bne	.L102
1264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
 26403              		.loc 1 1265 0
 26404 0a16 314B     		ldr	r3, .L105
 26405 0a18 DB69     		ldr	r3, [r3, #28]
 26406 0a1a 7B61     		str	r3, [r7, #20]
 26407 0a1c 02E0     		b	.L103
 26408              	.L102:
1266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
 26409              		.loc 1 1269 0
 26410 0a1e 2F4B     		ldr	r3, .L105
 26411 0a20 1B6A     		ldr	r3, [r3, #32]
 26412 0a22 7B61     		str	r3, [r7, #20]
 26413              	.L103:
1270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 26414              		.loc 1 1273 0
 26415 0a24 7B69     		ldr	r3, [r7, #20]
 26416 0a26 03F47C13 		and	r3, r3, #4128768
 26417 0a2a 4FEA1343 		lsr	r3, r3, #16
 26418 0a2e DAB2     		uxtb	r2, r3
 26419 0a30 7B68     		ldr	r3, [r7, #4]
 26420 0a32 1A70     		strb	r2, [r3, #0]
1274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 26421              		.loc 1 1275 0
 26422 0a34 7B69     		ldr	r3, [r7, #20]
 26423 0a36 03F4FE43 		and	r3, r3, #32512
 26424 0a3a 4FEA1323 		lsr	r3, r3, #8
 26425 0a3e DAB2     		uxtb	r2, r3
 26426 0a40 7B68     		ldr	r3, [r7, #4]
 26427 0a42 5A70     		strb	r2, [r3, #1]
1276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 26428              		.loc 1 1277 0
 26429 0a44 7B69     		ldr	r3, [r7, #20]
 26430 0a46 DBB2     		uxtb	r3, r3
 26431 0a48 03F07F03 		and	r3, r3, #127
 26432 0a4c DAB2     		uxtb	r2, r3
 26433 0a4e 7B68     		ldr	r3, [r7, #4]
 26434 0a50 9A70     		strb	r2, [r3, #2]
1278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 26435              		.loc 1 1279 0
 26436 0a52 7B69     		ldr	r3, [r7, #20]
 26437 0a54 03F48003 		and	r3, r3, #4194304
 26438 0a58 4FEA1343 		lsr	r3, r3, #16
 26439 0a5c DAB2     		uxtb	r2, r3
 26440 0a5e 7B68     		ldr	r3, [r7, #4]
 26441 0a60 DA70     		strb	r2, [r3, #3]
1280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 26442              		.loc 1 1280 0
 26443 0a62 7B69     		ldr	r3, [r7, #20]
 26444 0a64 03F07C53 		and	r3, r3, #1056964608
 26445 0a68 4FEA1363 		lsr	r3, r3, #24
 26446 0a6c DAB2     		uxtb	r2, r3
 26447 0a6e 7B68     		ldr	r3, [r7, #4]
 26448 0a70 1A73     		strb	r2, [r3, #12]
1281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 26449              		.loc 1 1281 0
 26450 0a72 7B69     		ldr	r3, [r7, #20]
 26451 0a74 03F08042 		and	r2, r3, #1073741824
 26452 0a78 7B68     		ldr	r3, [r7, #4]
 26453 0a7a 9A60     		str	r2, [r3, #8]
1282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 26454              		.loc 1 1282 0
 26455 0a7c 7B69     		ldr	r3, [r7, #20]
 26456 0a7e 03F08032 		and	r2, r3, #-2139062144
 26457 0a82 7B68     		ldr	r3, [r7, #4]
 26458 0a84 5A60     		str	r2, [r3, #4]
1283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 26459              		.loc 1 1284 0
 26460 0a86 FB68     		ldr	r3, [r7, #12]
 26461 0a88 002B     		cmp	r3, #0
 26462 0a8a 23D1     		bne	.L101
1285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 26463              		.loc 1 1286 0
 26464 0a8c 7B68     		ldr	r3, [r7, #4]
 26465 0a8e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 26466 0a90 1846     		mov	r0, r3
 26467 0a92 00F053FE 		bl	RTC_Bcd2ToByte
 26468 0a96 0346     		mov	r3, r0
 26469 0a98 1A46     		mov	r2, r3
 26470 0a9a 7B68     		ldr	r3, [r7, #4]
 26471 0a9c 1A70     		strb	r2, [r3, #0]
1287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 26472              		.loc 1 1288 0
 26473 0a9e 7B68     		ldr	r3, [r7, #4]
 26474 0aa0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 26475 0aa2 1846     		mov	r0, r3
 26476 0aa4 00F04AFE 		bl	RTC_Bcd2ToByte
 26477 0aa8 0346     		mov	r3, r0
 26478 0aaa 1A46     		mov	r2, r3
 26479 0aac 7B68     		ldr	r3, [r7, #4]
 26480 0aae 5A70     		strb	r2, [r3, #1]
1289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 26481              		.loc 1 1290 0
 26482 0ab0 7B68     		ldr	r3, [r7, #4]
 26483 0ab2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 26484 0ab4 1846     		mov	r0, r3
 26485 0ab6 00F041FE 		bl	RTC_Bcd2ToByte
 26486 0aba 0346     		mov	r3, r0
 26487 0abc 1A46     		mov	r2, r3
 26488 0abe 7B68     		ldr	r3, [r7, #4]
 26489 0ac0 9A70     		strb	r2, [r3, #2]
1291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 26490              		.loc 1 1292 0
 26491 0ac2 7B68     		ldr	r3, [r7, #4]
 26492 0ac4 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 26493 0ac6 1846     		mov	r0, r3
 26494 0ac8 00F038FE 		bl	RTC_Bcd2ToByte
 26495 0acc 0346     		mov	r3, r0
 26496 0ace 1A46     		mov	r2, r3
 26497 0ad0 7B68     		ldr	r3, [r7, #4]
 26498 0ad2 1A73     		strb	r2, [r3, #12]
 26499              	.L101:
1293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 26500              		.loc 1 1294 0
 26501 0ad4 07F11807 		add	r7, r7, #24
 26502 0ad8 BD46     		mov	sp, r7
 26503 0ada 80BD     		pop	{r7, pc}
 26504              	.L106:
 26505              		.align	2
 26506              	.L105:
 26507 0adc 00280040 		.word	1073752064
 26508              		.cfi_endproc
 26509              	.LFE128:
 26511              		.align	2
 26512              		.global	RTC_AlarmCmd
 26513              		.thumb
 26514              		.thumb_func
 26516              	RTC_AlarmCmd:
 26517              	.LFB129:
1295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 26518              		.loc 1 1309 0
 26519              		.cfi_startproc
 26520              		@ args = 0, pretend = 0, frame = 24
 26521              		@ frame_needed = 1, uses_anonymous_args = 0
 26522              		@ link register save eliminated.
 26523 0ae0 80B4     		push	{r7}
 26524              	.LCFI56:
 26525              		.cfi_def_cfa_offset 4
 26526 0ae2 87B0     		sub	sp, sp, #28
 26527              	.LCFI57:
 26528              		.cfi_def_cfa_offset 32
 26529 0ae4 00AF     		add	r7, sp, #0
 26530              		.cfi_offset 7, -4
 26531              	.LCFI58:
 26532              		.cfi_def_cfa_register 7
 26533 0ae6 7860     		str	r0, [r7, #4]
 26534 0ae8 0B46     		mov	r3, r1
 26535 0aea FB70     		strb	r3, [r7, #3]
1310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 26536              		.loc 1 1310 0
 26537 0aec 4FF00003 		mov	r3, #0
 26538 0af0 FB60     		str	r3, [r7, #12]
1311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 26539              		.loc 1 1311 0
 26540 0af2 4FF00003 		mov	r3, #0
 26541 0af6 3B61     		str	r3, [r7, #16]
1312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 26542              		.loc 1 1312 0
 26543 0af8 4FF00003 		mov	r3, #0
 26544 0afc FB75     		strb	r3, [r7, #23]
1313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 26545              		.loc 1 1319 0
 26546 0afe 264B     		ldr	r3, .L113
 26547 0b00 4FF0CA02 		mov	r2, #202
 26548 0b04 5A62     		str	r2, [r3, #36]
1320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 26549              		.loc 1 1320 0
 26550 0b06 244B     		ldr	r3, .L113
 26551 0b08 4FF05302 		mov	r2, #83
 26552 0b0c 5A62     		str	r2, [r3, #36]
1321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 26553              		.loc 1 1323 0
 26554 0b0e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26555 0b10 002B     		cmp	r3, #0
 26556 0b12 0AD0     		beq	.L108
1324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 26557              		.loc 1 1325 0
 26558 0b14 204B     		ldr	r3, .L113
 26559 0b16 204A     		ldr	r2, .L113
 26560 0b18 9168     		ldr	r1, [r2, #8]
 26561 0b1a 7A68     		ldr	r2, [r7, #4]
 26562 0b1c 41EA0202 		orr	r2, r1, r2
 26563 0b20 9A60     		str	r2, [r3, #8]
1326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 26564              		.loc 1 1327 0
 26565 0b22 4FF00103 		mov	r3, #1
 26566 0b26 FB75     		strb	r3, [r7, #23]
 26567 0b28 2BE0     		b	.L109
 26568              	.L108:
1328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
 26569              		.loc 1 1332 0
 26570 0b2a 1B4B     		ldr	r3, .L113
 26571 0b2c 1A4A     		ldr	r2, .L113
 26572 0b2e 9168     		ldr	r1, [r2, #8]
 26573 0b30 7A68     		ldr	r2, [r7, #4]
 26574 0b32 6FEA0202 		mvn	r2, r2
 26575 0b36 01EA0202 		and	r2, r1, r2
 26576 0b3a 9A60     		str	r2, [r3, #8]
 26577              	.L111:
1333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 26578              		.loc 1 1337 0 discriminator 1
 26579 0b3c 164B     		ldr	r3, .L113
 26580 0b3e DA68     		ldr	r2, [r3, #12]
 26581 0b40 7B68     		ldr	r3, [r7, #4]
 26582 0b42 4FEA1323 		lsr	r3, r3, #8
 26583 0b46 02EA0303 		and	r3, r2, r3
 26584 0b4a 3B61     		str	r3, [r7, #16]
1338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 26585              		.loc 1 1338 0 discriminator 1
 26586 0b4c FB68     		ldr	r3, [r7, #12]
 26587 0b4e 03F10103 		add	r3, r3, #1
 26588 0b52 FB60     		str	r3, [r7, #12]
1339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 26589              		.loc 1 1339 0 discriminator 1
 26590 0b54 FB68     		ldr	r3, [r7, #12]
 26591 0b56 B3F5803F 		cmp	r3, #65536
 26592 0b5a 02D0     		beq	.L110
 26593 0b5c 3B69     		ldr	r3, [r7, #16]
 26594 0b5e 002B     		cmp	r3, #0
 26595 0b60 ECD0     		beq	.L111
 26596              	.L110:
1340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 26597              		.loc 1 1341 0
 26598 0b62 0D4B     		ldr	r3, .L113
 26599 0b64 DA68     		ldr	r2, [r3, #12]
 26600 0b66 7B68     		ldr	r3, [r7, #4]
 26601 0b68 4FEA1323 		lsr	r3, r3, #8
 26602 0b6c 02EA0303 		and	r3, r2, r3
 26603 0b70 002B     		cmp	r3, #0
 26604 0b72 03D1     		bne	.L112
1342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 26605              		.loc 1 1343 0
 26606 0b74 4FF00003 		mov	r3, #0
 26607 0b78 FB75     		strb	r3, [r7, #23]
 26608 0b7a 02E0     		b	.L109
 26609              	.L112:
1344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 26610              		.loc 1 1347 0
 26611 0b7c 4FF00103 		mov	r3, #1
 26612 0b80 FB75     		strb	r3, [r7, #23]
 26613              	.L109:
1348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
1349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 26614              		.loc 1 1352 0
 26615 0b82 054B     		ldr	r3, .L113
 26616 0b84 4FF0FF02 		mov	r2, #255
 26617 0b88 5A62     		str	r2, [r3, #36]
1353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 26618              		.loc 1 1354 0
 26619 0b8a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 26620              		.loc 1 1355 0
 26621 0b8c 1846     		mov	r0, r3
 26622 0b8e 07F11C07 		add	r7, r7, #28
 26623 0b92 BD46     		mov	sp, r7
 26624 0b94 80BC     		pop	{r7}
 26625 0b96 7047     		bx	lr
 26626              	.L114:
 26627              		.align	2
 26628              	.L113:
 26629 0b98 00280040 		.word	1073752064
 26630              		.cfi_endproc
 26631              	.LFE129:
 26633              		.align	2
 26634              		.global	RTC_AlarmSubSecondConfig
 26635              		.thumb
 26636              		.thumb_func
 26638              	RTC_AlarmSubSecondConfig:
 26639              	.LFB130:
1356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Subseconds value and mask.*
1359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Subseconds value.
1365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Subseconds Mask.
1367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
1397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
1399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          to activate alarm
1400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 26640              		.loc 1 1403 0
 26641              		.cfi_startproc
 26642              		@ args = 0, pretend = 0, frame = 24
 26643              		@ frame_needed = 1, uses_anonymous_args = 0
 26644              		@ link register save eliminated.
 26645 0b9c 80B4     		push	{r7}
 26646              	.LCFI59:
 26647              		.cfi_def_cfa_offset 4
 26648 0b9e 87B0     		sub	sp, sp, #28
 26649              	.LCFI60:
 26650              		.cfi_def_cfa_offset 32
 26651 0ba0 00AF     		add	r7, sp, #0
 26652              		.cfi_offset 7, -4
 26653              	.LCFI61:
 26654              		.cfi_def_cfa_register 7
 26655 0ba2 F860     		str	r0, [r7, #12]
 26656 0ba4 B960     		str	r1, [r7, #8]
 26657 0ba6 7A60     		str	r2, [r7, #4]
1404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 26658              		.loc 1 1404 0
 26659 0ba8 4FF00003 		mov	r3, #0
 26660 0bac 7B61     		str	r3, [r7, #20]
1405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 26661              		.loc 1 1412 0
 26662 0bae 104B     		ldr	r3, .L118
 26663 0bb0 4FF0CA02 		mov	r2, #202
 26664 0bb4 5A62     		str	r2, [r3, #36]
1413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 26665              		.loc 1 1413 0
 26666 0bb6 0E4B     		ldr	r3, .L118
 26667 0bb8 4FF05302 		mov	r2, #83
 26668 0bbc 5A62     		str	r2, [r3, #36]
1414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B SubSecond registers */
1416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 26669              		.loc 1 1416 0
 26670 0bbe BA68     		ldr	r2, [r7, #8]
 26671 0bc0 7B68     		ldr	r3, [r7, #4]
 26672 0bc2 42EA0303 		orr	r3, r2, r3
 26673 0bc6 7B61     		str	r3, [r7, #20]
1417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 26674              		.loc 1 1418 0
 26675 0bc8 FB68     		ldr	r3, [r7, #12]
 26676 0bca B3F5807F 		cmp	r3, #256
 26677 0bce 03D1     		bne	.L116
1419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the AlarmA SubSecond register */
1421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
 26678              		.loc 1 1421 0
 26679 0bd0 074B     		ldr	r3, .L118
 26680 0bd2 7A69     		ldr	r2, [r7, #20]
 26681 0bd4 5A64     		str	r2, [r3, #68]
 26682 0bd6 02E0     		b	.L117
 26683              	.L116:
1422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Alarm B SubSecond register */
1426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
 26684              		.loc 1 1426 0
 26685 0bd8 054B     		ldr	r3, .L118
 26686 0bda 7A69     		ldr	r2, [r7, #20]
 26687 0bdc 9A64     		str	r2, [r3, #72]
 26688              	.L117:
1427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 26689              		.loc 1 1430 0
 26690 0bde 044B     		ldr	r3, .L118
 26691 0be0 4FF0FF02 		mov	r2, #255
 26692 0be4 5A62     		str	r2, [r3, #36]
1431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 26693              		.loc 1 1432 0
 26694 0be6 07F11C07 		add	r7, r7, #28
 26695 0bea BD46     		mov	sp, r7
 26696 0bec 80BC     		pop	{r7}
 26697 0bee 7047     		bx	lr
 26698              	.L119:
 26699              		.align	2
 26700              	.L118:
 26701 0bf0 00280040 		.word	1073752064
 26702              		.cfi_endproc
 26703              	.LFE130:
 26705              		.align	2
 26706              		.global	RTC_GetAlarmSubSecond
 26707              		.thumb
 26708              		.thumb_func
 26710              	RTC_GetAlarmSubSecond:
 26711              	.LFB131:
1433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Subseconds value.
1436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Alarm Subseconds value.
1442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 26712              		.loc 1 1444 0
 26713              		.cfi_startproc
 26714              		@ args = 0, pretend = 0, frame = 16
 26715              		@ frame_needed = 1, uses_anonymous_args = 0
 26716              		@ link register save eliminated.
 26717 0bf4 80B4     		push	{r7}
 26718              	.LCFI62:
 26719              		.cfi_def_cfa_offset 4
 26720 0bf6 85B0     		sub	sp, sp, #20
 26721              	.LCFI63:
 26722              		.cfi_def_cfa_offset 24
 26723 0bf8 00AF     		add	r7, sp, #0
 26724              		.cfi_offset 7, -4
 26725              	.LCFI64:
 26726              		.cfi_def_cfa_register 7
 26727 0bfa 7860     		str	r0, [r7, #4]
1445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 26728              		.loc 1 1445 0
 26729 0bfc 4FF00003 		mov	r3, #0
 26730 0c00 FB60     		str	r3, [r7, #12]
1446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 26731              		.loc 1 1448 0
 26732 0c02 7B68     		ldr	r3, [r7, #4]
 26733 0c04 B3F5807F 		cmp	r3, #256
 26734 0c08 07D1     		bne	.L121
1449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 26735              		.loc 1 1450 0
 26736 0c0a 0B4B     		ldr	r3, .L123
 26737 0c0c 5B6C     		ldr	r3, [r3, #68]
 26738 0c0e 4FEA4343 		lsl	r3, r3, #17
 26739 0c12 4FEA5343 		lsr	r3, r3, #17
 26740 0c16 FB60     		str	r3, [r7, #12]
 26741 0c18 06E0     		b	.L122
 26742              	.L121:
1451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 26743              		.loc 1 1454 0
 26744 0c1a 074B     		ldr	r3, .L123
 26745 0c1c 9B6C     		ldr	r3, [r3, #72]
 26746 0c1e 4FEA4343 		lsl	r3, r3, #17
 26747 0c22 4FEA5343 		lsr	r3, r3, #17
 26748 0c26 FB60     		str	r3, [r7, #12]
 26749              	.L122:
1455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 26750              		.loc 1 1457 0
 26751 0c28 FB68     		ldr	r3, [r7, #12]
1458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 26752              		.loc 1 1458 0
 26753 0c2a 1846     		mov	r0, r3
 26754 0c2c 07F11407 		add	r7, r7, #20
 26755 0c30 BD46     		mov	sp, r7
 26756 0c32 80BC     		pop	{r7}
 26757 0c34 7047     		bx	lr
 26758              	.L124:
 26759 0c36 00BF     		.align	2
 26760              	.L123:
 26761 0c38 00280040 		.word	1073752064
 26762              		.cfi_endproc
 26763              	.LFE131:
 26765              		.align	2
 26766              		.global	RTC_WakeUpClockConfig
 26767              		.thumb
 26768              		.thumb_func
 26770              	RTC_WakeUpClockConfig:
 26771              	.LFB132:
1459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                      WakeUp Timer configuration functions
1470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC WakeUp.
1473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 26772              		.loc 1 1493 0
 26773              		.cfi_startproc
 26774              		@ args = 0, pretend = 0, frame = 8
 26775              		@ frame_needed = 1, uses_anonymous_args = 0
 26776              		@ link register save eliminated.
 26777 0c3c 80B4     		push	{r7}
 26778              	.LCFI65:
 26779              		.cfi_def_cfa_offset 4
 26780 0c3e 83B0     		sub	sp, sp, #12
 26781              	.LCFI66:
 26782              		.cfi_def_cfa_offset 16
 26783 0c40 00AF     		add	r7, sp, #0
 26784              		.cfi_offset 7, -4
 26785              	.LCFI67:
 26786              		.cfi_def_cfa_register 7
 26787 0c42 7860     		str	r0, [r7, #4]
1494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 26788              		.loc 1 1498 0
 26789 0c44 0E4B     		ldr	r3, .L126
 26790 0c46 4FF0CA02 		mov	r2, #202
 26791 0c4a 5A62     		str	r2, [r3, #36]
1499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 26792              		.loc 1 1499 0
 26793 0c4c 0C4B     		ldr	r3, .L126
 26794 0c4e 4FF05302 		mov	r2, #83
 26795 0c52 5A62     		str	r2, [r3, #36]
1500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 26796              		.loc 1 1502 0
 26797 0c54 0A4B     		ldr	r3, .L126
 26798 0c56 0A4A     		ldr	r2, .L126
 26799 0c58 9268     		ldr	r2, [r2, #8]
 26800 0c5a 22F00702 		bic	r2, r2, #7
 26801 0c5e 9A60     		str	r2, [r3, #8]
1503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the clock source */
1505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 26802              		.loc 1 1505 0
 26803 0c60 074B     		ldr	r3, .L126
 26804 0c62 074A     		ldr	r2, .L126
 26805 0c64 9168     		ldr	r1, [r2, #8]
 26806 0c66 7A68     		ldr	r2, [r7, #4]
 26807 0c68 41EA0202 		orr	r2, r1, r2
 26808 0c6c 9A60     		str	r2, [r3, #8]
1506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 26809              		.loc 1 1508 0
 26810 0c6e 044B     		ldr	r3, .L126
 26811 0c70 4FF0FF02 		mov	r2, #255
 26812 0c74 5A62     		str	r2, [r3, #36]
1509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 26813              		.loc 1 1509 0
 26814 0c76 07F10C07 		add	r7, r7, #12
 26815 0c7a BD46     		mov	sp, r7
 26816 0c7c 80BC     		pop	{r7}
 26817 0c7e 7047     		bx	lr
 26818              	.L127:
 26819              		.align	2
 26820              	.L126:
 26821 0c80 00280040 		.word	1073752064
 26822              		.cfi_endproc
 26823              	.LFE132:
 26825              		.align	2
 26826              		.global	RTC_SetWakeUpCounter
 26827              		.thumb
 26828              		.thumb_func
 26830              	RTC_SetWakeUpCounter:
 26831              	.LFB133:
1510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 26832              		.loc 1 1520 0
 26833              		.cfi_startproc
 26834              		@ args = 0, pretend = 0, frame = 8
 26835              		@ frame_needed = 1, uses_anonymous_args = 0
 26836              		@ link register save eliminated.
 26837 0c84 80B4     		push	{r7}
 26838              	.LCFI68:
 26839              		.cfi_def_cfa_offset 4
 26840 0c86 83B0     		sub	sp, sp, #12
 26841              	.LCFI69:
 26842              		.cfi_def_cfa_offset 16
 26843 0c88 00AF     		add	r7, sp, #0
 26844              		.cfi_offset 7, -4
 26845              	.LCFI70:
 26846              		.cfi_def_cfa_register 7
 26847 0c8a 7860     		str	r0, [r7, #4]
1521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 26848              		.loc 1 1525 0
 26849 0c8c 094B     		ldr	r3, .L129
 26850 0c8e 4FF0CA02 		mov	r2, #202
 26851 0c92 5A62     		str	r2, [r3, #36]
1526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 26852              		.loc 1 1526 0
 26853 0c94 074B     		ldr	r3, .L129
 26854 0c96 4FF05302 		mov	r2, #83
 26855 0c9a 5A62     		str	r2, [r3, #36]
1527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 26856              		.loc 1 1529 0
 26857 0c9c 054B     		ldr	r3, .L129
 26858 0c9e 7A68     		ldr	r2, [r7, #4]
 26859 0ca0 5A61     		str	r2, [r3, #20]
1530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 26860              		.loc 1 1532 0
 26861 0ca2 044B     		ldr	r3, .L129
 26862 0ca4 4FF0FF02 		mov	r2, #255
 26863 0ca8 5A62     		str	r2, [r3, #36]
1533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 26864              		.loc 1 1533 0
 26865 0caa 07F10C07 		add	r7, r7, #12
 26866 0cae BD46     		mov	sp, r7
 26867 0cb0 80BC     		pop	{r7}
 26868 0cb2 7047     		bx	lr
 26869              	.L130:
 26870              		.align	2
 26871              	.L129:
 26872 0cb4 00280040 		.word	1073752064
 26873              		.cfi_endproc
 26874              	.LFE133:
 26876              		.align	2
 26877              		.global	RTC_GetWakeUpCounter
 26878              		.thumb
 26879              		.thumb_func
 26881              	RTC_GetWakeUpCounter:
 26882              	.LFB134:
1534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 26883              		.loc 1 1541 0
 26884              		.cfi_startproc
 26885              		@ args = 0, pretend = 0, frame = 0
 26886              		@ frame_needed = 1, uses_anonymous_args = 0
 26887              		@ link register save eliminated.
 26888 0cb8 80B4     		push	{r7}
 26889              	.LCFI71:
 26890              		.cfi_def_cfa_offset 4
 26891 0cba 00AF     		add	r7, sp, #0
 26892              		.cfi_offset 7, -4
 26893              	.LCFI72:
 26894              		.cfi_def_cfa_register 7
1542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the counter value */
1543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 26895              		.loc 1 1543 0
 26896 0cbc 044B     		ldr	r3, .L132
 26897 0cbe 5B69     		ldr	r3, [r3, #20]
 26898 0cc0 4FEA0343 		lsl	r3, r3, #16
 26899 0cc4 4FEA1343 		lsr	r3, r3, #16
1544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 26900              		.loc 1 1544 0
 26901 0cc8 1846     		mov	r0, r3
 26902 0cca BD46     		mov	sp, r7
 26903 0ccc 80BC     		pop	{r7}
 26904 0cce 7047     		bx	lr
 26905              	.L133:
 26906              		.align	2
 26907              	.L132:
 26908 0cd0 00280040 		.word	1073752064
 26909              		.cfi_endproc
 26910              	.LFE134:
 26912              		.align	2
 26913              		.global	RTC_WakeUpCmd
 26914              		.thumb
 26915              		.thumb_func
 26917              	RTC_WakeUpCmd:
 26918              	.LFB135:
1545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 26919              		.loc 1 1553 0
 26920              		.cfi_startproc
 26921              		@ args = 0, pretend = 0, frame = 24
 26922              		@ frame_needed = 1, uses_anonymous_args = 0
 26923              		@ link register save eliminated.
 26924 0cd4 80B4     		push	{r7}
 26925              	.LCFI73:
 26926              		.cfi_def_cfa_offset 4
 26927 0cd6 87B0     		sub	sp, sp, #28
 26928              	.LCFI74:
 26929              		.cfi_def_cfa_offset 32
 26930 0cd8 00AF     		add	r7, sp, #0
 26931              		.cfi_offset 7, -4
 26932              	.LCFI75:
 26933              		.cfi_def_cfa_register 7
 26934 0cda 0346     		mov	r3, r0
 26935 0cdc FB71     		strb	r3, [r7, #7]
1554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 26936              		.loc 1 1554 0
 26937 0cde 4FF00003 		mov	r3, #0
 26938 0ce2 FB60     		str	r3, [r7, #12]
1555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 26939              		.loc 1 1555 0
 26940 0ce4 4FF00003 		mov	r3, #0
 26941 0ce8 3B61     		str	r3, [r7, #16]
1556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 26942              		.loc 1 1556 0
 26943 0cea 4FF00003 		mov	r3, #0
 26944 0cee FB75     		strb	r3, [r7, #23]
1557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 26945              		.loc 1 1562 0
 26946 0cf0 214B     		ldr	r3, .L140
 26947 0cf2 4FF0CA02 		mov	r2, #202
 26948 0cf6 5A62     		str	r2, [r3, #36]
1563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 26949              		.loc 1 1563 0
 26950 0cf8 1F4B     		ldr	r3, .L140
 26951 0cfa 4FF05302 		mov	r2, #83
 26952 0cfe 5A62     		str	r2, [r3, #36]
1564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 26953              		.loc 1 1565 0
 26954 0d00 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 26955 0d02 002B     		cmp	r3, #0
 26956 0d04 09D0     		beq	.L135
1566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
1568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 26957              		.loc 1 1568 0
 26958 0d06 1C4B     		ldr	r3, .L140
 26959 0d08 1B4A     		ldr	r2, .L140
 26960 0d0a 9268     		ldr	r2, [r2, #8]
 26961 0d0c 42F48062 		orr	r2, r2, #1024
 26962 0d10 9A60     		str	r2, [r3, #8]
1569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 26963              		.loc 1 1569 0
 26964 0d12 4FF00103 		mov	r3, #1
 26965 0d16 FB75     		strb	r3, [r7, #23]
 26966 0d18 22E0     		b	.L136
 26967              	.L135:
1570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 26968              		.loc 1 1574 0
 26969 0d1a 174B     		ldr	r3, .L140
 26970 0d1c 164A     		ldr	r2, .L140
 26971 0d1e 9268     		ldr	r2, [r2, #8]
 26972 0d20 22F48062 		bic	r2, r2, #1024
 26973 0d24 9A60     		str	r2, [r3, #8]
 26974              	.L138:
1575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 26975              		.loc 1 1578 0 discriminator 1
 26976 0d26 144B     		ldr	r3, .L140
 26977 0d28 DB68     		ldr	r3, [r3, #12]
 26978 0d2a 03F00403 		and	r3, r3, #4
 26979 0d2e 3B61     		str	r3, [r7, #16]
1579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 26980              		.loc 1 1579 0 discriminator 1
 26981 0d30 FB68     		ldr	r3, [r7, #12]
 26982 0d32 03F10103 		add	r3, r3, #1
 26983 0d36 FB60     		str	r3, [r7, #12]
1580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 26984              		.loc 1 1580 0 discriminator 1
 26985 0d38 FB68     		ldr	r3, [r7, #12]
 26986 0d3a B3F5803F 		cmp	r3, #65536
 26987 0d3e 02D0     		beq	.L137
 26988 0d40 3B69     		ldr	r3, [r7, #16]
 26989 0d42 002B     		cmp	r3, #0
 26990 0d44 EFD0     		beq	.L138
 26991              	.L137:
1581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 26992              		.loc 1 1582 0
 26993 0d46 0C4B     		ldr	r3, .L140
 26994 0d48 DB68     		ldr	r3, [r3, #12]
 26995 0d4a 03F00403 		and	r3, r3, #4
 26996 0d4e 002B     		cmp	r3, #0
 26997 0d50 03D1     		bne	.L139
1583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 26998              		.loc 1 1584 0
 26999 0d52 4FF00003 		mov	r3, #0
 27000 0d56 FB75     		strb	r3, [r7, #23]
 27001 0d58 02E0     		b	.L136
 27002              	.L139:
1585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 27003              		.loc 1 1588 0
 27004 0d5a 4FF00103 		mov	r3, #1
 27005 0d5e FB75     		strb	r3, [r7, #23]
 27006              	.L136:
1589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 27007              		.loc 1 1593 0
 27008 0d60 054B     		ldr	r3, .L140
 27009 0d62 4FF0FF02 		mov	r2, #255
 27010 0d66 5A62     		str	r2, [r3, #36]
1594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 27011              		.loc 1 1595 0
 27012 0d68 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27013              		.loc 1 1596 0
 27014 0d6a 1846     		mov	r0, r3
 27015 0d6c 07F11C07 		add	r7, r7, #28
 27016 0d70 BD46     		mov	sp, r7
 27017 0d72 80BC     		pop	{r7}
 27018 0d74 7047     		bx	lr
 27019              	.L141:
 27020 0d76 00BF     		.align	2
 27021              	.L140:
 27022 0d78 00280040 		.word	1073752064
 27023              		.cfi_endproc
 27024              	.LFE135:
 27026              		.align	2
 27027              		.global	RTC_DayLightSavingConfig
 27028              		.thumb
 27029              		.thumb_func
 27031              	RTC_DayLightSavingConfig:
 27032              	.LFB136:
1597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                     Daylight Saving configuration functions
1608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC DayLight Saving.
1611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27033              		.loc 1 1630 0
 27034              		.cfi_startproc
 27035              		@ args = 0, pretend = 0, frame = 8
 27036              		@ frame_needed = 1, uses_anonymous_args = 0
 27037              		@ link register save eliminated.
 27038 0d7c 80B4     		push	{r7}
 27039              	.LCFI76:
 27040              		.cfi_def_cfa_offset 4
 27041 0d7e 83B0     		sub	sp, sp, #12
 27042              	.LCFI77:
 27043              		.cfi_def_cfa_offset 16
 27044 0d80 00AF     		add	r7, sp, #0
 27045              		.cfi_offset 7, -4
 27046              	.LCFI78:
 27047              		.cfi_def_cfa_register 7
 27048 0d82 7860     		str	r0, [r7, #4]
 27049 0d84 3960     		str	r1, [r7, #0]
1631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 27050              		.loc 1 1636 0
 27051 0d86 104B     		ldr	r3, .L143
 27052 0d88 4FF0CA02 		mov	r2, #202
 27053 0d8c 5A62     		str	r2, [r3, #36]
1637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 27054              		.loc 1 1637 0
 27055 0d8e 0E4B     		ldr	r3, .L143
 27056 0d90 4FF05302 		mov	r2, #83
 27057 0d94 5A62     		str	r2, [r3, #36]
1638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 27058              		.loc 1 1640 0
 27059 0d96 0C4B     		ldr	r3, .L143
 27060 0d98 0B4A     		ldr	r2, .L143
 27061 0d9a 9268     		ldr	r2, [r2, #8]
 27062 0d9c 22F48022 		bic	r2, r2, #262144
 27063 0da0 9A60     		str	r2, [r3, #8]
1641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 27064              		.loc 1 1643 0
 27065 0da2 094B     		ldr	r3, .L143
 27066 0da4 084A     		ldr	r2, .L143
 27067 0da6 9168     		ldr	r1, [r2, #8]
 27068 0da8 7868     		ldr	r0, [r7, #4]
 27069 0daa 3A68     		ldr	r2, [r7, #0]
 27070 0dac 40EA0202 		orr	r2, r0, r2
 27071 0db0 41EA0202 		orr	r2, r1, r2
 27072 0db4 9A60     		str	r2, [r3, #8]
1644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 27073              		.loc 1 1646 0
 27074 0db6 044B     		ldr	r3, .L143
 27075 0db8 4FF0FF02 		mov	r2, #255
 27076 0dbc 5A62     		str	r2, [r3, #36]
1647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27077              		.loc 1 1647 0
 27078 0dbe 07F10C07 		add	r7, r7, #12
 27079 0dc2 BD46     		mov	sp, r7
 27080 0dc4 80BC     		pop	{r7}
 27081 0dc6 7047     		bx	lr
 27082              	.L144:
 27083              		.align	2
 27084              	.L143:
 27085 0dc8 00280040 		.word	1073752064
 27086              		.cfi_endproc
 27087              	.LFE136:
 27089              		.align	2
 27090              		.global	RTC_GetStoreOperation
 27091              		.thumb
 27092              		.thumb_func
 27094              	RTC_GetStoreOperation:
 27095              	.LFB137:
1648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27096              		.loc 1 1657 0
 27097              		.cfi_startproc
 27098              		@ args = 0, pretend = 0, frame = 0
 27099              		@ frame_needed = 1, uses_anonymous_args = 0
 27100              		@ link register save eliminated.
 27101 0dcc 80B4     		push	{r7}
 27102              	.LCFI79:
 27103              		.cfi_def_cfa_offset 4
 27104 0dce 00AF     		add	r7, sp, #0
 27105              		.cfi_offset 7, -4
 27106              	.LCFI80:
 27107              		.cfi_def_cfa_register 7
1658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 27108              		.loc 1 1658 0
 27109 0dd0 034B     		ldr	r3, .L146
 27110 0dd2 9B68     		ldr	r3, [r3, #8]
 27111 0dd4 03F48023 		and	r3, r3, #262144
1659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27112              		.loc 1 1659 0
 27113 0dd8 1846     		mov	r0, r3
 27114 0dda BD46     		mov	sp, r7
 27115 0ddc 80BC     		pop	{r7}
 27116 0dde 7047     		bx	lr
 27117              	.L147:
 27118              		.align	2
 27119              	.L146:
 27120 0de0 00280040 		.word	1073752064
 27121              		.cfi_endproc
 27122              	.LFE137:
 27124              		.align	2
 27125              		.global	RTC_OutputConfig
 27126              		.thumb
 27127              		.thumb_func
 27129              	RTC_OutputConfig:
 27130              	.LFB138:
1660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                          Output pin Configuration function
1671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC Output source.
1674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27131              		.loc 1 1696 0
 27132              		.cfi_startproc
 27133              		@ args = 0, pretend = 0, frame = 8
 27134              		@ frame_needed = 1, uses_anonymous_args = 0
 27135              		@ link register save eliminated.
 27136 0de4 80B4     		push	{r7}
 27137              	.LCFI81:
 27138              		.cfi_def_cfa_offset 4
 27139 0de6 83B0     		sub	sp, sp, #12
 27140              	.LCFI82:
 27141              		.cfi_def_cfa_offset 16
 27142 0de8 00AF     		add	r7, sp, #0
 27143              		.cfi_offset 7, -4
 27144              	.LCFI83:
 27145              		.cfi_def_cfa_register 7
 27146 0dea 7860     		str	r0, [r7, #4]
 27147 0dec 3960     		str	r1, [r7, #0]
1697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 27148              		.loc 1 1702 0
 27149 0dee 104B     		ldr	r3, .L149
 27150 0df0 4FF0CA02 		mov	r2, #202
 27151 0df4 5A62     		str	r2, [r3, #36]
1703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 27152              		.loc 1 1703 0
 27153 0df6 0E4B     		ldr	r3, .L149
 27154 0df8 4FF05302 		mov	r2, #83
 27155 0dfc 5A62     		str	r2, [r3, #36]
1704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 27156              		.loc 1 1706 0
 27157 0dfe 0C4B     		ldr	r3, .L149
 27158 0e00 0B4A     		ldr	r2, .L149
 27159 0e02 9268     		ldr	r2, [r2, #8]
 27160 0e04 22F4E002 		bic	r2, r2, #7340032
 27161 0e08 9A60     		str	r2, [r3, #8]
1707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
1709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 27162              		.loc 1 1709 0
 27163 0e0a 094B     		ldr	r3, .L149
 27164 0e0c 084A     		ldr	r2, .L149
 27165 0e0e 9168     		ldr	r1, [r2, #8]
 27166 0e10 7868     		ldr	r0, [r7, #4]
 27167 0e12 3A68     		ldr	r2, [r7, #0]
 27168 0e14 40EA0202 		orr	r2, r0, r2
 27169 0e18 41EA0202 		orr	r2, r1, r2
 27170 0e1c 9A60     		str	r2, [r3, #8]
1710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 27171              		.loc 1 1712 0
 27172 0e1e 044B     		ldr	r3, .L149
 27173 0e20 4FF0FF02 		mov	r2, #255
 27174 0e24 5A62     		str	r2, [r3, #36]
1713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27175              		.loc 1 1713 0
 27176 0e26 07F10C07 		add	r7, r7, #12
 27177 0e2a BD46     		mov	sp, r7
 27178 0e2c 80BC     		pop	{r7}
 27179 0e2e 7047     		bx	lr
 27180              	.L150:
 27181              		.align	2
 27182              	.L149:
 27183 0e30 00280040 		.word	1073752064
 27184              		.cfi_endproc
 27185              	.LFE138:
 27187              		.align	2
 27188              		.global	RTC_CoarseCalibConfig
 27189              		.thumb
 27190              		.thumb_func
 27192              	RTC_CoarseCalibConfig:
 27193              	.LFB139:
1714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                   Digital Calibration configuration functions
1725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *    
1739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
1741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27194              		.loc 1 1750 0
 27195              		.cfi_startproc
 27196              		@ args = 0, pretend = 0, frame = 16
 27197              		@ frame_needed = 1, uses_anonymous_args = 0
 27198 0e34 80B5     		push	{r7, lr}
 27199              	.LCFI84:
 27200              		.cfi_def_cfa_offset 8
 27201 0e36 84B0     		sub	sp, sp, #16
 27202              	.LCFI85:
 27203              		.cfi_def_cfa_offset 24
 27204 0e38 00AF     		add	r7, sp, #0
 27205              		.cfi_offset 14, -4
 27206              		.cfi_offset 7, -8
 27207              	.LCFI86:
 27208              		.cfi_def_cfa_register 7
 27209 0e3a 7860     		str	r0, [r7, #4]
 27210 0e3c 3960     		str	r1, [r7, #0]
1751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 27211              		.loc 1 1751 0
 27212 0e3e 4FF00003 		mov	r3, #0
 27213 0e42 FB73     		strb	r3, [r7, #15]
1752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 27214              		.loc 1 1758 0
 27215 0e44 124B     		ldr	r3, .L154
 27216 0e46 4FF0CA02 		mov	r2, #202
 27217 0e4a 5A62     		str	r2, [r3, #36]
1759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 27218              		.loc 1 1759 0
 27219 0e4c 104B     		ldr	r3, .L154
 27220 0e4e 4FF05302 		mov	r2, #83
 27221 0e52 5A62     		str	r2, [r3, #36]
1760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 27222              		.loc 1 1762 0
 27223 0e54 FFF7FEFF 		bl	RTC_EnterInitMode
 27224 0e58 0346     		mov	r3, r0
 27225 0e5a 002B     		cmp	r3, #0
 27226 0e5c 03D1     		bne	.L152
1763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 27227              		.loc 1 1764 0
 27228 0e5e 4FF00003 		mov	r3, #0
 27229 0e62 FB73     		strb	r3, [r7, #15]
 27230 0e64 0AE0     		b	.L153
 27231              	.L152:
1765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 27232              		.loc 1 1769 0
 27233 0e66 0A4B     		ldr	r3, .L154
 27234 0e68 7968     		ldr	r1, [r7, #4]
 27235 0e6a 3A68     		ldr	r2, [r7, #0]
 27236 0e6c 41EA0202 		orr	r2, r1, r2
 27237 0e70 9A61     		str	r2, [r3, #24]
1770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 27238              		.loc 1 1771 0
 27239 0e72 FFF7FEFF 		bl	RTC_ExitInitMode
1772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 27240              		.loc 1 1773 0
 27241 0e76 4FF00103 		mov	r3, #1
 27242 0e7a FB73     		strb	r3, [r7, #15]
 27243              	.L153:
1774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 27244              		.loc 1 1777 0
 27245 0e7c 044B     		ldr	r3, .L154
 27246 0e7e 4FF0FF02 		mov	r2, #255
 27247 0e82 5A62     		str	r2, [r3, #36]
1778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 27248              		.loc 1 1779 0
 27249 0e84 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27250              		.loc 1 1780 0
 27251 0e86 1846     		mov	r0, r3
 27252 0e88 07F11007 		add	r7, r7, #16
 27253 0e8c BD46     		mov	sp, r7
 27254 0e8e 80BD     		pop	{r7, pc}
 27255              	.L155:
 27256              		.align	2
 27257              	.L154:
 27258 0e90 00280040 		.word	1073752064
 27259              		.cfi_endproc
 27260              	.LFE139:
 27262              		.align	2
 27263              		.global	RTC_CoarseCalibCmd
 27264              		.thumb
 27265              		.thumb_func
 27267              	RTC_CoarseCalibCmd:
 27268              	.LFB140:
1781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27269              		.loc 1 1791 0
 27270              		.cfi_startproc
 27271              		@ args = 0, pretend = 0, frame = 16
 27272              		@ frame_needed = 1, uses_anonymous_args = 0
 27273 0e94 80B5     		push	{r7, lr}
 27274              	.LCFI87:
 27275              		.cfi_def_cfa_offset 8
 27276 0e96 84B0     		sub	sp, sp, #16
 27277              	.LCFI88:
 27278              		.cfi_def_cfa_offset 24
 27279 0e98 00AF     		add	r7, sp, #0
 27280              		.cfi_offset 14, -4
 27281              		.cfi_offset 7, -8
 27282              	.LCFI89:
 27283              		.cfi_def_cfa_register 7
 27284 0e9a 0346     		mov	r3, r0
 27285 0e9c FB71     		strb	r3, [r7, #7]
1792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 27286              		.loc 1 1792 0
 27287 0e9e 4FF00003 		mov	r3, #0
 27288 0ea2 FB73     		strb	r3, [r7, #15]
1793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 27289              		.loc 1 1798 0
 27290 0ea4 174B     		ldr	r3, .L161
 27291 0ea6 4FF0CA02 		mov	r2, #202
 27292 0eaa 5A62     		str	r2, [r3, #36]
1799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 27293              		.loc 1 1799 0
 27294 0eac 154B     		ldr	r3, .L161
 27295 0eae 4FF05302 		mov	r2, #83
 27296 0eb2 5A62     		str	r2, [r3, #36]
1800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 27297              		.loc 1 1802 0
 27298 0eb4 FFF7FEFF 		bl	RTC_EnterInitMode
 27299 0eb8 0346     		mov	r3, r0
 27300 0eba 002B     		cmp	r3, #0
 27301 0ebc 03D1     		bne	.L157
1803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status =  ERROR;
 27302              		.loc 1 1804 0
 27303 0ebe 4FF00003 		mov	r3, #0
 27304 0ec2 FB73     		strb	r3, [r7, #15]
 27305 0ec4 14E0     		b	.L158
 27306              	.L157:
1805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 27307              		.loc 1 1808 0
 27308 0ec6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 27309 0ec8 002B     		cmp	r3, #0
 27310 0eca 06D0     		beq	.L159
1809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
 27311              		.loc 1 1811 0
 27312 0ecc 0D4B     		ldr	r3, .L161
 27313 0ece 0D4A     		ldr	r2, .L161
 27314 0ed0 9268     		ldr	r2, [r2, #8]
 27315 0ed2 42F08002 		orr	r2, r2, #128
 27316 0ed6 9A60     		str	r2, [r3, #8]
 27317 0ed8 05E0     		b	.L160
 27318              	.L159:
1812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     { 
1815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
 27319              		.loc 1 1816 0
 27320 0eda 0A4B     		ldr	r3, .L161
 27321 0edc 094A     		ldr	r2, .L161
 27322 0ede 9268     		ldr	r2, [r2, #8]
 27323 0ee0 22F08002 		bic	r2, r2, #128
 27324 0ee4 9A60     		str	r2, [r3, #8]
 27325              	.L160:
1817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 27326              		.loc 1 1819 0
 27327 0ee6 FFF7FEFF 		bl	RTC_ExitInitMode
1820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 27328              		.loc 1 1821 0
 27329 0eea 4FF00103 		mov	r3, #1
 27330 0eee FB73     		strb	r3, [r7, #15]
 27331              	.L158:
1822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 27332              		.loc 1 1825 0
 27333 0ef0 044B     		ldr	r3, .L161
 27334 0ef2 4FF0FF02 		mov	r2, #255
 27335 0ef6 5A62     		str	r2, [r3, #36]
1826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 27336              		.loc 1 1827 0
 27337 0ef8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27338              		.loc 1 1828 0
 27339 0efa 1846     		mov	r0, r3
 27340 0efc 07F11007 		add	r7, r7, #16
 27341 0f00 BD46     		mov	sp, r7
 27342 0f02 80BD     		pop	{r7, pc}
 27343              	.L162:
 27344              		.align	2
 27345              	.L161:
 27346 0f04 00280040 		.word	1073752064
 27347              		.cfi_endproc
 27348              	.LFE140:
 27350              		.align	2
 27351              		.global	RTC_CalibOutputCmd
 27352              		.thumb
 27353              		.thumb_func
 27355              	RTC_CalibOutputCmd:
 27356              	.LFB141:
1829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27357              		.loc 1 1837 0
 27358              		.cfi_startproc
 27359              		@ args = 0, pretend = 0, frame = 8
 27360              		@ frame_needed = 1, uses_anonymous_args = 0
 27361              		@ link register save eliminated.
 27362 0f08 80B4     		push	{r7}
 27363              	.LCFI90:
 27364              		.cfi_def_cfa_offset 4
 27365 0f0a 83B0     		sub	sp, sp, #12
 27366              	.LCFI91:
 27367              		.cfi_def_cfa_offset 16
 27368 0f0c 00AF     		add	r7, sp, #0
 27369              		.cfi_offset 7, -4
 27370              	.LCFI92:
 27371              		.cfi_def_cfa_register 7
 27372 0f0e 0346     		mov	r3, r0
 27373 0f10 FB71     		strb	r3, [r7, #7]
1838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 27374              		.loc 1 1842 0
 27375 0f12 104B     		ldr	r3, .L166
 27376 0f14 4FF0CA02 		mov	r2, #202
 27377 0f18 5A62     		str	r2, [r3, #36]
1843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 27378              		.loc 1 1843 0
 27379 0f1a 0E4B     		ldr	r3, .L166
 27380 0f1c 4FF05302 		mov	r2, #83
 27381 0f20 5A62     		str	r2, [r3, #36]
1844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 27382              		.loc 1 1845 0
 27383 0f22 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 27384 0f24 002B     		cmp	r3, #0
 27385 0f26 06D0     		beq	.L164
1846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 27386              		.loc 1 1848 0
 27387 0f28 0A4B     		ldr	r3, .L166
 27388 0f2a 0A4A     		ldr	r2, .L166
 27389 0f2c 9268     		ldr	r2, [r2, #8]
 27390 0f2e 42F40002 		orr	r2, r2, #8388608
 27391 0f32 9A60     		str	r2, [r3, #8]
 27392 0f34 05E0     		b	.L165
 27393              	.L164:
1849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
1853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
 27394              		.loc 1 1853 0
 27395 0f36 074B     		ldr	r3, .L166
 27396 0f38 064A     		ldr	r2, .L166
 27397 0f3a 9268     		ldr	r2, [r2, #8]
 27398 0f3c 22F40002 		bic	r2, r2, #8388608
 27399 0f40 9A60     		str	r2, [r3, #8]
 27400              	.L165:
1854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 27401              		.loc 1 1857 0
 27402 0f42 044B     		ldr	r3, .L166
 27403 0f44 4FF0FF02 		mov	r2, #255
 27404 0f48 5A62     		str	r2, [r3, #36]
1858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27405              		.loc 1 1858 0
 27406 0f4a 07F10C07 		add	r7, r7, #12
 27407 0f4e BD46     		mov	sp, r7
 27408 0f50 80BC     		pop	{r7}
 27409 0f52 7047     		bx	lr
 27410              	.L167:
 27411              		.align	2
 27412              	.L166:
 27413 0f54 00280040 		.word	1073752064
 27414              		.cfi_endproc
 27415              	.LFE141:
 27417              		.align	2
 27418              		.global	RTC_CalibOutputConfig
 27419              		.thumb
 27420              		.thumb_func
 27422              	RTC_CalibOutputConfig:
 27423              	.LFB142:
1859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27424              		.loc 1 1869 0
 27425              		.cfi_startproc
 27426              		@ args = 0, pretend = 0, frame = 8
 27427              		@ frame_needed = 1, uses_anonymous_args = 0
 27428              		@ link register save eliminated.
 27429 0f58 80B4     		push	{r7}
 27430              	.LCFI93:
 27431              		.cfi_def_cfa_offset 4
 27432 0f5a 83B0     		sub	sp, sp, #12
 27433              	.LCFI94:
 27434              		.cfi_def_cfa_offset 16
 27435 0f5c 00AF     		add	r7, sp, #0
 27436              		.cfi_offset 7, -4
 27437              	.LCFI95:
 27438              		.cfi_def_cfa_register 7
 27439 0f5e 7860     		str	r0, [r7, #4]
1870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 27440              		.loc 1 1874 0
 27441 0f60 0E4B     		ldr	r3, .L169
 27442 0f62 4FF0CA02 		mov	r2, #202
 27443 0f66 5A62     		str	r2, [r3, #36]
1875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 27444              		.loc 1 1875 0
 27445 0f68 0C4B     		ldr	r3, .L169
 27446 0f6a 4FF05302 		mov	r2, #83
 27447 0f6e 5A62     		str	r2, [r3, #36]
1876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /*clear flags before config*/
1878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 27448              		.loc 1 1878 0
 27449 0f70 0A4B     		ldr	r3, .L169
 27450 0f72 0A4A     		ldr	r2, .L169
 27451 0f74 9268     		ldr	r2, [r2, #8]
 27452 0f76 22F40022 		bic	r2, r2, #524288
 27453 0f7a 9A60     		str	r2, [r3, #8]
1879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
 27454              		.loc 1 1881 0
 27455 0f7c 074B     		ldr	r3, .L169
 27456 0f7e 074A     		ldr	r2, .L169
 27457 0f80 9168     		ldr	r1, [r2, #8]
 27458 0f82 7A68     		ldr	r2, [r7, #4]
 27459 0f84 41EA0202 		orr	r2, r1, r2
 27460 0f88 9A60     		str	r2, [r3, #8]
1882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 27461              		.loc 1 1884 0
 27462 0f8a 044B     		ldr	r3, .L169
 27463 0f8c 4FF0FF02 		mov	r2, #255
 27464 0f90 5A62     		str	r2, [r3, #36]
1885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27465              		.loc 1 1885 0
 27466 0f92 07F10C07 		add	r7, r7, #12
 27467 0f96 BD46     		mov	sp, r7
 27468 0f98 80BC     		pop	{r7}
 27469 0f9a 7047     		bx	lr
 27470              	.L170:
 27471              		.align	2
 27472              	.L169:
 27473 0f9c 00280040 		.word	1073752064
 27474              		.cfi_endproc
 27475              	.LFE142:
 27477              		.align	2
 27478              		.global	RTC_SmoothCalibConfig
 27479              		.thumb
 27480              		.thumb_func
 27482              	RTC_SmoothCalibConfig:
 27483              	.LFB143:
1886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration periode is 32s.
1892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration periode is 16s.
1893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibartion periode is 8s.
1894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK puls every 2**11 pulses.
1897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27484              		.loc 1 1907 0
 27485              		.cfi_startproc
 27486              		@ args = 0, pretend = 0, frame = 24
 27487              		@ frame_needed = 1, uses_anonymous_args = 0
 27488              		@ link register save eliminated.
 27489 0fa0 80B4     		push	{r7}
 27490              	.LCFI96:
 27491              		.cfi_def_cfa_offset 4
 27492 0fa2 87B0     		sub	sp, sp, #28
 27493              	.LCFI97:
 27494              		.cfi_def_cfa_offset 32
 27495 0fa4 00AF     		add	r7, sp, #0
 27496              		.cfi_offset 7, -4
 27497              	.LCFI98:
 27498              		.cfi_def_cfa_register 7
 27499 0fa6 F860     		str	r0, [r7, #12]
 27500 0fa8 B960     		str	r1, [r7, #8]
 27501 0faa 7A60     		str	r2, [r7, #4]
1908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 27502              		.loc 1 1908 0
 27503 0fac 4FF00003 		mov	r3, #0
 27504 0fb0 FB75     		strb	r3, [r7, #23]
1909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
 27505              		.loc 1 1909 0
 27506 0fb2 4FF00003 		mov	r3, #0
 27507 0fb6 3B61     		str	r3, [r7, #16]
1910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 27508              		.loc 1 1917 0
 27509 0fb8 1E4B     		ldr	r3, .L177
 27510 0fba 4FF0CA02 		mov	r2, #202
 27511 0fbe 5A62     		str	r2, [r3, #36]
1918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 27512              		.loc 1 1918 0
 27513 0fc0 1C4B     		ldr	r3, .L177
 27514 0fc2 4FF05302 		mov	r2, #83
 27515 0fc6 5A62     		str	r2, [r3, #36]
1919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 27516              		.loc 1 1921 0
 27517 0fc8 1A4B     		ldr	r3, .L177
 27518 0fca DB68     		ldr	r3, [r3, #12]
 27519 0fcc 03F48033 		and	r3, r3, #65536
 27520 0fd0 002B     		cmp	r3, #0
 27521 0fd2 0ED0     		beq	.L172
1922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 27522              		.loc 1 1924 0
 27523 0fd4 03E0     		b	.L173
 27524              	.L174:
1925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       recalpfcount++;
 27525              		.loc 1 1926 0
 27526 0fd6 3B69     		ldr	r3, [r7, #16]
 27527 0fd8 03F10103 		add	r3, r3, #1
 27528 0fdc 3B61     		str	r3, [r7, #16]
 27529              	.L173:
1924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 27530              		.loc 1 1924 0 discriminator 1
 27531 0fde 154B     		ldr	r3, .L177
 27532 0fe0 DB68     		ldr	r3, [r3, #12]
 27533 0fe2 03F48033 		and	r3, r3, #65536
 27534 0fe6 002B     		cmp	r3, #0
 27535 0fe8 03D0     		beq	.L172
1924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 27536              		.loc 1 1924 0 is_stmt 0 discriminator 2
 27537 0fea 3B69     		ldr	r3, [r7, #16]
 27538 0fec B3F5003F 		cmp	r3, #131072
 27539 0ff0 F1D1     		bne	.L174
 27540              	.L172:
1927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 27541              		.loc 1 1931 0 is_stmt 1
 27542 0ff2 104B     		ldr	r3, .L177
 27543 0ff4 DB68     		ldr	r3, [r3, #12]
 27544 0ff6 03F48033 		and	r3, r3, #65536
 27545 0ffa 002B     		cmp	r3, #0
 27546 0ffc 0BD1     		bne	.L175
1932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
 27547              		.loc 1 1934 0
 27548 0ffe 0D4B     		ldr	r3, .L177
 27549 1000 F968     		ldr	r1, [r7, #12]
 27550 1002 BA68     		ldr	r2, [r7, #8]
 27551 1004 1143     		orrs	r1, r1, r2
 27552 1006 7A68     		ldr	r2, [r7, #4]
 27553 1008 41EA0202 		orr	r2, r1, r2
 27554 100c DA63     		str	r2, [r3, #60]
1935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 27555              		.loc 1 1936 0
 27556 100e 4FF00103 		mov	r3, #1
 27557 1012 FB75     		strb	r3, [r7, #23]
 27558 1014 02E0     		b	.L176
 27559              	.L175:
1937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 27560              		.loc 1 1940 0
 27561 1016 4FF00003 		mov	r3, #0
 27562 101a FB75     		strb	r3, [r7, #23]
 27563              	.L176:
1941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 27564              		.loc 1 1944 0
 27565 101c 054B     		ldr	r3, .L177
 27566 101e 4FF0FF02 		mov	r2, #255
 27567 1022 5A62     		str	r2, [r3, #36]
1945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 27568              		.loc 1 1946 0
 27569 1024 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27570              		.loc 1 1947 0
 27571 1026 1846     		mov	r0, r3
 27572 1028 07F11C07 		add	r7, r7, #28
 27573 102c BD46     		mov	sp, r7
 27574 102e 80BC     		pop	{r7}
 27575 1030 7047     		bx	lr
 27576              	.L178:
 27577 1032 00BF     		.align	2
 27578              	.L177:
 27579 1034 00280040 		.word	1073752064
 27580              		.cfi_endproc
 27581              	.LFE143:
 27583              		.align	2
 27584              		.global	RTC_TimeStampCmd
 27585              		.thumb
 27586              		.thumb_func
 27588              	RTC_TimeStampCmd:
 27589              	.LFB144:
1948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        TimeStamp configuration functions
1960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         activated.
1971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
1974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27590              		.loc 1 1981 0
 27591              		.cfi_startproc
 27592              		@ args = 0, pretend = 0, frame = 16
 27593              		@ frame_needed = 1, uses_anonymous_args = 0
 27594              		@ link register save eliminated.
 27595 1038 80B4     		push	{r7}
 27596              	.LCFI99:
 27597              		.cfi_def_cfa_offset 4
 27598 103a 85B0     		sub	sp, sp, #20
 27599              	.LCFI100:
 27600              		.cfi_def_cfa_offset 24
 27601 103c 00AF     		add	r7, sp, #0
 27602              		.cfi_offset 7, -4
 27603              	.LCFI101:
 27604              		.cfi_def_cfa_register 7
 27605 103e 7860     		str	r0, [r7, #4]
 27606 1040 0B46     		mov	r3, r1
 27607 1042 FB70     		strb	r3, [r7, #3]
1982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 27608              		.loc 1 1982 0
 27609 1044 4FF00003 		mov	r3, #0
 27610 1048 FB60     		str	r3, [r7, #12]
1983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 27611              		.loc 1 1989 0
 27612 104a 154B     		ldr	r3, .L182
 27613 104c 9B68     		ldr	r3, [r3, #8]
 27614 104e 23F40063 		bic	r3, r3, #2048
 27615 1052 23F00803 		bic	r3, r3, #8
 27616 1056 FB60     		str	r3, [r7, #12]
1990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the new configuration */
1992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 27617              		.loc 1 1992 0
 27618 1058 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 27619 105a 002B     		cmp	r3, #0
 27620 105c 07D0     		beq	.L180
1993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 27621              		.loc 1 1994 0
 27622 105e 7A68     		ldr	r2, [r7, #4]
 27623 1060 FB68     		ldr	r3, [r7, #12]
 27624 1062 42EA0303 		orr	r3, r2, r3
 27625 1066 43F40063 		orr	r3, r3, #2048
 27626 106a FB60     		str	r3, [r7, #12]
 27627 106c 04E0     		b	.L181
 27628              	.L180:
1995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 27629              		.loc 1 1998 0
 27630 106e FA68     		ldr	r2, [r7, #12]
 27631 1070 7B68     		ldr	r3, [r7, #4]
 27632 1072 42EA0303 		orr	r3, r2, r3
 27633 1076 FB60     		str	r3, [r7, #12]
 27634              	.L181:
1999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 27635              		.loc 1 2002 0
 27636 1078 094B     		ldr	r3, .L182
 27637 107a 4FF0CA02 		mov	r2, #202
 27638 107e 5A62     		str	r2, [r3, #36]
2003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 27639              		.loc 1 2003 0
 27640 1080 074B     		ldr	r3, .L182
 27641 1082 4FF05302 		mov	r2, #83
 27642 1086 5A62     		str	r2, [r3, #36]
2004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
2006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
 27643              		.loc 1 2006 0
 27644 1088 054B     		ldr	r3, .L182
 27645 108a FA68     		ldr	r2, [r7, #12]
 27646 108c 9A60     		str	r2, [r3, #8]
2007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 27647              		.loc 1 2009 0
 27648 108e 044B     		ldr	r3, .L182
 27649 1090 4FF0FF02 		mov	r2, #255
 27650 1094 5A62     		str	r2, [r3, #36]
2010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27651              		.loc 1 2010 0
 27652 1096 07F11407 		add	r7, r7, #20
 27653 109a BD46     		mov	sp, r7
 27654 109c 80BC     		pop	{r7}
 27655 109e 7047     		bx	lr
 27656              	.L183:
 27657              		.align	2
 27658              	.L182:
 27659 10a0 00280040 		.word	1073752064
 27660              		.cfi_endproc
 27661              	.LFE144:
 27663              		.align	2
 27664              		.global	RTC_GetTimeStamp
 27665              		.thumb
 27666              		.thumb_func
 27668              	RTC_GetTimeStamp:
 27669              	.LFB145:
2011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
2014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
2015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
2017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
2018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
2019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
2020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
2021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
2022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
2026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27670              		.loc 1 2026 0
 27671              		.cfi_startproc
 27672              		@ args = 0, pretend = 0, frame = 24
 27673              		@ frame_needed = 1, uses_anonymous_args = 0
 27674 10a4 80B5     		push	{r7, lr}
 27675              	.LCFI102:
 27676              		.cfi_def_cfa_offset 8
 27677 10a6 86B0     		sub	sp, sp, #24
 27678              	.LCFI103:
 27679              		.cfi_def_cfa_offset 32
 27680 10a8 00AF     		add	r7, sp, #0
 27681              		.cfi_offset 14, -4
 27682              		.cfi_offset 7, -8
 27683              	.LCFI104:
 27684              		.cfi_def_cfa_register 7
 27685 10aa F860     		str	r0, [r7, #12]
 27686 10ac B960     		str	r1, [r7, #8]
 27687 10ae 7A60     		str	r2, [r7, #4]
2027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 27688              		.loc 1 2027 0
 27689 10b0 4FF00003 		mov	r3, #0
 27690 10b4 7B61     		str	r3, [r7, #20]
 27691 10b6 4FF00003 		mov	r3, #0
 27692 10ba 3B61     		str	r3, [r7, #16]
2028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
2031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 27693              		.loc 1 2033 0
 27694 10bc 414B     		ldr	r3, .L186
 27695 10be 1A6B     		ldr	r2, [r3, #48]
 27696 10c0 414B     		ldr	r3, .L186+4
 27697 10c2 02EA0303 		and	r3, r2, r3
 27698 10c6 7B61     		str	r3, [r7, #20]
2034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 27699              		.loc 1 2034 0
 27700 10c8 3E4B     		ldr	r3, .L186
 27701 10ca 5B6B     		ldr	r3, [r3, #52]
 27702 10cc 23F07F43 		bic	r3, r3, #-16777216
 27703 10d0 23F0C003 		bic	r3, r3, #192
 27704 10d4 3B61     		str	r3, [r7, #16]
2035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 27705              		.loc 1 2037 0
 27706 10d6 7B69     		ldr	r3, [r7, #20]
 27707 10d8 03F47C13 		and	r3, r3, #4128768
 27708 10dc 4FEA1343 		lsr	r3, r3, #16
 27709 10e0 DAB2     		uxtb	r2, r3
 27710 10e2 BB68     		ldr	r3, [r7, #8]
 27711 10e4 1A70     		strb	r2, [r3, #0]
2038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 27712              		.loc 1 2038 0
 27713 10e6 7B69     		ldr	r3, [r7, #20]
 27714 10e8 03F4FE43 		and	r3, r3, #32512
 27715 10ec 4FEA1323 		lsr	r3, r3, #8
 27716 10f0 DAB2     		uxtb	r2, r3
 27717 10f2 BB68     		ldr	r3, [r7, #8]
 27718 10f4 5A70     		strb	r2, [r3, #1]
2039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 27719              		.loc 1 2039 0
 27720 10f6 7B69     		ldr	r3, [r7, #20]
 27721 10f8 DBB2     		uxtb	r3, r3
 27722 10fa 03F07F03 		and	r3, r3, #127
 27723 10fe DAB2     		uxtb	r2, r3
 27724 1100 BB68     		ldr	r3, [r7, #8]
 27725 1102 9A70     		strb	r2, [r3, #2]
2040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 27726              		.loc 1 2040 0
 27727 1104 7B69     		ldr	r3, [r7, #20]
 27728 1106 03F48003 		and	r3, r3, #4194304
 27729 110a 4FEA1343 		lsr	r3, r3, #16
 27730 110e DAB2     		uxtb	r2, r3
 27731 1110 BB68     		ldr	r3, [r7, #8]
 27732 1112 DA70     		strb	r2, [r3, #3]
2041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
 27733              		.loc 1 2043 0
 27734 1114 7B68     		ldr	r3, [r7, #4]
 27735 1116 4FF00002 		mov	r2, #0
 27736 111a DA70     		strb	r2, [r3, #3]
2044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 27737              		.loc 1 2044 0
 27738 111c 3B69     		ldr	r3, [r7, #16]
 27739 111e 03F4F853 		and	r3, r3, #7936
 27740 1122 4FEA1323 		lsr	r3, r3, #8
 27741 1126 DAB2     		uxtb	r2, r3
 27742 1128 7B68     		ldr	r3, [r7, #4]
 27743 112a 5A70     		strb	r2, [r3, #1]
2045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 27744              		.loc 1 2045 0
 27745 112c 3B69     		ldr	r3, [r7, #16]
 27746 112e DBB2     		uxtb	r3, r3
 27747 1130 03F03F03 		and	r3, r3, #63
 27748 1134 DAB2     		uxtb	r2, r3
 27749 1136 7B68     		ldr	r3, [r7, #4]
 27750 1138 9A70     		strb	r2, [r3, #2]
2046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 27751              		.loc 1 2046 0
 27752 113a 3B69     		ldr	r3, [r7, #16]
 27753 113c 03F46043 		and	r3, r3, #57344
 27754 1140 4FEA5333 		lsr	r3, r3, #13
 27755 1144 DAB2     		uxtb	r2, r3
 27756 1146 7B68     		ldr	r3, [r7, #4]
 27757 1148 1A70     		strb	r2, [r3, #0]
2047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 27758              		.loc 1 2049 0
 27759 114a FB68     		ldr	r3, [r7, #12]
 27760 114c 002B     		cmp	r3, #0
 27761 114e 35D1     		bne	.L184
2050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 27762              		.loc 1 2052 0
 27763 1150 BB68     		ldr	r3, [r7, #8]
 27764 1152 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 27765 1154 1846     		mov	r0, r3
 27766 1156 00F0F1FA 		bl	RTC_Bcd2ToByte
 27767 115a 0346     		mov	r3, r0
 27768 115c 1A46     		mov	r2, r3
 27769 115e BB68     		ldr	r3, [r7, #8]
 27770 1160 1A70     		strb	r2, [r3, #0]
2053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 27771              		.loc 1 2053 0
 27772 1162 BB68     		ldr	r3, [r7, #8]
 27773 1164 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 27774 1166 1846     		mov	r0, r3
 27775 1168 00F0E8FA 		bl	RTC_Bcd2ToByte
 27776 116c 0346     		mov	r3, r0
 27777 116e 1A46     		mov	r2, r3
 27778 1170 BB68     		ldr	r3, [r7, #8]
 27779 1172 5A70     		strb	r2, [r3, #1]
2054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 27780              		.loc 1 2054 0
 27781 1174 BB68     		ldr	r3, [r7, #8]
 27782 1176 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 27783 1178 1846     		mov	r0, r3
 27784 117a 00F0DFFA 		bl	RTC_Bcd2ToByte
 27785 117e 0346     		mov	r3, r0
 27786 1180 1A46     		mov	r2, r3
 27787 1182 BB68     		ldr	r3, [r7, #8]
 27788 1184 9A70     		strb	r2, [r3, #2]
2055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 27789              		.loc 1 2057 0
 27790 1186 7B68     		ldr	r3, [r7, #4]
 27791 1188 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 27792 118a 1846     		mov	r0, r3
 27793 118c 00F0D6FA 		bl	RTC_Bcd2ToByte
 27794 1190 0346     		mov	r3, r0
 27795 1192 1A46     		mov	r2, r3
 27796 1194 7B68     		ldr	r3, [r7, #4]
 27797 1196 5A70     		strb	r2, [r3, #1]
2058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 27798              		.loc 1 2058 0
 27799 1198 7B68     		ldr	r3, [r7, #4]
 27800 119a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 27801 119c 1846     		mov	r0, r3
 27802 119e 00F0CDFA 		bl	RTC_Bcd2ToByte
 27803 11a2 0346     		mov	r3, r0
 27804 11a4 1A46     		mov	r2, r3
 27805 11a6 7B68     		ldr	r3, [r7, #4]
 27806 11a8 9A70     		strb	r2, [r3, #2]
2059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 27807              		.loc 1 2059 0
 27808 11aa 7B68     		ldr	r3, [r7, #4]
 27809 11ac 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 27810 11ae 1846     		mov	r0, r3
 27811 11b0 00F0C4FA 		bl	RTC_Bcd2ToByte
 27812 11b4 0346     		mov	r3, r0
 27813 11b6 1A46     		mov	r2, r3
 27814 11b8 7B68     		ldr	r3, [r7, #4]
 27815 11ba 1A70     		strb	r2, [r3, #0]
 27816              	.L184:
2060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27817              		.loc 1 2061 0
 27818 11bc 07F11807 		add	r7, r7, #24
 27819 11c0 BD46     		mov	sp, r7
 27820 11c2 80BD     		pop	{r7, pc}
 27821              	.L187:
 27822              		.align	2
 27823              	.L186:
 27824 11c4 00280040 		.word	1073752064
 27825 11c8 7F7F7F00 		.word	8355711
 27826              		.cfi_endproc
 27827              	.LFE145:
 27829              		.align	2
 27830              		.global	RTC_GetTimeStampSubSecond
 27831              		.thumb
 27832              		.thumb_func
 27834              	RTC_GetTimeStampSubSecond:
 27835              	.LFB146:
2062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Subseconds value.
2065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
2066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Subseconds value.
2067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27836              		.loc 1 2069 0
 27837              		.cfi_startproc
 27838              		@ args = 0, pretend = 0, frame = 0
 27839              		@ frame_needed = 1, uses_anonymous_args = 0
 27840              		@ link register save eliminated.
 27841 11cc 80B4     		push	{r7}
 27842              	.LCFI105:
 27843              		.cfi_def_cfa_offset 4
 27844 11ce 00AF     		add	r7, sp, #0
 27845              		.cfi_offset 7, -4
 27846              	.LCFI106:
 27847              		.cfi_def_cfa_register 7
2070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get timestamp subseconds values from the correspondent registers */
2071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
 27848              		.loc 1 2071 0
 27849 11d0 024B     		ldr	r3, .L189
 27850 11d2 9B6B     		ldr	r3, [r3, #56]
2072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27851              		.loc 1 2072 0
 27852 11d4 1846     		mov	r0, r3
 27853 11d6 BD46     		mov	sp, r7
 27854 11d8 80BC     		pop	{r7}
 27855 11da 7047     		bx	lr
 27856              	.L190:
 27857              		.align	2
 27858              	.L189:
 27859 11dc 00280040 		.word	1073752064
 27860              		.cfi_endproc
 27861              	.LFE146:
 27863              		.align	2
 27864              		.global	RTC_TamperTriggerConfig
 27865              		.thumb
 27866              		.thumb_func
 27868              	RTC_TamperTriggerConfig:
 27869              	.LFB147:
2073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Tampers configuration functions
2084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27870              		.loc 1 2104 0
 27871              		.cfi_startproc
 27872              		@ args = 0, pretend = 0, frame = 8
 27873              		@ frame_needed = 1, uses_anonymous_args = 0
 27874              		@ link register save eliminated.
 27875 11e0 80B4     		push	{r7}
 27876              	.LCFI107:
 27877              		.cfi_def_cfa_offset 4
 27878 11e2 83B0     		sub	sp, sp, #12
 27879              	.LCFI108:
 27880              		.cfi_def_cfa_offset 16
 27881 11e4 00AF     		add	r7, sp, #0
 27882              		.cfi_offset 7, -4
 27883              	.LCFI109:
 27884              		.cfi_def_cfa_register 7
 27885 11e6 7860     		str	r0, [r7, #4]
 27886 11e8 3960     		str	r1, [r7, #0]
2105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 27887              		.loc 1 2109 0
 27888 11ea 3B68     		ldr	r3, [r7, #0]
 27889 11ec 002B     		cmp	r3, #0
 27890 11ee 0BD1     		bne	.L192
2110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
2111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 27891              		.loc 1 2112 0
 27892 11f0 0C4B     		ldr	r3, .L194
 27893 11f2 0C4A     		ldr	r2, .L194
 27894 11f4 116C     		ldr	r1, [r2, #64]
 27895 11f6 7A68     		ldr	r2, [r7, #4]
 27896 11f8 4FEA4202 		lsl	r2, r2, #1
 27897 11fc 6FEA0202 		mvn	r2, r2
 27898 1200 01EA0202 		and	r2, r1, r2
 27899 1204 1A64     		str	r2, [r3, #64]
 27900 1206 08E0     		b	.L191
 27901              	.L192:
2113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
2116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 27902              		.loc 1 2117 0
 27903 1208 064B     		ldr	r3, .L194
 27904 120a 064A     		ldr	r2, .L194
 27905 120c 116C     		ldr	r1, [r2, #64]
 27906 120e 7A68     		ldr	r2, [r7, #4]
 27907 1210 4FEA4202 		lsl	r2, r2, #1
 27908 1214 41EA0202 		orr	r2, r1, r2
 27909 1218 1A64     		str	r2, [r3, #64]
 27910              	.L191:
2118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27911              		.loc 1 2119 0
 27912 121a 07F10C07 		add	r7, r7, #12
 27913 121e BD46     		mov	sp, r7
 27914 1220 80BC     		pop	{r7}
 27915 1222 7047     		bx	lr
 27916              	.L195:
 27917              		.align	2
 27918              	.L194:
 27919 1224 00280040 		.word	1073752064
 27920              		.cfi_endproc
 27921              	.LFE147:
 27923              		.align	2
 27924              		.global	RTC_TamperCmd
 27925              		.thumb
 27926              		.thumb_func
 27928              	RTC_TamperCmd:
 27929              	.LFB148:
2120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27930              		.loc 1 2130 0
 27931              		.cfi_startproc
 27932              		@ args = 0, pretend = 0, frame = 8
 27933              		@ frame_needed = 1, uses_anonymous_args = 0
 27934              		@ link register save eliminated.
 27935 1228 80B4     		push	{r7}
 27936              	.LCFI110:
 27937              		.cfi_def_cfa_offset 4
 27938 122a 83B0     		sub	sp, sp, #12
 27939              	.LCFI111:
 27940              		.cfi_def_cfa_offset 16
 27941 122c 00AF     		add	r7, sp, #0
 27942              		.cfi_offset 7, -4
 27943              	.LCFI112:
 27944              		.cfi_def_cfa_register 7
 27945 122e 7860     		str	r0, [r7, #4]
 27946 1230 0B46     		mov	r3, r1
 27947 1232 FB70     		strb	r3, [r7, #3]
2131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 27948              		.loc 1 2135 0
 27949 1234 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 27950 1236 002B     		cmp	r3, #0
 27951 1238 07D0     		beq	.L197
2136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
2138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 27952              		.loc 1 2138 0
 27953 123a 0B4B     		ldr	r3, .L199
 27954 123c 0A4A     		ldr	r2, .L199
 27955 123e 116C     		ldr	r1, [r2, #64]
 27956 1240 7A68     		ldr	r2, [r7, #4]
 27957 1242 41EA0202 		orr	r2, r1, r2
 27958 1246 1A64     		str	r2, [r3, #64]
 27959 1248 08E0     		b	.L196
 27960              	.L197:
2139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 27961              		.loc 1 2143 0
 27962 124a 074B     		ldr	r3, .L199
 27963 124c 064A     		ldr	r2, .L199
 27964 124e 116C     		ldr	r1, [r2, #64]
 27965 1250 7A68     		ldr	r2, [r7, #4]
 27966 1252 6FEA0202 		mvn	r2, r2
 27967 1256 01EA0202 		and	r2, r1, r2
 27968 125a 1A64     		str	r2, [r3, #64]
 27969              	.L196:
2144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27970              		.loc 1 2145 0
 27971 125c 07F10C07 		add	r7, r7, #12
 27972 1260 BD46     		mov	sp, r7
 27973 1262 80BC     		pop	{r7}
 27974 1264 7047     		bx	lr
 27975              	.L200:
 27976 1266 00BF     		.align	2
 27977              	.L199:
 27978 1268 00280040 		.word	1073752064
 27979              		.cfi_endproc
 27980              	.LFE148:
 27982              		.align	2
 27983              		.global	RTC_TamperFilterConfig
 27984              		.thumb
 27985              		.thumb_func
 27987              	RTC_TamperFilterConfig:
 27988              	.LFB149:
2146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level
2156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27989              		.loc 1 2161 0
 27990              		.cfi_startproc
 27991              		@ args = 0, pretend = 0, frame = 8
 27992              		@ frame_needed = 1, uses_anonymous_args = 0
 27993              		@ link register save eliminated.
 27994 126c 80B4     		push	{r7}
 27995              	.LCFI113:
 27996              		.cfi_def_cfa_offset 4
 27997 126e 83B0     		sub	sp, sp, #12
 27998              	.LCFI114:
 27999              		.cfi_def_cfa_offset 16
 28000 1270 00AF     		add	r7, sp, #0
 28001              		.cfi_offset 7, -4
 28002              	.LCFI115:
 28003              		.cfi_def_cfa_register 7
 28004 1272 7860     		str	r0, [r7, #4]
2162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 28005              		.loc 1 2166 0
 28006 1274 084B     		ldr	r3, .L202
 28007 1276 084A     		ldr	r2, .L202
 28008 1278 126C     		ldr	r2, [r2, #64]
 28009 127a 22F4C052 		bic	r2, r2, #6144
 28010 127e 1A64     		str	r2, [r3, #64]
2167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 28011              		.loc 1 2169 0
 28012 1280 054B     		ldr	r3, .L202
 28013 1282 054A     		ldr	r2, .L202
 28014 1284 116C     		ldr	r1, [r2, #64]
 28015 1286 7A68     		ldr	r2, [r7, #4]
 28016 1288 41EA0202 		orr	r2, r1, r2
 28017 128c 1A64     		str	r2, [r3, #64]
2170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28018              		.loc 1 2170 0
 28019 128e 07F10C07 		add	r7, r7, #12
 28020 1292 BD46     		mov	sp, r7
 28021 1294 80BC     		pop	{r7}
 28022 1296 7047     		bx	lr
 28023              	.L203:
 28024              		.align	2
 28025              	.L202:
 28026 1298 00280040 		.word	1073752064
 28027              		.cfi_endproc
 28028              	.LFE149:
 28030              		.align	2
 28031              		.global	RTC_TamperSamplingFreqConfig
 28032              		.thumb
 28033              		.thumb_func
 28035              	RTC_TamperSamplingFreqConfig:
 28036              	.LFB150:
2171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28037              		.loc 1 2195 0
 28038              		.cfi_startproc
 28039              		@ args = 0, pretend = 0, frame = 8
 28040              		@ frame_needed = 1, uses_anonymous_args = 0
 28041              		@ link register save eliminated.
 28042 129c 80B4     		push	{r7}
 28043              	.LCFI116:
 28044              		.cfi_def_cfa_offset 4
 28045 129e 83B0     		sub	sp, sp, #12
 28046              	.LCFI117:
 28047              		.cfi_def_cfa_offset 16
 28048 12a0 00AF     		add	r7, sp, #0
 28049              		.cfi_offset 7, -4
 28050              	.LCFI118:
 28051              		.cfi_def_cfa_register 7
 28052 12a2 7860     		str	r0, [r7, #4]
2196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 28053              		.loc 1 2200 0
 28054 12a4 084B     		ldr	r3, .L205
 28055 12a6 084A     		ldr	r2, .L205
 28056 12a8 126C     		ldr	r2, [r2, #64]
 28057 12aa 22F4E062 		bic	r2, r2, #1792
 28058 12ae 1A64     		str	r2, [r3, #64]
2201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 28059              		.loc 1 2203 0
 28060 12b0 054B     		ldr	r3, .L205
 28061 12b2 054A     		ldr	r2, .L205
 28062 12b4 116C     		ldr	r1, [r2, #64]
 28063 12b6 7A68     		ldr	r2, [r7, #4]
 28064 12b8 41EA0202 		orr	r2, r1, r2
 28065 12bc 1A64     		str	r2, [r3, #64]
2204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28066              		.loc 1 2204 0
 28067 12be 07F10C07 		add	r7, r7, #12
 28068 12c2 BD46     		mov	sp, r7
 28069 12c4 80BC     		pop	{r7}
 28070 12c6 7047     		bx	lr
 28071              	.L206:
 28072              		.align	2
 28073              	.L205:
 28074 12c8 00280040 		.word	1073752064
 28075              		.cfi_endproc
 28076              	.LFE150:
 28078              		.align	2
 28079              		.global	RTC_TamperPinsPrechargeDuration
 28080              		.thumb
 28081              		.thumb_func
 28083              	RTC_TamperPinsPrechargeDuration:
 28084              	.LFB151:
2205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         Precharge Duration.
2210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are pre-charged before sampling durin
2212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are pre-charged before sampling durin
2213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before sampling durin
2214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before sampling durin
2215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28085              		.loc 1 2218 0
 28086              		.cfi_startproc
 28087              		@ args = 0, pretend = 0, frame = 8
 28088              		@ frame_needed = 1, uses_anonymous_args = 0
 28089              		@ link register save eliminated.
 28090 12cc 80B4     		push	{r7}
 28091              	.LCFI119:
 28092              		.cfi_def_cfa_offset 4
 28093 12ce 83B0     		sub	sp, sp, #12
 28094              	.LCFI120:
 28095              		.cfi_def_cfa_offset 16
 28096 12d0 00AF     		add	r7, sp, #0
 28097              		.cfi_offset 7, -4
 28098              	.LCFI121:
 28099              		.cfi_def_cfa_register 7
 28100 12d2 7860     		str	r0, [r7, #4]
2219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 28101              		.loc 1 2223 0
 28102 12d4 084B     		ldr	r3, .L208
 28103 12d6 084A     		ldr	r2, .L208
 28104 12d8 126C     		ldr	r2, [r2, #64]
 28105 12da 22F4C042 		bic	r2, r2, #24576
 28106 12de 1A64     		str	r2, [r3, #64]
2224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 28107              		.loc 1 2226 0
 28108 12e0 054B     		ldr	r3, .L208
 28109 12e2 054A     		ldr	r2, .L208
 28110 12e4 116C     		ldr	r1, [r2, #64]
 28111 12e6 7A68     		ldr	r2, [r7, #4]
 28112 12e8 41EA0202 		orr	r2, r1, r2
 28113 12ec 1A64     		str	r2, [r3, #64]
2227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28114              		.loc 1 2227 0
 28115 12ee 07F10C07 		add	r7, r7, #12
 28116 12f2 BD46     		mov	sp, r7
 28117 12f4 80BC     		pop	{r7}
 28118 12f6 7047     		bx	lr
 28119              	.L209:
 28120              		.align	2
 28121              	.L208:
 28122 12f8 00280040 		.word	1073752064
 28123              		.cfi_endproc
 28124              	.LFE151:
 28126              		.align	2
 28127              		.global	RTC_TimeStampOnTamperDetectionCmd
 28128              		.thumb
 28129              		.thumb_func
 28131              	RTC_TimeStampOnTamperDetectionCmd:
 28132              	.LFB152:
2228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is reset.   
2233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28133              		.loc 1 2238 0
 28134              		.cfi_startproc
 28135              		@ args = 0, pretend = 0, frame = 8
 28136              		@ frame_needed = 1, uses_anonymous_args = 0
 28137              		@ link register save eliminated.
 28138 12fc 80B4     		push	{r7}
 28139              	.LCFI122:
 28140              		.cfi_def_cfa_offset 4
 28141 12fe 83B0     		sub	sp, sp, #12
 28142              	.LCFI123:
 28143              		.cfi_def_cfa_offset 16
 28144 1300 00AF     		add	r7, sp, #0
 28145              		.cfi_offset 7, -4
 28146              	.LCFI124:
 28147              		.cfi_def_cfa_register 7
 28148 1302 0346     		mov	r3, r0
 28149 1304 FB71     		strb	r3, [r7, #7]
2239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 28150              		.loc 1 2242 0
 28151 1306 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 28152 1308 002B     		cmp	r3, #0
 28153 130a 06D0     		beq	.L211
2243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 28154              		.loc 1 2245 0
 28155 130c 084B     		ldr	r3, .L213
 28156 130e 084A     		ldr	r2, .L213
 28157 1310 126C     		ldr	r2, [r2, #64]
 28158 1312 42F08002 		orr	r2, r2, #128
 28159 1316 1A64     		str	r2, [r3, #64]
 28160 1318 05E0     		b	.L210
 28161              	.L211:
2246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 28162              		.loc 1 2250 0
 28163 131a 054B     		ldr	r3, .L213
 28164 131c 044A     		ldr	r2, .L213
 28165 131e 126C     		ldr	r2, [r2, #64]
 28166 1320 22F08002 		bic	r2, r2, #128
 28167 1324 1A64     		str	r2, [r3, #64]
 28168              	.L210:
2251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28169              		.loc 1 2252 0
 28170 1326 07F10C07 		add	r7, r7, #12
 28171 132a BD46     		mov	sp, r7
 28172 132c 80BC     		pop	{r7}
 28173 132e 7047     		bx	lr
 28174              	.L214:
 28175              		.align	2
 28176              	.L213:
 28177 1330 00280040 		.word	1073752064
 28178              		.cfi_endproc
 28179              	.LFE152:
 28181              		.align	2
 28182              		.global	RTC_TamperPullUpCmd
 28183              		.thumb
 28184              		.thumb_func
 28186              	RTC_TamperPullUpCmd:
 28187              	.LFB153:
2253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28188              		.loc 1 2261 0
 28189              		.cfi_startproc
 28190              		@ args = 0, pretend = 0, frame = 8
 28191              		@ frame_needed = 1, uses_anonymous_args = 0
 28192              		@ link register save eliminated.
 28193 1334 80B4     		push	{r7}
 28194              	.LCFI125:
 28195              		.cfi_def_cfa_offset 4
 28196 1336 83B0     		sub	sp, sp, #12
 28197              	.LCFI126:
 28198              		.cfi_def_cfa_offset 16
 28199 1338 00AF     		add	r7, sp, #0
 28200              		.cfi_offset 7, -4
 28201              	.LCFI127:
 28202              		.cfi_def_cfa_register 7
 28203 133a 0346     		mov	r3, r0
 28204 133c FB71     		strb	r3, [r7, #7]
2262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
 28205              		.loc 1 2265 0
 28206 133e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 28207 1340 002B     		cmp	r3, #0
 28208 1342 06D0     		beq	.L216
2266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 28209              		.loc 1 2268 0
 28210 1344 084B     		ldr	r3, .L218
 28211 1346 084A     		ldr	r2, .L218
 28212 1348 126C     		ldr	r2, [r2, #64]
 28213 134a 22F40042 		bic	r2, r2, #32768
 28214 134e 1A64     		str	r2, [r3, #64]
 28215 1350 05E0     		b	.L215
 28216              	.L216:
2269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 28217              		.loc 1 2273 0
 28218 1352 054B     		ldr	r3, .L218
 28219 1354 044A     		ldr	r2, .L218
 28220 1356 126C     		ldr	r2, [r2, #64]
 28221 1358 42F40042 		orr	r2, r2, #32768
 28222 135c 1A64     		str	r2, [r3, #64]
 28223              	.L215:
2274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
2275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28224              		.loc 1 2275 0
 28225 135e 07F10C07 		add	r7, r7, #12
 28226 1362 BD46     		mov	sp, r7
 28227 1364 80BC     		pop	{r7}
 28228 1366 7047     		bx	lr
 28229              	.L219:
 28230              		.align	2
 28231              	.L218:
 28232 1368 00280040 		.word	1073752064
 28233              		.cfi_endproc
 28234              	.LFE153:
 28236              		.align	2
 28237              		.global	RTC_WriteBackupRegister
 28238              		.thumb
 28239              		.thumb_func
 28241              	RTC_WriteBackupRegister:
 28242              	.LFB154:
2276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Backup Data Registers configuration functions 
2287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.
2298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28243              		.loc 1 2302 0
 28244              		.cfi_startproc
 28245              		@ args = 0, pretend = 0, frame = 16
 28246              		@ frame_needed = 1, uses_anonymous_args = 0
 28247              		@ link register save eliminated.
 28248 136c 80B4     		push	{r7}
 28249              	.LCFI128:
 28250              		.cfi_def_cfa_offset 4
 28251 136e 85B0     		sub	sp, sp, #20
 28252              	.LCFI129:
 28253              		.cfi_def_cfa_offset 24
 28254 1370 00AF     		add	r7, sp, #0
 28255              		.cfi_offset 7, -4
 28256              	.LCFI130:
 28257              		.cfi_def_cfa_register 7
 28258 1372 7860     		str	r0, [r7, #4]
 28259 1374 3960     		str	r1, [r7, #0]
2303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 28260              		.loc 1 2303 0
 28261 1376 4FF00003 		mov	r3, #0
 28262 137a FB60     		str	r3, [r7, #12]
2304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 28263              		.loc 1 2308 0
 28264 137c 074B     		ldr	r3, .L221
 28265 137e FB60     		str	r3, [r7, #12]
2309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 28266              		.loc 1 2309 0
 28267 1380 7B68     		ldr	r3, [r7, #4]
 28268 1382 4FEA8302 		lsl	r2, r3, #2
 28269 1386 FB68     		ldr	r3, [r7, #12]
 28270 1388 D318     		adds	r3, r2, r3
 28271 138a FB60     		str	r3, [r7, #12]
2310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Write the specified register */
2312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
 28272              		.loc 1 2312 0
 28273 138c FB68     		ldr	r3, [r7, #12]
 28274 138e 3A68     		ldr	r2, [r7, #0]
 28275 1390 1A60     		str	r2, [r3, #0]
2313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28276              		.loc 1 2313 0
 28277 1392 07F11407 		add	r7, r7, #20
 28278 1396 BD46     		mov	sp, r7
 28279 1398 80BC     		pop	{r7}
 28280 139a 7047     		bx	lr
 28281              	.L222:
 28282              		.align	2
 28283              	.L221:
 28284 139c 50280040 		.word	1073752144
 28285              		.cfi_endproc
 28286              	.LFE154:
 28288              		.align	2
 28289              		.global	RTC_ReadBackupRegister
 28290              		.thumb
 28291              		.thumb_func
 28293              	RTC_ReadBackupRegister:
 28294              	.LFB155:
2314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.                   
2320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28295              		.loc 1 2323 0
 28296              		.cfi_startproc
 28297              		@ args = 0, pretend = 0, frame = 16
 28298              		@ frame_needed = 1, uses_anonymous_args = 0
 28299              		@ link register save eliminated.
 28300 13a0 80B4     		push	{r7}
 28301              	.LCFI131:
 28302              		.cfi_def_cfa_offset 4
 28303 13a2 85B0     		sub	sp, sp, #20
 28304              	.LCFI132:
 28305              		.cfi_def_cfa_offset 24
 28306 13a4 00AF     		add	r7, sp, #0
 28307              		.cfi_offset 7, -4
 28308              	.LCFI133:
 28309              		.cfi_def_cfa_register 7
 28310 13a6 7860     		str	r0, [r7, #4]
2324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 28311              		.loc 1 2324 0
 28312 13a8 4FF00003 		mov	r3, #0
 28313 13ac FB60     		str	r3, [r7, #12]
2325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 28314              		.loc 1 2329 0
 28315 13ae 084B     		ldr	r3, .L224
 28316 13b0 FB60     		str	r3, [r7, #12]
2330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 28317              		.loc 1 2330 0
 28318 13b2 7B68     		ldr	r3, [r7, #4]
 28319 13b4 4FEA8302 		lsl	r2, r3, #2
 28320 13b8 FB68     		ldr	r3, [r7, #12]
 28321 13ba D318     		adds	r3, r2, r3
 28322 13bc FB60     		str	r3, [r7, #12]
2331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read the specified register */
2333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
 28323              		.loc 1 2333 0
 28324 13be FB68     		ldr	r3, [r7, #12]
 28325 13c0 1B68     		ldr	r3, [r3, #0]
2334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28326              		.loc 1 2334 0
 28327 13c2 1846     		mov	r0, r3
 28328 13c4 07F11407 		add	r7, r7, #20
 28329 13c8 BD46     		mov	sp, r7
 28330 13ca 80BC     		pop	{r7}
 28331 13cc 7047     		bx	lr
 28332              	.L225:
 28333 13ce 00BF     		.align	2
 28334              	.L224:
 28335 13d0 50280040 		.word	1073752144
 28336              		.cfi_endproc
 28337              	.LFE155:
 28339              		.align	2
 28340              		.global	RTC_TamperPinSelection
 28341              		.thumb
 28342              		.thumb_func
 28344              	RTC_TamperPinSelection:
 28345              	.LFB156:
2335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
2341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *           configuration functions  
2343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration 
2347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   functions 
2348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
2359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
2360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28346              		.loc 1 2363 0
 28347              		.cfi_startproc
 28348              		@ args = 0, pretend = 0, frame = 8
 28349              		@ frame_needed = 1, uses_anonymous_args = 0
 28350              		@ link register save eliminated.
 28351 13d4 80B4     		push	{r7}
 28352              	.LCFI134:
 28353              		.cfi_def_cfa_offset 4
 28354 13d6 83B0     		sub	sp, sp, #12
 28355              	.LCFI135:
 28356              		.cfi_def_cfa_offset 16
 28357 13d8 00AF     		add	r7, sp, #0
 28358              		.cfi_offset 7, -4
 28359              	.LCFI136:
 28360              		.cfi_def_cfa_register 7
 28361 13da 7860     		str	r0, [r7, #4]
2364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 28362              		.loc 1 2367 0
 28363 13dc 084B     		ldr	r3, .L227
 28364 13de 084A     		ldr	r2, .L227
 28365 13e0 126C     		ldr	r2, [r2, #64]
 28366 13e2 22F48032 		bic	r2, r2, #65536
 28367 13e6 1A64     		str	r2, [r3, #64]
2368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 28368              		.loc 1 2368 0
 28369 13e8 054B     		ldr	r3, .L227
 28370 13ea 054A     		ldr	r2, .L227
 28371 13ec 116C     		ldr	r1, [r2, #64]
 28372 13ee 7A68     		ldr	r2, [r7, #4]
 28373 13f0 41EA0202 		orr	r2, r1, r2
 28374 13f4 1A64     		str	r2, [r3, #64]
2369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28375              		.loc 1 2369 0
 28376 13f6 07F10C07 		add	r7, r7, #12
 28377 13fa BD46     		mov	sp, r7
 28378 13fc 80BC     		pop	{r7}
 28379 13fe 7047     		bx	lr
 28380              	.L228:
 28381              		.align	2
 28382              	.L227:
 28383 1400 00280040 		.word	1073752064
 28384              		.cfi_endproc
 28385              	.LFE156:
 28387              		.align	2
 28388              		.global	RTC_TimeStampPinSelection
 28389              		.thumb
 28390              		.thumb_func
 28392              	RTC_TimeStampPinSelection:
 28393              	.LFB157:
2370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
2374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28394              		.loc 1 2380 0
 28395              		.cfi_startproc
 28396              		@ args = 0, pretend = 0, frame = 8
 28397              		@ frame_needed = 1, uses_anonymous_args = 0
 28398              		@ link register save eliminated.
 28399 1404 80B4     		push	{r7}
 28400              	.LCFI137:
 28401              		.cfi_def_cfa_offset 4
 28402 1406 83B0     		sub	sp, sp, #12
 28403              	.LCFI138:
 28404              		.cfi_def_cfa_offset 16
 28405 1408 00AF     		add	r7, sp, #0
 28406              		.cfi_offset 7, -4
 28407              	.LCFI139:
 28408              		.cfi_def_cfa_register 7
 28409 140a 7860     		str	r0, [r7, #4]
2381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
2383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 28410              		.loc 1 2384 0
 28411 140c 084B     		ldr	r3, .L230
 28412 140e 084A     		ldr	r2, .L230
 28413 1410 126C     		ldr	r2, [r2, #64]
 28414 1412 22F40032 		bic	r2, r2, #131072
 28415 1416 1A64     		str	r2, [r3, #64]
2385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 28416              		.loc 1 2385 0
 28417 1418 054B     		ldr	r3, .L230
 28418 141a 054A     		ldr	r2, .L230
 28419 141c 116C     		ldr	r1, [r2, #64]
 28420 141e 7A68     		ldr	r2, [r7, #4]
 28421 1420 41EA0202 		orr	r2, r1, r2
 28422 1424 1A64     		str	r2, [r3, #64]
2386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28423              		.loc 1 2386 0
 28424 1426 07F10C07 		add	r7, r7, #12
 28425 142a BD46     		mov	sp, r7
 28426 142c 80BC     		pop	{r7}
 28427 142e 7047     		bx	lr
 28428              	.L231:
 28429              		.align	2
 28430              	.L230:
 28431 1430 00280040 		.word	1073752064
 28432              		.cfi_endproc
 28433              	.LFE157:
 28435              		.align	2
 28436              		.global	RTC_OutputTypeConfig
 28437              		.thumb
 28438              		.thumb_func
 28440              	RTC_OutputTypeConfig:
 28441              	.LFB158:
2387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28442              		.loc 1 2399 0
 28443              		.cfi_startproc
 28444              		@ args = 0, pretend = 0, frame = 8
 28445              		@ frame_needed = 1, uses_anonymous_args = 0
 28446              		@ link register save eliminated.
 28447 1434 80B4     		push	{r7}
 28448              	.LCFI140:
 28449              		.cfi_def_cfa_offset 4
 28450 1436 83B0     		sub	sp, sp, #12
 28451              	.LCFI141:
 28452              		.cfi_def_cfa_offset 16
 28453 1438 00AF     		add	r7, sp, #0
 28454              		.cfi_offset 7, -4
 28455              	.LCFI142:
 28456              		.cfi_def_cfa_register 7
 28457 143a 7860     		str	r0, [r7, #4]
2400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 28458              		.loc 1 2403 0
 28459 143c 084B     		ldr	r3, .L233
 28460 143e 084A     		ldr	r2, .L233
 28461 1440 126C     		ldr	r2, [r2, #64]
 28462 1442 22F48022 		bic	r2, r2, #262144
 28463 1446 1A64     		str	r2, [r3, #64]
2404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 28464              		.loc 1 2404 0
 28465 1448 054B     		ldr	r3, .L233
 28466 144a 054A     		ldr	r2, .L233
 28467 144c 116C     		ldr	r1, [r2, #64]
 28468 144e 7A68     		ldr	r2, [r7, #4]
 28469 1450 41EA0202 		orr	r2, r1, r2
 28470 1454 1A64     		str	r2, [r3, #64]
2405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28471              		.loc 1 2405 0
 28472 1456 07F10C07 		add	r7, r7, #12
 28473 145a BD46     		mov	sp, r7
 28474 145c 80BC     		pop	{r7}
 28475 145e 7047     		bx	lr
 28476              	.L234:
 28477              		.align	2
 28478              	.L233:
 28479 1460 00280040 		.word	1073752064
 28480              		.cfi_endproc
 28481              	.LFE158:
 28483              		.align	2
 28484              		.global	RTC_SynchroShiftConfig
 28485              		.thumb
 28486              		.thumb_func
 28488              	RTC_SynchroShiftConfig:
 28489              	.LFB159:
2406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Shift control synchronisation functions
2417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
2428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
2436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28490              		.loc 1 2437 0
 28491              		.cfi_startproc
 28492              		@ args = 0, pretend = 0, frame = 16
 28493              		@ frame_needed = 1, uses_anonymous_args = 0
 28494 1464 80B5     		push	{r7, lr}
 28495              	.LCFI143:
 28496              		.cfi_def_cfa_offset 8
 28497 1466 84B0     		sub	sp, sp, #16
 28498              	.LCFI144:
 28499              		.cfi_def_cfa_offset 24
 28500 1468 00AF     		add	r7, sp, #0
 28501              		.cfi_offset 14, -4
 28502              		.cfi_offset 7, -8
 28503              	.LCFI145:
 28504              		.cfi_def_cfa_register 7
 28505 146a 7860     		str	r0, [r7, #4]
 28506 146c 3960     		str	r1, [r7, #0]
2438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 28507              		.loc 1 2438 0
 28508 146e 4FF00003 		mov	r3, #0
 28509 1472 FB73     		strb	r3, [r7, #15]
2439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
 28510              		.loc 1 2439 0
 28511 1474 4FF00003 		mov	r3, #0
 28512 1478 BB60     		str	r3, [r7, #8]
2440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 28513              		.loc 1 2446 0
 28514 147a 264B     		ldr	r3, .L243
 28515 147c 4FF0CA02 		mov	r2, #202
 28516 1480 5A62     		str	r2, [r3, #36]
2447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 28517              		.loc 1 2447 0
 28518 1482 244B     		ldr	r3, .L243
 28519 1484 4FF05302 		mov	r2, #83
 28520 1488 5A62     		str	r2, [r3, #36]
2448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 28521              		.loc 1 2450 0
 28522 148a 224B     		ldr	r3, .L243
 28523 148c DB68     		ldr	r3, [r3, #12]
 28524 148e 03F00803 		and	r3, r3, #8
 28525 1492 002B     		cmp	r3, #0
 28526 1494 0ED0     		beq	.L236
2451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 28527              		.loc 1 2453 0
 28528 1496 03E0     		b	.L237
 28529              	.L238:
2454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       shpfcount++;
 28530              		.loc 1 2455 0
 28531 1498 BB68     		ldr	r3, [r7, #8]
 28532 149a 03F10103 		add	r3, r3, #1
 28533 149e BB60     		str	r3, [r7, #8]
 28534              	.L237:
2453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 28535              		.loc 1 2453 0 discriminator 1
 28536 14a0 1C4B     		ldr	r3, .L243
 28537 14a2 DB68     		ldr	r3, [r3, #12]
 28538 14a4 03F00803 		and	r3, r3, #8
 28539 14a8 002B     		cmp	r3, #0
 28540 14aa 03D0     		beq	.L236
2453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 28541              		.loc 1 2453 0 is_stmt 0 discriminator 2
 28542 14ac BB68     		ldr	r3, [r7, #8]
 28543 14ae B3F5805F 		cmp	r3, #4096
 28544 14b2 F1D1     		bne	.L238
 28545              	.L236:
2456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 28546              		.loc 1 2460 0 is_stmt 1
 28547 14b4 174B     		ldr	r3, .L243
 28548 14b6 DB68     		ldr	r3, [r3, #12]
 28549 14b8 03F00803 		and	r3, r3, #8
 28550 14bc 002B     		cmp	r3, #0
 28551 14be 1CD1     		bne	.L239
2461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
 28552              		.loc 1 2463 0
 28553 14c0 144B     		ldr	r3, .L243
 28554 14c2 9B68     		ldr	r3, [r3, #8]
 28555 14c4 03F01003 		and	r3, r3, #16
 28556 14c8 002B     		cmp	r3, #0
 28557 14ca 12D1     		bne	.L240
2464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 28558              		.loc 1 2466 0
 28559 14cc 114B     		ldr	r3, .L243
 28560 14ce 3968     		ldr	r1, [r7, #0]
 28561 14d0 7A68     		ldr	r2, [r7, #4]
 28562 14d2 41EA0202 		orr	r2, r1, r2
 28563 14d6 DA62     		str	r2, [r3, #44]
2467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
2468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 28564              		.loc 1 2468 0
 28565 14d8 FFF7FEFF 		bl	RTC_WaitForSynchro
 28566 14dc 0346     		mov	r3, r0
 28567 14de 002B     		cmp	r3, #0
 28568 14e0 03D1     		bne	.L241
2469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 28569              		.loc 1 2470 0
 28570 14e2 4FF00003 		mov	r3, #0
 28571 14e6 FB73     		strb	r3, [r7, #15]
 28572 14e8 0AE0     		b	.L242
 28573              	.L241:
2471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
2473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
 28574              		.loc 1 2474 0
 28575 14ea 4FF00103 		mov	r3, #1
 28576 14ee FB73     		strb	r3, [r7, #15]
 28577 14f0 06E0     		b	.L242
 28578              	.L240:
2475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
2478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 28579              		.loc 1 2479 0
 28580 14f2 4FF00003 		mov	r3, #0
 28581 14f6 FB73     		strb	r3, [r7, #15]
 28582 14f8 02E0     		b	.L242
 28583              	.L239:
2480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 28584              		.loc 1 2484 0
 28585 14fa 4FF00003 		mov	r3, #0
 28586 14fe FB73     		strb	r3, [r7, #15]
 28587              	.L242:
2485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 28588              		.loc 1 2488 0
 28589 1500 044B     		ldr	r3, .L243
 28590 1502 4FF0FF02 		mov	r2, #255
 28591 1506 5A62     		str	r2, [r3, #36]
2489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 28592              		.loc 1 2490 0
 28593 1508 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28594              		.loc 1 2491 0
 28595 150a 1846     		mov	r0, r3
 28596 150c 07F11007 		add	r7, r7, #16
 28597 1510 BD46     		mov	sp, r7
 28598 1512 80BD     		pop	{r7, pc}
 28599              	.L244:
 28600              		.align	2
 28601              	.L243:
 28602 1514 00280040 		.word	1073752064
 28603              		.cfi_endproc
 28604              	.LFE159:
 28606              		.align	2
 28607              		.global	RTC_ITConfig
 28608              		.thumb
 28609              		.thumb_func
 28611              	RTC_ITConfig:
 28612              	.LFB160:
2492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Interrupts and flags management functions
2503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  All RTC interrupts are connected to the EXTI controller.
2505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Alarm interrupt, the following sequence is required:
2507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 17 in interrupt mode and select the rising 
2508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_Alarm IRQ channel in the NVIC using the NVIC_Init()
2510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Wakeup interrupt, the following sequence is required:
2515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 22 in interrupt mode and select the rising 
2516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_WKUP IRQ channel in the NVIC using the NVIC_Init()
2518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate the RTC wakeup timer event using the 
2520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
2521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Tamper interrupt, the following sequence is required:
2523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC tamper event using the 
2528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC TimeStamp interrupt, the following sequence is required:
2531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC time-stamp event using the 
2536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TimeStampCmd() functions.
2537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28613              		.loc 1 2556 0
 28614              		.cfi_startproc
 28615              		@ args = 0, pretend = 0, frame = 8
 28616              		@ frame_needed = 1, uses_anonymous_args = 0
 28617              		@ link register save eliminated.
 28618 1518 80B4     		push	{r7}
 28619              	.LCFI146:
 28620              		.cfi_def_cfa_offset 4
 28621 151a 83B0     		sub	sp, sp, #12
 28622              	.LCFI147:
 28623              		.cfi_def_cfa_offset 16
 28624 151c 00AF     		add	r7, sp, #0
 28625              		.cfi_offset 7, -4
 28626              	.LCFI148:
 28627              		.cfi_def_cfa_register 7
 28628 151e 7860     		str	r0, [r7, #4]
 28629 1520 0B46     		mov	r3, r1
 28630 1522 FB70     		strb	r3, [r7, #3]
2557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 28631              		.loc 1 2562 0
 28632 1524 1E4B     		ldr	r3, .L248
 28633 1526 4FF0CA02 		mov	r2, #202
 28634 152a 5A62     		str	r2, [r3, #36]
2563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 28635              		.loc 1 2563 0
 28636 152c 1C4B     		ldr	r3, .L248
 28637 152e 4FF05302 		mov	r2, #83
 28638 1532 5A62     		str	r2, [r3, #36]
2564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 28639              		.loc 1 2565 0
 28640 1534 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 28641 1536 002B     		cmp	r3, #0
 28642 1538 12D0     		beq	.L246
2566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 28643              		.loc 1 2568 0
 28644 153a 194B     		ldr	r3, .L248
 28645 153c 184A     		ldr	r2, .L248
 28646 153e 9168     		ldr	r1, [r2, #8]
 28647 1540 7A68     		ldr	r2, [r7, #4]
 28648 1542 22F00402 		bic	r2, r2, #4
 28649 1546 41EA0202 		orr	r2, r1, r2
 28650 154a 9A60     		str	r2, [r3, #8]
2569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 28651              		.loc 1 2570 0
 28652 154c 144B     		ldr	r3, .L248
 28653 154e 144A     		ldr	r2, .L248
 28654 1550 116C     		ldr	r1, [r2, #64]
 28655 1552 7A68     		ldr	r2, [r7, #4]
 28656 1554 02F00402 		and	r2, r2, #4
 28657 1558 41EA0202 		orr	r2, r1, r2
 28658 155c 1A64     		str	r2, [r3, #64]
 28659 155e 15E0     		b	.L247
 28660              	.L246:
2571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 28661              		.loc 1 2575 0
 28662 1560 0F4B     		ldr	r3, .L248
 28663 1562 0F4A     		ldr	r2, .L248
 28664 1564 9168     		ldr	r1, [r2, #8]
 28665 1566 7A68     		ldr	r2, [r7, #4]
 28666 1568 22F00402 		bic	r2, r2, #4
 28667 156c 6FEA0202 		mvn	r2, r2
 28668 1570 01EA0202 		and	r2, r1, r2
 28669 1574 9A60     		str	r2, [r3, #8]
2576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 28670              		.loc 1 2577 0
 28671 1576 0A4B     		ldr	r3, .L248
 28672 1578 094A     		ldr	r2, .L248
 28673 157a 116C     		ldr	r1, [r2, #64]
 28674 157c 7A68     		ldr	r2, [r7, #4]
 28675 157e 02F00402 		and	r2, r2, #4
 28676 1582 6FEA0202 		mvn	r2, r2
 28677 1586 01EA0202 		and	r2, r1, r2
 28678 158a 1A64     		str	r2, [r3, #64]
 28679              	.L247:
2578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 28680              		.loc 1 2580 0
 28681 158c 044B     		ldr	r3, .L248
 28682 158e 4FF0FF02 		mov	r2, #255
 28683 1592 5A62     		str	r2, [r3, #36]
2581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28684              		.loc 1 2581 0
 28685 1594 07F10C07 		add	r7, r7, #12
 28686 1598 BD46     		mov	sp, r7
 28687 159a 80BC     		pop	{r7}
 28688 159c 7047     		bx	lr
 28689              	.L249:
 28690 159e 00BF     		.align	2
 28691              	.L248:
 28692 15a0 00280040 		.word	1073752064
 28693              		.cfi_endproc
 28694              	.LFE160:
 28696              		.align	2
 28697              		.global	RTC_GetFlagStatus
 28698              		.thumb
 28699              		.thumb_func
 28701              	RTC_GetFlagStatus:
 28702              	.LFB161:
2582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RECALPF: RECALPF event flag.
2588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_SHPF: Shift operation pending flag.
2598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28703              		.loc 1 2604 0
 28704              		.cfi_startproc
 28705              		@ args = 0, pretend = 0, frame = 16
 28706              		@ frame_needed = 1, uses_anonymous_args = 0
 28707              		@ link register save eliminated.
 28708 15a4 80B4     		push	{r7}
 28709              	.LCFI149:
 28710              		.cfi_def_cfa_offset 4
 28711 15a6 85B0     		sub	sp, sp, #20
 28712              	.LCFI150:
 28713              		.cfi_def_cfa_offset 24
 28714 15a8 00AF     		add	r7, sp, #0
 28715              		.cfi_offset 7, -4
 28716              	.LCFI151:
 28717              		.cfi_def_cfa_register 7
 28718 15aa 7860     		str	r0, [r7, #4]
2605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
 28719              		.loc 1 2605 0
 28720 15ac 4FF00003 		mov	r3, #0
 28721 15b0 FB73     		strb	r3, [r7, #15]
2606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 28722              		.loc 1 2606 0
 28723 15b2 4FF00003 		mov	r3, #0
 28724 15b6 BB60     		str	r3, [r7, #8]
2607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get all the flags */
2612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 28725              		.loc 1 2612 0
 28726 15b8 0C4B     		ldr	r3, .L253
 28727 15ba DA68     		ldr	r2, [r3, #12]
 28728 15bc 0C4B     		ldr	r3, .L253+4
 28729 15be 02EA0303 		and	r3, r2, r3
 28730 15c2 BB60     		str	r3, [r7, #8]
2613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 28731              		.loc 1 2615 0
 28732 15c4 BA68     		ldr	r2, [r7, #8]
 28733 15c6 7B68     		ldr	r3, [r7, #4]
 28734 15c8 02EA0303 		and	r3, r2, r3
 28735 15cc 002B     		cmp	r3, #0
 28736 15ce 03D0     		beq	.L251
2616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 28737              		.loc 1 2617 0
 28738 15d0 4FF00103 		mov	r3, #1
 28739 15d4 FB73     		strb	r3, [r7, #15]
 28740 15d6 02E0     		b	.L252
 28741              	.L251:
2618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 28742              		.loc 1 2621 0
 28743 15d8 4FF00003 		mov	r3, #0
 28744 15dc FB73     		strb	r3, [r7, #15]
 28745              	.L252:
2622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 28746              		.loc 1 2623 0
 28747 15de FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28748              		.loc 1 2624 0
 28749 15e0 1846     		mov	r0, r3
 28750 15e2 07F11407 		add	r7, r7, #20
 28751 15e6 BD46     		mov	sp, r7
 28752 15e8 80BC     		pop	{r7}
 28753 15ea 7047     		bx	lr
 28754              	.L254:
 28755              		.align	2
 28756              	.L253:
 28757 15ec 00280040 		.word	1073752064
 28758 15f0 7F3F0100 		.word	81791
 28759              		.cfi_endproc
 28760              	.LFE161:
 28762              		.align	2
 28763              		.global	RTC_ClearFlag
 28764              		.thumb
 28765              		.thumb_func
 28767              	RTC_ClearFlag:
 28768              	.LFB162:
2625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28769              		.loc 1 2640 0
 28770              		.cfi_startproc
 28771              		@ args = 0, pretend = 0, frame = 8
 28772              		@ frame_needed = 1, uses_anonymous_args = 0
 28773              		@ link register save eliminated.
 28774 15f4 80B4     		push	{r7}
 28775              	.LCFI152:
 28776              		.cfi_def_cfa_offset 4
 28777 15f6 83B0     		sub	sp, sp, #12
 28778              	.LCFI153:
 28779              		.cfi_def_cfa_offset 16
 28780 15f8 00AF     		add	r7, sp, #0
 28781              		.cfi_offset 7, -4
 28782              	.LCFI154:
 28783              		.cfi_def_cfa_register 7
 28784 15fa 7860     		str	r0, [r7, #4]
2641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
 28785              		.loc 1 2645 0
 28786 15fc 0A4A     		ldr	r2, .L256
 28787 15fe 7B68     		ldr	r3, [r7, #4]
 28788 1600 4FEA0343 		lsl	r3, r3, #16
 28789 1604 4FEA1343 		lsr	r3, r3, #16
 28790 1608 43F08003 		orr	r3, r3, #128
 28791 160c 6FEA0301 		mvn	r1, r3
 28792 1610 054B     		ldr	r3, .L256
 28793 1612 DB68     		ldr	r3, [r3, #12]
 28794 1614 03F08003 		and	r3, r3, #128
 28795 1618 41EA0303 		orr	r3, r1, r3
 28796 161c D360     		str	r3, [r2, #12]
2646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28797              		.loc 1 2646 0
 28798 161e 07F10C07 		add	r7, r7, #12
 28799 1622 BD46     		mov	sp, r7
 28800 1624 80BC     		pop	{r7}
 28801 1626 7047     		bx	lr
 28802              	.L257:
 28803              		.align	2
 28804              	.L256:
 28805 1628 00280040 		.word	1073752064
 28806              		.cfi_endproc
 28807              	.LFE162:
 28809              		.align	2
 28810              		.global	RTC_GetITStatus
 28811              		.thumb
 28812              		.thumb_func
 28814              	RTC_GetITStatus:
 28815              	.LFB163:
2647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28816              		.loc 1 2660 0
 28817              		.cfi_startproc
 28818              		@ args = 0, pretend = 0, frame = 24
 28819              		@ frame_needed = 1, uses_anonymous_args = 0
 28820              		@ link register save eliminated.
 28821 162c 80B4     		push	{r7}
 28822              	.LCFI155:
 28823              		.cfi_def_cfa_offset 4
 28824 162e 87B0     		sub	sp, sp, #28
 28825              	.LCFI156:
 28826              		.cfi_def_cfa_offset 32
 28827 1630 00AF     		add	r7, sp, #0
 28828              		.cfi_offset 7, -4
 28829              	.LCFI157:
 28830              		.cfi_def_cfa_register 7
 28831 1632 7860     		str	r0, [r7, #4]
2661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
 28832              		.loc 1 2661 0
 28833 1634 4FF00003 		mov	r3, #0
 28834 1638 FB75     		strb	r3, [r7, #23]
2662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 28835              		.loc 1 2662 0
 28836 163a 4FF00003 		mov	r3, #0
 28837 163e 3B61     		str	r3, [r7, #16]
 28838 1640 4FF00003 		mov	r3, #0
 28839 1644 FB60     		str	r3, [r7, #12]
2663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 28840              		.loc 1 2668 0
 28841 1646 194B     		ldr	r3, .L261
 28842 1648 1B6C     		ldr	r3, [r3, #64]
 28843 164a 03F00403 		and	r3, r3, #4
 28844 164e 3B61     		str	r3, [r7, #16]
2669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 28845              		.loc 1 2671 0
 28846 1650 164B     		ldr	r3, .L261
 28847 1652 9A68     		ldr	r2, [r3, #8]
 28848 1654 7B68     		ldr	r3, [r7, #4]
 28849 1656 1A40     		ands	r2, r2, r3
 28850 1658 7B68     		ldr	r3, [r7, #4]
 28851 165a 4FEAD331 		lsr	r1, r3, #15
 28852 165e 3B69     		ldr	r3, [r7, #16]
 28853 1660 01EA0303 		and	r3, r1, r3
 28854 1664 42EA0303 		orr	r3, r2, r3
 28855 1668 FB60     		str	r3, [r7, #12]
2672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 28856              		.loc 1 2674 0
 28857 166a 104B     		ldr	r3, .L261
 28858 166c DA68     		ldr	r2, [r3, #12]
 28859 166e 7B68     		ldr	r3, [r7, #4]
 28860 1670 4FEA1313 		lsr	r3, r3, #4
 28861 1674 02EA0303 		and	r3, r2, r3
 28862 1678 3B61     		str	r3, [r7, #16]
2675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 28863              		.loc 1 2677 0
 28864 167a FB68     		ldr	r3, [r7, #12]
 28865 167c 002B     		cmp	r3, #0
 28866 167e 0AD0     		beq	.L259
 28867              		.loc 1 2677 0 is_stmt 0 discriminator 1
 28868 1680 3B69     		ldr	r3, [r7, #16]
 28869 1682 4FEA0343 		lsl	r3, r3, #16
 28870 1686 4FEA1343 		lsr	r3, r3, #16
 28871 168a 002B     		cmp	r3, #0
 28872 168c 03D0     		beq	.L259
2678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 28873              		.loc 1 2679 0 is_stmt 1
 28874 168e 4FF00103 		mov	r3, #1
 28875 1692 FB75     		strb	r3, [r7, #23]
 28876 1694 02E0     		b	.L260
 28877              	.L259:
2680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 28878              		.loc 1 2683 0
 28879 1696 4FF00003 		mov	r3, #0
 28880 169a FB75     		strb	r3, [r7, #23]
 28881              	.L260:
2684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 28882              		.loc 1 2685 0
 28883 169c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
2686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28884              		.loc 1 2686 0
 28885 169e 1846     		mov	r0, r3
 28886 16a0 07F11C07 		add	r7, r7, #28
 28887 16a4 BD46     		mov	sp, r7
 28888 16a6 80BC     		pop	{r7}
 28889 16a8 7047     		bx	lr
 28890              	.L262:
 28891 16aa 00BF     		.align	2
 28892              	.L261:
 28893 16ac 00280040 		.word	1073752064
 28894              		.cfi_endproc
 28895              	.LFE163:
 28897              		.align	2
 28898              		.global	RTC_ClearITPendingBit
 28899              		.thumb
 28900              		.thumb_func
 28902              	RTC_ClearITPendingBit:
 28903              	.LFB164:
2687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28904              		.loc 1 2700 0
 28905              		.cfi_startproc
 28906              		@ args = 0, pretend = 0, frame = 16
 28907              		@ frame_needed = 1, uses_anonymous_args = 0
 28908              		@ link register save eliminated.
 28909 16b0 80B4     		push	{r7}
 28910              	.LCFI158:
 28911              		.cfi_def_cfa_offset 4
 28912 16b2 85B0     		sub	sp, sp, #20
 28913              	.LCFI159:
 28914              		.cfi_def_cfa_offset 24
 28915 16b4 00AF     		add	r7, sp, #0
 28916              		.cfi_offset 7, -4
 28917              	.LCFI160:
 28918              		.cfi_def_cfa_register 7
 28919 16b6 7860     		str	r0, [r7, #4]
2701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 28920              		.loc 1 2701 0
 28921 16b8 4FF00003 		mov	r3, #0
 28922 16bc FB60     		str	r3, [r7, #12]
2702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
 28923              		.loc 1 2707 0
 28924 16be 7B68     		ldr	r3, [r7, #4]
 28925 16c0 4FEA1313 		lsr	r3, r3, #4
 28926 16c4 FB60     		str	r3, [r7, #12]
2708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
 28927              		.loc 1 2710 0
 28928 16c6 0B4A     		ldr	r2, .L264
 28929 16c8 FB68     		ldr	r3, [r7, #12]
 28930 16ca 4FEA0343 		lsl	r3, r3, #16
 28931 16ce 4FEA1343 		lsr	r3, r3, #16
 28932 16d2 43F08003 		orr	r3, r3, #128
 28933 16d6 6FEA0301 		mvn	r1, r3
 28934 16da 064B     		ldr	r3, .L264
 28935 16dc DB68     		ldr	r3, [r3, #12]
 28936 16de 03F08003 		and	r3, r3, #128
 28937 16e2 41EA0303 		orr	r3, r1, r3
 28938 16e6 D360     		str	r3, [r2, #12]
2711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28939              		.loc 1 2711 0
 28940 16e8 07F11407 		add	r7, r7, #20
 28941 16ec BD46     		mov	sp, r7
 28942 16ee 80BC     		pop	{r7}
 28943 16f0 7047     		bx	lr
 28944              	.L265:
 28945 16f2 00BF     		.align	2
 28946              	.L264:
 28947 16f4 00280040 		.word	1073752064
 28948              		.cfi_endproc
 28949              	.LFE164:
 28951              		.align	2
 28952              		.thumb
 28953              		.thumb_func
 28955              	RTC_ByteToBcd2:
 28956              	.LFB165:
2712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted byte
2721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28957              		.loc 1 2723 0
 28958              		.cfi_startproc
 28959              		@ args = 0, pretend = 0, frame = 16
 28960              		@ frame_needed = 1, uses_anonymous_args = 0
 28961              		@ link register save eliminated.
 28962 16f8 80B4     		push	{r7}
 28963              	.LCFI161:
 28964              		.cfi_def_cfa_offset 4
 28965 16fa 85B0     		sub	sp, sp, #20
 28966              	.LCFI162:
 28967              		.cfi_def_cfa_offset 24
 28968 16fc 00AF     		add	r7, sp, #0
 28969              		.cfi_offset 7, -4
 28970              	.LCFI163:
 28971              		.cfi_def_cfa_register 7
 28972 16fe 0346     		mov	r3, r0
 28973 1700 FB71     		strb	r3, [r7, #7]
2724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
 28974              		.loc 1 2724 0
 28975 1702 4FF00003 		mov	r3, #0
 28976 1706 FB73     		strb	r3, [r7, #15]
2725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 28977              		.loc 1 2726 0
 28978 1708 07E0     		b	.L267
 28979              	.L268:
2727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 28980              		.loc 1 2728 0
 28981 170a FB7B     		ldrb	r3, [r7, #15]
 28982 170c 03F10103 		add	r3, r3, #1
 28983 1710 FB73     		strb	r3, [r7, #15]
2729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 28984              		.loc 1 2729 0
 28985 1712 FB79     		ldrb	r3, [r7, #7]
 28986 1714 A3F10A03 		sub	r3, r3, #10
 28987 1718 FB71     		strb	r3, [r7, #7]
 28988              	.L267:
2726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 28989              		.loc 1 2726 0 discriminator 1
 28990 171a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 28991 171c 092B     		cmp	r3, #9
 28992 171e F4D8     		bhi	.L268
2730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
 28993              		.loc 1 2732 0
 28994 1720 FB7B     		ldrb	r3, [r7, #15]
 28995 1722 4FEA0313 		lsl	r3, r3, #4
 28996 1726 DAB2     		uxtb	r2, r3
 28997 1728 FB79     		ldrb	r3, [r7, #7]
 28998 172a 42EA0303 		orr	r3, r2, r3
 28999 172e DBB2     		uxtb	r3, r3
2733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 29000              		.loc 1 2733 0
 29001 1730 1846     		mov	r0, r3
 29002 1732 07F11407 		add	r7, r7, #20
 29003 1736 BD46     		mov	sp, r7
 29004 1738 80BC     		pop	{r7}
 29005 173a 7047     		bx	lr
 29006              		.cfi_endproc
 29007              	.LFE165:
 29009              		.align	2
 29010              		.thumb
 29011              		.thumb_func
 29013              	RTC_Bcd2ToByte:
 29014              	.LFB166:
2734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted word
2739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 29015              		.loc 1 2741 0
 29016              		.cfi_startproc
 29017              		@ args = 0, pretend = 0, frame = 16
 29018              		@ frame_needed = 1, uses_anonymous_args = 0
 29019              		@ link register save eliminated.
 29020 173c 80B4     		push	{r7}
 29021              	.LCFI164:
 29022              		.cfi_def_cfa_offset 4
 29023 173e 85B0     		sub	sp, sp, #20
 29024              	.LCFI165:
 29025              		.cfi_def_cfa_offset 24
 29026 1740 00AF     		add	r7, sp, #0
 29027              		.cfi_offset 7, -4
 29028              	.LCFI166:
 29029              		.cfi_def_cfa_register 7
 29030 1742 0346     		mov	r3, r0
 29031 1744 FB71     		strb	r3, [r7, #7]
2742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
 29032              		.loc 1 2742 0
 29033 1746 4FF00003 		mov	r3, #0
 29034 174a FB73     		strb	r3, [r7, #15]
2743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 29035              		.loc 1 2743 0
 29036 174c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 29037 174e 4FEA1313 		lsr	r3, r3, #4
 29038 1752 DBB2     		uxtb	r3, r3
 29039 1754 1A46     		mov	r2, r3
 29040 1756 4FEA8202 		lsl	r2, r2, #2
 29041 175a D318     		adds	r3, r2, r3
 29042 175c 4FEA4303 		lsl	r3, r3, #1
 29043 1760 FB73     		strb	r3, [r7, #15]
2744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 29044              		.loc 1 2744 0
 29045 1762 FB79     		ldrb	r3, [r7, #7]
 29046 1764 03F00F03 		and	r3, r3, #15
 29047 1768 DAB2     		uxtb	r2, r3
 29048 176a FB7B     		ldrb	r3, [r7, #15]
 29049 176c D318     		adds	r3, r2, r3
 29050 176e DBB2     		uxtb	r3, r3
2745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 29051              		.loc 1 2745 0
 29052 1770 1846     		mov	r0, r3
 29053 1772 07F11407 		add	r7, r7, #20
 29054 1776 BD46     		mov	sp, r7
 29055 1778 80BC     		pop	{r7}
 29056 177a 7047     		bx	lr
 29057              		.cfi_endproc
 29058              	.LFE166:
 29060              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rtc.c
     /tmp/ccW0rPAb.s:24595  .text:00000000 $t
     /tmp/ccW0rPAb.s:24600  .text:00000000 RTC_DeInit
     /tmp/ccW0rPAb.s:24969  .text:00000210 RTC_EnterInitMode
     /tmp/ccW0rPAb.s:25099  .text:000002ac RTC_WaitForSynchro
     /tmp/ccW0rPAb.s:24765  .text:00000118 $d
     /tmp/ccW0rPAb.s:24770  .text:00000120 $t
     /tmp/ccW0rPAb.s:24775  .text:00000120 RTC_Init
     /tmp/ccW0rPAb.s:25063  .text:00000290 RTC_ExitInitMode
     /tmp/ccW0rPAb.s:24862  .text:000001a8 $d
     /tmp/ccW0rPAb.s:24866  .text:000001ac $t
     /tmp/ccW0rPAb.s:24871  .text:000001ac RTC_StructInit
     /tmp/ccW0rPAb.s:24914  .text:000001d8 RTC_WriteProtectionCmd
     /tmp/ccW0rPAb.s:24960  .text:0000020c $d
     /tmp/ccW0rPAb.s:24964  .text:00000210 $t
     /tmp/ccW0rPAb.s:25054  .text:0000028c $d
     /tmp/ccW0rPAb.s:25058  .text:00000290 $t
     /tmp/ccW0rPAb.s:25090  .text:000002a8 $d
     /tmp/ccW0rPAb.s:25094  .text:000002ac $t
     /tmp/ccW0rPAb.s:25187  .text:00000330 $d
     /tmp/ccW0rPAb.s:25191  .text:00000334 $t
     /tmp/ccW0rPAb.s:25196  .text:00000334 RTC_RefClockCmd
     /tmp/ccW0rPAb.s:25275  .text:000003a4 $d
     /tmp/ccW0rPAb.s:25279  .text:000003a8 $t
     /tmp/ccW0rPAb.s:25284  .text:000003a8 RTC_BypassShadowCmd
     /tmp/ccW0rPAb.s:25342  .text:000003f4 $d
     /tmp/ccW0rPAb.s:25346  .text:000003f8 $t
     /tmp/ccW0rPAb.s:25351  .text:000003f8 RTC_SetTime
     /tmp/ccW0rPAb.s:29013  .text:0000173c RTC_Bcd2ToByte
     /tmp/ccW0rPAb.s:28955  .text:000016f8 RTC_ByteToBcd2
     /tmp/ccW0rPAb.s:25538  .text:00000530 $d
     /tmp/ccW0rPAb.s:25543  .text:00000538 $t
     /tmp/ccW0rPAb.s:25548  .text:00000538 RTC_TimeStructInit
     /tmp/ccW0rPAb.s:25595  .text:0000056c RTC_GetTime
     /tmp/ccW0rPAb.s:25690  .text:0000060c $d
     /tmp/ccW0rPAb.s:25695  .text:00000614 $t
     /tmp/ccW0rPAb.s:25700  .text:00000614 RTC_GetSubSecond
     /tmp/ccW0rPAb.s:25738  .text:00000638 $d
     /tmp/ccW0rPAb.s:25742  .text:0000063c $t
     /tmp/ccW0rPAb.s:25747  .text:0000063c RTC_SetDate
     /tmp/ccW0rPAb.s:25937  .text:0000077c $d
     /tmp/ccW0rPAb.s:25941  .text:00000780 $t
     /tmp/ccW0rPAb.s:25946  .text:00000780 RTC_DateStructInit
     /tmp/ccW0rPAb.s:25993  .text:000007b4 RTC_GetDate
     /tmp/ccW0rPAb.s:26088  .text:00000854 $d
     /tmp/ccW0rPAb.s:26092  .text:00000858 $t
     /tmp/ccW0rPAb.s:26097  .text:00000858 RTC_SetAlarm
     /tmp/ccW0rPAb.s:26308  .text:000009ac $d
     /tmp/ccW0rPAb.s:26312  .text:000009b0 $t
     /tmp/ccW0rPAb.s:26317  .text:000009b0 RTC_AlarmStructInit
     /tmp/ccW0rPAb.s:26376  .text:000009fc RTC_GetAlarm
     /tmp/ccW0rPAb.s:26507  .text:00000adc $d
     /tmp/ccW0rPAb.s:26511  .text:00000ae0 $t
     /tmp/ccW0rPAb.s:26516  .text:00000ae0 RTC_AlarmCmd
     /tmp/ccW0rPAb.s:26629  .text:00000b98 $d
     /tmp/ccW0rPAb.s:26633  .text:00000b9c $t
     /tmp/ccW0rPAb.s:26638  .text:00000b9c RTC_AlarmSubSecondConfig
     /tmp/ccW0rPAb.s:26701  .text:00000bf0 $d
     /tmp/ccW0rPAb.s:26705  .text:00000bf4 $t
     /tmp/ccW0rPAb.s:26710  .text:00000bf4 RTC_GetAlarmSubSecond
     /tmp/ccW0rPAb.s:26761  .text:00000c38 $d
     /tmp/ccW0rPAb.s:26765  .text:00000c3c $t
     /tmp/ccW0rPAb.s:26770  .text:00000c3c RTC_WakeUpClockConfig
     /tmp/ccW0rPAb.s:26821  .text:00000c80 $d
     /tmp/ccW0rPAb.s:26825  .text:00000c84 $t
     /tmp/ccW0rPAb.s:26830  .text:00000c84 RTC_SetWakeUpCounter
     /tmp/ccW0rPAb.s:26872  .text:00000cb4 $d
     /tmp/ccW0rPAb.s:26876  .text:00000cb8 $t
     /tmp/ccW0rPAb.s:26881  .text:00000cb8 RTC_GetWakeUpCounter
     /tmp/ccW0rPAb.s:26908  .text:00000cd0 $d
     /tmp/ccW0rPAb.s:26912  .text:00000cd4 $t
     /tmp/ccW0rPAb.s:26917  .text:00000cd4 RTC_WakeUpCmd
     /tmp/ccW0rPAb.s:27022  .text:00000d78 $d
     /tmp/ccW0rPAb.s:27026  .text:00000d7c $t
     /tmp/ccW0rPAb.s:27031  .text:00000d7c RTC_DayLightSavingConfig
     /tmp/ccW0rPAb.s:27085  .text:00000dc8 $d
     /tmp/ccW0rPAb.s:27089  .text:00000dcc $t
     /tmp/ccW0rPAb.s:27094  .text:00000dcc RTC_GetStoreOperation
     /tmp/ccW0rPAb.s:27120  .text:00000de0 $d
     /tmp/ccW0rPAb.s:27124  .text:00000de4 $t
     /tmp/ccW0rPAb.s:27129  .text:00000de4 RTC_OutputConfig
     /tmp/ccW0rPAb.s:27183  .text:00000e30 $d
     /tmp/ccW0rPAb.s:27187  .text:00000e34 $t
     /tmp/ccW0rPAb.s:27192  .text:00000e34 RTC_CoarseCalibConfig
     /tmp/ccW0rPAb.s:27258  .text:00000e90 $d
     /tmp/ccW0rPAb.s:27262  .text:00000e94 $t
     /tmp/ccW0rPAb.s:27267  .text:00000e94 RTC_CoarseCalibCmd
     /tmp/ccW0rPAb.s:27346  .text:00000f04 $d
     /tmp/ccW0rPAb.s:27350  .text:00000f08 $t
     /tmp/ccW0rPAb.s:27355  .text:00000f08 RTC_CalibOutputCmd
     /tmp/ccW0rPAb.s:27413  .text:00000f54 $d
     /tmp/ccW0rPAb.s:27417  .text:00000f58 $t
     /tmp/ccW0rPAb.s:27422  .text:00000f58 RTC_CalibOutputConfig
     /tmp/ccW0rPAb.s:27473  .text:00000f9c $d
     /tmp/ccW0rPAb.s:27477  .text:00000fa0 $t
     /tmp/ccW0rPAb.s:27482  .text:00000fa0 RTC_SmoothCalibConfig
     /tmp/ccW0rPAb.s:27579  .text:00001034 $d
     /tmp/ccW0rPAb.s:27583  .text:00001038 $t
     /tmp/ccW0rPAb.s:27588  .text:00001038 RTC_TimeStampCmd
     /tmp/ccW0rPAb.s:27659  .text:000010a0 $d
     /tmp/ccW0rPAb.s:27663  .text:000010a4 $t
     /tmp/ccW0rPAb.s:27668  .text:000010a4 RTC_GetTimeStamp
     /tmp/ccW0rPAb.s:27824  .text:000011c4 $d
     /tmp/ccW0rPAb.s:27829  .text:000011cc $t
     /tmp/ccW0rPAb.s:27834  .text:000011cc RTC_GetTimeStampSubSecond
     /tmp/ccW0rPAb.s:27859  .text:000011dc $d
     /tmp/ccW0rPAb.s:27863  .text:000011e0 $t
     /tmp/ccW0rPAb.s:27868  .text:000011e0 RTC_TamperTriggerConfig
     /tmp/ccW0rPAb.s:27919  .text:00001224 $d
     /tmp/ccW0rPAb.s:27923  .text:00001228 $t
     /tmp/ccW0rPAb.s:27928  .text:00001228 RTC_TamperCmd
     /tmp/ccW0rPAb.s:27978  .text:00001268 $d
     /tmp/ccW0rPAb.s:27982  .text:0000126c $t
     /tmp/ccW0rPAb.s:27987  .text:0000126c RTC_TamperFilterConfig
     /tmp/ccW0rPAb.s:28026  .text:00001298 $d
     /tmp/ccW0rPAb.s:28030  .text:0000129c $t
     /tmp/ccW0rPAb.s:28035  .text:0000129c RTC_TamperSamplingFreqConfig
     /tmp/ccW0rPAb.s:28074  .text:000012c8 $d
     /tmp/ccW0rPAb.s:28078  .text:000012cc $t
     /tmp/ccW0rPAb.s:28083  .text:000012cc RTC_TamperPinsPrechargeDuration
     /tmp/ccW0rPAb.s:28122  .text:000012f8 $d
     /tmp/ccW0rPAb.s:28126  .text:000012fc $t
     /tmp/ccW0rPAb.s:28131  .text:000012fc RTC_TimeStampOnTamperDetectionCmd
     /tmp/ccW0rPAb.s:28177  .text:00001330 $d
     /tmp/ccW0rPAb.s:28181  .text:00001334 $t
     /tmp/ccW0rPAb.s:28186  .text:00001334 RTC_TamperPullUpCmd
     /tmp/ccW0rPAb.s:28232  .text:00001368 $d
     /tmp/ccW0rPAb.s:28236  .text:0000136c $t
     /tmp/ccW0rPAb.s:28241  .text:0000136c RTC_WriteBackupRegister
     /tmp/ccW0rPAb.s:28284  .text:0000139c $d
     /tmp/ccW0rPAb.s:28288  .text:000013a0 $t
     /tmp/ccW0rPAb.s:28293  .text:000013a0 RTC_ReadBackupRegister
     /tmp/ccW0rPAb.s:28335  .text:000013d0 $d
     /tmp/ccW0rPAb.s:28339  .text:000013d4 $t
     /tmp/ccW0rPAb.s:28344  .text:000013d4 RTC_TamperPinSelection
     /tmp/ccW0rPAb.s:28383  .text:00001400 $d
     /tmp/ccW0rPAb.s:28387  .text:00001404 $t
     /tmp/ccW0rPAb.s:28392  .text:00001404 RTC_TimeStampPinSelection
     /tmp/ccW0rPAb.s:28431  .text:00001430 $d
     /tmp/ccW0rPAb.s:28435  .text:00001434 $t
     /tmp/ccW0rPAb.s:28440  .text:00001434 RTC_OutputTypeConfig
     /tmp/ccW0rPAb.s:28479  .text:00001460 $d
     /tmp/ccW0rPAb.s:28483  .text:00001464 $t
     /tmp/ccW0rPAb.s:28488  .text:00001464 RTC_SynchroShiftConfig
     /tmp/ccW0rPAb.s:28602  .text:00001514 $d
     /tmp/ccW0rPAb.s:28606  .text:00001518 $t
     /tmp/ccW0rPAb.s:28611  .text:00001518 RTC_ITConfig
     /tmp/ccW0rPAb.s:28692  .text:000015a0 $d
     /tmp/ccW0rPAb.s:28696  .text:000015a4 $t
     /tmp/ccW0rPAb.s:28701  .text:000015a4 RTC_GetFlagStatus
     /tmp/ccW0rPAb.s:28757  .text:000015ec $d
     /tmp/ccW0rPAb.s:28762  .text:000015f4 $t
     /tmp/ccW0rPAb.s:28767  .text:000015f4 RTC_ClearFlag
     /tmp/ccW0rPAb.s:28805  .text:00001628 $d
     /tmp/ccW0rPAb.s:28809  .text:0000162c $t
     /tmp/ccW0rPAb.s:28814  .text:0000162c RTC_GetITStatus
     /tmp/ccW0rPAb.s:28893  .text:000016ac $d
     /tmp/ccW0rPAb.s:28897  .text:000016b0 $t
     /tmp/ccW0rPAb.s:28902  .text:000016b0 RTC_ClearITPendingBit
     /tmp/ccW0rPAb.s:28947  .text:000016f4 $d
     /tmp/ccW0rPAb.s:28951  .text:000016f8 $t
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
