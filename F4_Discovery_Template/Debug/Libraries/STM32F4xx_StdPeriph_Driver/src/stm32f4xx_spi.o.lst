   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f4xx_spi.c"
  23              	.Ltext0:
  24              		.file 1 "../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c"
 24581              		.align	2
 24582              		.global	SPI_I2S_DeInit
 24583              		.thumb
 24584              		.thumb_func
 24586              	SPI_I2S_DeInit:
 24587              	.LFB110:
   1:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
   2:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************
   3:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @file    stm32f4xx_spi.c
   4:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @version V1.0.2
   6:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @date    05-March-2012
   7:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          functionalities of the Serial peripheral interface (SPI):
   9:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Initialization and Configuration
  10:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Data transfers functions
  11:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Hardware CRC Calculation
  12:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - DMA transfers management
  13:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Interrupts and flags management 
  14:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
  15:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  @verbatim
  16:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          
  17:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                    
  18:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ===================================================================
  19:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                                 How to use this driver
  20:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ===================================================================
  21:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *    
  22:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          1. Enable peripheral clock using the following functions 
  23:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE) for SPI1
  24:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE) for SPI2
  25:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI3.
  26:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  27:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          2. Enable SCK, MOSI, MISO and NSS GPIO clocks using RCC_AHB1PeriphClockCmd()
  28:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             function.
  29:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             In I2S mode, if an external clock source is used then the I2S CKIN pin GPIO
  30:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             clock should also be enabled.
  31:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  32:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          3. Peripherals alternate function: 
  33:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  34:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  35:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Configure the desired pin in alternate function by:
  36:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  37:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  38:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  39:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Call GPIO_Init() function
  40:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              In I2S mode, if an external clock source is used then the I2S CKIN pin
  41:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              should be also configured in Alternate function Push-pull pull-up mode. 
  42:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *        
  43:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          4. Program the Polarity, Phase, First Data, Baud Rate Prescaler, Slave 
  44:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
  45:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             function.
  46:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             In I2S mode, program the Mode, Standard, Data Format, MCLK Output, Audio 
  47:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             frequency and Polarity using I2S_Init() function.
  48:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             For I2S mode, make sure that either:
  49:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - I2S PLL is configured using the functions RCC_I2SCLKConfig(RCC_I2S2CLKSource_PLL
  50:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                RCC_PLLI2SCmd(ENABLE) and RCC_GetFlagStatus(RCC_FLAG_PLLI2SRDY).
  51:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              or 
  52:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - External clock source is configured using the function 
  53:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                RCC_I2SCLKConfig(RCC_I2S2CLKSource_Ext) and after setting correctly the define c
  54:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                I2S_EXTERNAL_CLOCK_VAL in the stm32f4xx_conf.h file. 
  55:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  56:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          5. Enable the NVIC and the corresponding interrupt using the function 
  57:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             SPI_ITConfig() if you need to use interrupt mode. 
  58:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  59:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          6. When using the DMA mode 
  60:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   - Configure the DMA using DMA_Init() function
  61:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   - Active the needed channel Request using SPI_I2S_DMACmd() function
  62:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
  63:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          7. Enable the SPI using the SPI_Cmd() function or enable the I2S using
  64:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             I2S_Cmd().
  65:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
  66:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          8. Enable the DMA using the DMA_Cmd() function when using DMA mode. 
  67:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  68:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          9. Optionally, you can enable/configure the following parameters without
  69:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             re-initialization (i.e there is no need to call again SPI_Init() function):
  70:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - When bidirectional mode (SPI_Direction_1Line_Rx or SPI_Direction_1Line_Tx)
  71:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                is programmed as Data direction parameter using the SPI_Init() function
  72:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                it can be possible to switch between SPI_Direction_Tx or SPI_Direction_Rx
  73:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                using the SPI_BiDirectionalLineConfig() function.
  74:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - When SPI_NSS_Soft is selected as Slave Select Management parameter 
  75:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                using the SPI_Init() function it can be possible to manage the 
  76:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                NSS internal signal using the SPI_NSSInternalSoftwareConfig() function.
  77:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - Reconfigure the data size using the SPI_DataSizeConfig() function  
  78:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - Enable or disable the SS output using the SPI_SSOutputCmd() function  
  79:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          
  80:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          10. To use the CRC Hardware calculation feature refer to the Peripheral 
  81:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              CRC hardware Calculation subsection.
  82:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
  83:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  84:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          It is possible to use SPI in I2S full duplex mode, in this case, each SPI 
  85:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          peripheral is able to manage sending and receiving data simultaneously
  86:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          using two data lines. Each SPI peripheral has an extended block called I2Sxext
  87:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          (ie. I2S2ext for SPI2 and I2S3ext for SPI3).
  88:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          The extension block is not a full SPI IP, it is used only as I2S slave to
  89:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          implement full duplex mode. The extension block uses the same clock sources
  90:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          as its master.          
  91:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          To configure I2S full duplex you have to:
  92:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            
  93:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          1. Configure SPIx in I2S mode (I2S_Init() function) as described above. 
  94:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
  95:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          2. Call the I2S_FullDuplexConfig() function using the same strucutre passed to  
  96:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             I2S_Init() function.
  97:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            
  98:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          3. Call I2S_Cmd() for SPIx then for its extended block.
  99:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          
 100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          4. To configure interrupts or DMA requests and to get/clear flag status, 
 101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             use I2Sxext instance for the extension block.
 102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             
 103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          Functions that can be called with I2Sxext instances are:
 104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Cmd(), I2S_FullDuplexConfig(), SPI_I2S_ReceiveData(), SPI_I2S_SendData(), 
 105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_I2S_DMACmd(), SPI_I2S_ITConfig(), SPI_I2S_GetFlagStatus(), SPI_I2S_ClearFlag(),
 106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_I2S_GetITStatus() and SPI_I2S_ClearITPendingBit().
 107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 
 108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          Example: To use SPI3 in Full duplex mode (SPI3 is Master Tx, I2S3ext is Slave Rx):
 109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            
 110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);   
 111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_StructInit(&I2SInitStruct);
 112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2SInitStruct.Mode = I2S_Mode_MasterTx;     
 113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Init(SPI3, &I2SInitStruct);
 114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_FullDuplexConfig(SPI3ext, &I2SInitStruct)
 115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Cmd(SPI3, ENABLE);
 116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Cmd(SPI3ext, ENABLE);
 117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ...
 118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          while (SPI_I2S_GetFlagStatus(SPI2, SPI_FLAG_TXE) == RESET)
 119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          {}
 120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_I2S_SendData(SPI3, txdata[i]);
 121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ...  
 122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          while (SPI_I2S_GetFlagStatus(I2S3ext, SPI_FLAG_RXNE) == RESET)
 123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          {}
 124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          rxdata[i] = SPI_I2S_ReceiveData(I2S3ext);
 125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ...          
 126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              
 127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *     
 128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note    In I2S mode: if an external clock is used as source clock for the I2S,  
 129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          then the define I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should 
 130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          be enabled and set to the value of the source clock frequency (in Hz).
 131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note    In SPI mode: To use the SPI TI mode, call the function SPI_TIModeCmd() 
 133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          just after calling the function SPI_Init().
 134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  @endverbatim  
 136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                                  
 137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************
 138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @attention
 139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
 141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * You may not use this file except in compliance with the License.
 144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * You may obtain a copy of the License at:
 145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * Unless required by applicable law or agreed to in writing, software 
 149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * See the License for the specific language governing permissions and
 152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * limitations under the License.
 153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************
 155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */ 
 156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Includes ------------------------------------------------------------------*/
 158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #include "stm32f4xx_spi.h"
 159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #include "stm32f4xx_rcc.h"
 160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI 
 166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief SPI driver modules
 167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */ 
 169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private typedef -----------------------------------------------------------*/
 171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private define ------------------------------------------------------------*/
 172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* SPI registers Masks */
 174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define CR1_CLEAR_MASK            ((uint16_t)0x3040)
 175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define I2SCFGR_CLEAR_MASK        ((uint16_t)0xF040)
 176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* RCC PLLs masks */
 178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define PLLCFGR_PPLR_MASK         ((uint32_t)0x70000000)
 179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define PLLCFGR_PPLN_MASK         ((uint32_t)0x00007FC0)
 180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define SPI_CR2_FRF               ((uint16_t)0x0010)
 182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define SPI_SR_TIFRFE             ((uint16_t)0x0100)
 183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private macro -------------------------------------------------------------*/
 185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private variables ---------------------------------------------------------*/
 186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private function prototypes -----------------------------------------------*/
 187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private functions ---------------------------------------------------------*/
 188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Private_Functions
 190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group1 Initialization and Configuration functions
 194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Initialization and Configuration functions 
 195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   Initialization and Configuration functions
 199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to initialize the SPI Direction,
 202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI Mode, SPI Data Size, SPI Polarity, SPI Phase, SPI NSS Management, SPI Baud
 203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Rate Prescaler, SPI First Bit and SPI CRC Polynomial.
 204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   The SPI_Init() function follows the SPI configuration procedures for Master mode
 206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   and Slave mode (details for these procedures are available in reference manual
 207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   (RM0090)).
 208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Deinitialize the SPIx peripheral registers to their default reset values.
 215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode.   
 217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         
 218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The extended I2S blocks (ie. I2S2ext and I2S3ext blocks) are deinitialized
 219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         when the relative I2S peripheral is deinitialized (the extended block's clock
 220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         is managed by the I2S peripheral clock).
 221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             
 222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
 225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 24588              		.loc 1 225 0
 24589              		.cfi_startproc
 24590              		@ args = 0, pretend = 0, frame = 8
 24591              		@ frame_needed = 1, uses_anonymous_args = 0
 24592 0000 80B5     		push	{r7, lr}
 24593              	.LCFI0:
 24594              		.cfi_def_cfa_offset 8
 24595 0002 82B0     		sub	sp, sp, #8
 24596              	.LCFI1:
 24597              		.cfi_def_cfa_offset 16
 24598 0004 00AF     		add	r7, sp, #0
 24599              		.cfi_offset 14, -4
 24600              		.cfi_offset 7, -8
 24601              	.LCFI2:
 24602              		.cfi_def_cfa_register 7
 24603 0006 7860     		str	r0, [r7, #4]
 226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPIx == SPI1)
 24604              		.loc 1 229 0
 24605 0008 7A68     		ldr	r2, [r7, #4]
 24606 000a 1A4B     		ldr	r3, .L5
 24607 000c 9A42     		cmp	r2, r3
 24608 000e 0CD1     		bne	.L2
 230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable SPI1 reset state */
 232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 24609              		.loc 1 232 0
 24610 0010 4FF48050 		mov	r0, #4096
 24611 0014 4FF00101 		mov	r1, #1
 24612 0018 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI1 from reset state */
 234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 24613              		.loc 1 234 0
 24614 001c 4FF48050 		mov	r0, #4096
 24615 0020 4FF00001 		mov	r1, #0
 24616 0024 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 24617 0028 20E0     		b	.L1
 24618              	.L2:
 235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else if (SPIx == SPI2)
 24619              		.loc 1 236 0
 24620 002a 7A68     		ldr	r2, [r7, #4]
 24621 002c 124B     		ldr	r3, .L5+4
 24622 002e 9A42     		cmp	r2, r3
 24623 0030 0CD1     		bne	.L4
 237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable SPI2 reset state */
 239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 24624              		.loc 1 239 0
 24625 0032 4FF48040 		mov	r0, #16384
 24626 0036 4FF00101 		mov	r1, #1
 24627 003a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI2 from reset state */
 241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 24628              		.loc 1 241 0
 24629 003e 4FF48040 		mov	r0, #16384
 24630 0042 4FF00001 		mov	r1, #0
 24631 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 24632 004a 0FE0     		b	.L1
 24633              	.L4:
 242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if (SPIx == SPI3)
 24634              		.loc 1 245 0
 24635 004c 7A68     		ldr	r2, [r7, #4]
 24636 004e 0B4B     		ldr	r3, .L5+8
 24637 0050 9A42     		cmp	r2, r3
 24638 0052 0BD1     		bne	.L1
 246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Enable SPI3 reset state */
 248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 24639              		.loc 1 248 0
 24640 0054 4FF40040 		mov	r0, #32768
 24641 0058 4FF00101 		mov	r1, #1
 24642 005c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Release SPI3 from reset state */
 250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 24643              		.loc 1 250 0
 24644 0060 4FF40040 		mov	r0, #32768
 24645 0064 4FF00001 		mov	r1, #0
 24646 0068 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 24647              	.L1:
 251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 24648              		.loc 1 253 0
 24649 006c 07F10807 		add	r7, r7, #8
 24650 0070 BD46     		mov	sp, r7
 24651 0072 80BD     		pop	{r7, pc}
 24652              	.L6:
 24653              		.align	2
 24654              	.L5:
 24655 0074 00300140 		.word	1073819648
 24656 0078 00380040 		.word	1073756160
 24657 007c 003C0040 		.word	1073757184
 24658              		.cfi_endproc
 24659              	.LFE110:
 24661              		.align	2
 24662              		.global	SPI_Init
 24663              		.thumb
 24664              		.thumb_func
 24666              	SPI_Init:
 24667              	.LFB111:
 254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         parameters in the SPI_InitStruct.
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
 260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral.
 261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
 264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 24668              		.loc 1 264 0
 24669              		.cfi_startproc
 24670              		@ args = 0, pretend = 0, frame = 16
 24671              		@ frame_needed = 1, uses_anonymous_args = 0
 24672              		@ link register save eliminated.
 24673 0080 80B4     		push	{r7}
 24674              	.LCFI3:
 24675              		.cfi_def_cfa_offset 4
 24676 0082 85B0     		sub	sp, sp, #20
 24677              	.LCFI4:
 24678              		.cfi_def_cfa_offset 24
 24679 0084 00AF     		add	r7, sp, #0
 24680              		.cfi_offset 7, -4
 24681              	.LCFI5:
 24682              		.cfi_def_cfa_register 7
 24683 0086 7860     		str	r0, [r7, #4]
 24684 0088 3960     		str	r1, [r7, #0]
 265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0;
 24685              		.loc 1 265 0
 24686 008a 4FF00003 		mov	r3, #0
 24687 008e FB81     		strh	r3, [r7, #14]	@ movhi
 266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* check the parameters */
 268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the SPI parameters */
 271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*---------------------------- SPIx CR1 Configuration ------------------------*/
 282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPIx CR1 value */
 283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = SPIx->CR1;
 24688              		.loc 1 283 0
 24689 0090 7B68     		ldr	r3, [r7, #4]
 24690 0092 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24691 0094 FB81     		strh	r3, [r7, #14]	@ movhi
 284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
 285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg &= CR1_CLEAR_MASK;
 24692              		.loc 1 285 0
 24693 0096 FB89     		ldrh	r3, [r7, #14]	@ movhi
 24694 0098 03F44153 		and	r3, r3, #12352
 24695 009c FB81     		strh	r3, [r7, #14]	@ movhi
 286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
 287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      master/salve mode, CPOL and CPHA */
 288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
 289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
 290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set LSBFirst bit according to SPI_FirstBit value */
 291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set BR bits according to SPI_BaudRatePrescaler value */
 292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set CPOL bit according to SPI_CPOL value */
 293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set CPHA bit according to SPI_CPHA value */
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 24696              		.loc 1 294 0
 24697 009e 3B68     		ldr	r3, [r7, #0]
 24698 00a0 1A88     		ldrh	r2, [r3, #0]
 24699 00a2 3B68     		ldr	r3, [r7, #0]
 24700 00a4 5B88     		ldrh	r3, [r3, #2]
 24701 00a6 42EA0303 		orr	r3, r2, r3
 24702 00aa 9AB2     		uxth	r2, r3
 295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 24703              		.loc 1 295 0
 24704 00ac 3B68     		ldr	r3, [r7, #0]
 24705 00ae 9B88     		ldrh	r3, [r3, #4]
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 24706              		.loc 1 294 0
 24707 00b0 42EA0303 		orr	r3, r2, r3
 24708 00b4 9AB2     		uxth	r2, r3
 24709              		.loc 1 295 0
 24710 00b6 3B68     		ldr	r3, [r7, #0]
 24711 00b8 DB88     		ldrh	r3, [r3, #6]
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 24712              		.loc 1 294 0
 24713 00ba 42EA0303 		orr	r3, r2, r3
 24714 00be 9AB2     		uxth	r2, r3
 296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 24715              		.loc 1 296 0
 24716 00c0 3B68     		ldr	r3, [r7, #0]
 24717 00c2 1B89     		ldrh	r3, [r3, #8]
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 24718              		.loc 1 294 0
 24719 00c4 42EA0303 		orr	r3, r2, r3
 24720 00c8 9AB2     		uxth	r2, r3
 24721              		.loc 1 296 0
 24722 00ca 3B68     		ldr	r3, [r7, #0]
 24723 00cc 5B89     		ldrh	r3, [r3, #10]
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 24724              		.loc 1 294 0
 24725 00ce 42EA0303 		orr	r3, r2, r3
 24726 00d2 9AB2     		uxth	r2, r3
 297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 24727              		.loc 1 297 0
 24728 00d4 3B68     		ldr	r3, [r7, #0]
 24729 00d6 9B89     		ldrh	r3, [r3, #12]
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 24730              		.loc 1 294 0
 24731 00d8 42EA0303 		orr	r3, r2, r3
 24732 00dc 9AB2     		uxth	r2, r3
 24733              		.loc 1 297 0
 24734 00de 3B68     		ldr	r3, [r7, #0]
 24735 00e0 DB89     		ldrh	r3, [r3, #14]
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 24736              		.loc 1 294 0
 24737 00e2 42EA0303 		orr	r3, r2, r3
 24738 00e6 9AB2     		uxth	r2, r3
 24739 00e8 FB89     		ldrh	r3, [r7, #14]	@ movhi
 24740 00ea 42EA0303 		orr	r3, r2, r3
 24741 00ee FB81     		strh	r3, [r7, #14]	@ movhi
 298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx CR1 */
 299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 = tmpreg;
 24742              		.loc 1 299 0
 24743 00f0 7B68     		ldr	r3, [r7, #4]
 24744 00f2 FA89     		ldrh	r2, [r7, #14]	@ movhi
 24745 00f4 1A80     		strh	r2, [r3, #0]	@ movhi
 300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
 302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 24746              		.loc 1 302 0
 24747 00f6 7B68     		ldr	r3, [r7, #4]
 24748 00f8 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 24749 00fa 9BB2     		uxth	r3, r3
 24750 00fc 23F40063 		bic	r3, r3, #2048
 24751 0100 9AB2     		uxth	r2, r3
 24752 0102 7B68     		ldr	r3, [r7, #4]
 24753 0104 9A83     		strh	r2, [r3, #28]	@ movhi
 303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
 304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx CRCPOLY */
 305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 24754              		.loc 1 305 0
 24755 0106 3B68     		ldr	r3, [r7, #0]
 24756 0108 1A8A     		ldrh	r2, [r3, #16]
 24757 010a 7B68     		ldr	r3, [r7, #4]
 24758 010c 1A82     		strh	r2, [r3, #16]	@ movhi
 306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 24759              		.loc 1 306 0
 24760 010e 07F11407 		add	r7, r7, #20
 24761 0112 BD46     		mov	sp, r7
 24762 0114 80BC     		pop	{r7}
 24763 0116 7047     		bx	lr
 24764              		.cfi_endproc
 24765              	.LFE111:
 24767              		.align	2
 24768              		.global	I2S_Init
 24769              		.thumb
 24770              		.thumb_func
 24772              	I2S_Init:
 24773              	.LFB112:
 307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         parameters in the I2S_InitStruct.
 311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be  2 or 3 to select the SPI peripheral (configured in I2S mode).
 312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral
 314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         configured in I2S mode.
 315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
 316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The function calculates the optimal prescaler needed to obtain the most 
 317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         accurate audio frequency (depending on the I2S clock source, the PLL values 
 318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         and the product configuration). But in case the prescaler value is greater 
 319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         than 511, the default value (0x02) will be configured instead.    
 320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   if an external clock is used as source clock for the I2S, then the define
 322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should be enabled and set
 323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         to the value of the the source clock frequency (in Hz).
 324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
 325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
 328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 24774              		.loc 1 328 0
 24775              		.cfi_startproc
 24776              		@ args = 0, pretend = 0, frame = 40
 24777              		@ frame_needed = 1, uses_anonymous_args = 0
 24778              		@ link register save eliminated.
 24779 0118 80B4     		push	{r7}
 24780              	.LCFI6:
 24781              		.cfi_def_cfa_offset 4
 24782 011a 8BB0     		sub	sp, sp, #44
 24783              	.LCFI7:
 24784              		.cfi_def_cfa_offset 48
 24785 011c 00AF     		add	r7, sp, #0
 24786              		.cfi_offset 7, -4
 24787              	.LCFI8:
 24788              		.cfi_def_cfa_register 7
 24789 011e 7860     		str	r0, [r7, #4]
 24790 0120 3960     		str	r1, [r7, #0]
 329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 24791              		.loc 1 329 0
 24792 0122 4FF00003 		mov	r3, #0
 24793 0126 7B83     		strh	r3, [r7, #26]	@ movhi
 24794 0128 4FF00203 		mov	r3, #2
 24795 012c FB84     		strh	r3, [r7, #38]	@ movhi
 24796 012e 4FF00003 		mov	r3, #0
 24797 0132 BB84     		strh	r3, [r7, #36]	@ movhi
 24798 0134 4FF00103 		mov	r3, #1
 24799 0138 7B84     		strh	r3, [r7, #34]	@ movhi
 330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint32_t tmp = 0, i2sclk = 0;
 24800              		.loc 1 330 0
 24801 013a 4FF00003 		mov	r3, #0
 24802 013e FB61     		str	r3, [r7, #28]
 24803 0140 4FF00003 		mov	r3, #0
 24804 0144 7B61     		str	r3, [r7, #20]
 331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #ifndef I2S_EXTERNAL_CLOCK_VAL
 332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint32_t pllm = 0, plln = 0, pllr = 0;
 24805              		.loc 1 332 0
 24806 0146 4FF00003 		mov	r3, #0
 24807 014a 3B61     		str	r3, [r7, #16]
 24808 014c 4FF00003 		mov	r3, #0
 24809 0150 FB60     		str	r3, [r7, #12]
 24810 0152 4FF00003 		mov	r3, #0
 24811 0156 BB60     		str	r3, [r7, #8]
 333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #endif /* I2S_EXTERNAL_CLOCK_VAL */
 334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH(SPIx));
 337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
 341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
 342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 24812              		.loc 1 346 0
 24813 0158 7B68     		ldr	r3, [r7, #4]
 24814 015a 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 24815 015c 9BB2     		uxth	r3, r3
 24816 015e 23F47A63 		bic	r3, r3, #4000
 24817 0162 23F01F03 		bic	r3, r3, #31
 24818 0166 9AB2     		uxth	r2, r3
 24819 0168 7B68     		ldr	r3, [r7, #4]
 24820 016a 9A83     		strh	r2, [r3, #28]	@ movhi
 347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SPR = 0x0002;
 24821              		.loc 1 347 0
 24822 016c 7B68     		ldr	r3, [r7, #4]
 24823 016e 4FF00202 		mov	r2, #2
 24824 0172 1A84     		strh	r2, [r3, #32]	@ movhi
 348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = SPIx->I2SCFGR;
 24825              		.loc 1 350 0
 24826 0174 7B68     		ldr	r3, [r7, #4]
 24827 0176 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 24828 0178 7B83     		strh	r3, [r7, #26]	@ movhi
 351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 24829              		.loc 1 353 0
 24830 017a 3B68     		ldr	r3, [r7, #0]
 24831 017c 9B68     		ldr	r3, [r3, #8]
 24832 017e 022B     		cmp	r3, #2
 24833 0180 06D1     		bne	.L9
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)0;
 24834              		.loc 1 355 0
 24835 0182 4FF00003 		mov	r3, #0
 24836 0186 BB84     		strh	r3, [r7, #36]	@ movhi
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)2;   
 24837              		.loc 1 356 0
 24838 0188 4FF00203 		mov	r3, #2
 24839 018c FB84     		strh	r3, [r7, #38]	@ movhi
 24840 018e 83E0     		b	.L10
 24841              	.L9:
 357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* If the requested audio frequency is not the default, compute the prescaler */
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Check the frame length (For the Prescaler computing) *******************/
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 24842              		.loc 1 362 0
 24843 0190 3B68     		ldr	r3, [r7, #0]
 24844 0192 9B88     		ldrh	r3, [r3, #4]
 24845 0194 002B     		cmp	r3, #0
 24846 0196 03D1     		bne	.L11
 363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Packet length is 16 bits */
 365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       packetlength = 1;
 24847              		.loc 1 365 0
 24848 0198 4FF00103 		mov	r3, #1
 24849 019c 7B84     		strh	r3, [r7, #34]	@ movhi
 24850 019e 02E0     		b	.L12
 24851              	.L11:
 366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     else
 368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Packet length is 32 bits */
 370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       packetlength = 2;
 24852              		.loc 1 370 0
 24853 01a0 4FF00203 		mov	r3, #2
 24854 01a4 7B84     		strh	r3, [r7, #34]	@ movhi
 24855              	.L12:
 371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get I2S source Clock frequency  ****************************************/
 374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       
 375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* If an external I2S clock has to be used, this define should be set  
 376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        in the project configuration or in the stm32f4xx_conf.h file */
 377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #ifdef I2S_EXTERNAL_CLOCK_VAL     
 378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set external clock as I2S clock source */
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) == 0)
 380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC->CFGR |= (uint32_t)RCC_CFGR_I2SSRC;
 382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the I2S clock to the external clock  value */
 385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sclk = I2S_EXTERNAL_CLOCK_VAL;
 386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #else /* There is no define for External I2S clock source */
 388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set PLLI2S as I2S clock source */
 389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 24856              		.loc 1 389 0
 24857 01a6 584B     		ldr	r3, .L18
 24858 01a8 9B68     		ldr	r3, [r3, #8]
 24859 01aa 03F40003 		and	r3, r3, #8388608
 24860 01ae 002B     		cmp	r3, #0
 24861 01b0 05D0     		beq	.L13
 390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 24862              		.loc 1 391 0
 24863 01b2 554B     		ldr	r3, .L18
 24864 01b4 544A     		ldr	r2, .L18
 24865 01b6 9268     		ldr	r2, [r2, #8]
 24866 01b8 22F40002 		bic	r2, r2, #8388608
 24867 01bc 9A60     		str	r2, [r3, #8]
 24868              	.L13:
 392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }    
 393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLI2SN value */
 395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 24869              		.loc 1 395 0
 24870 01be 524B     		ldr	r3, .L18
 24871 01c0 D3F88420 		ldr	r2, [r3, #132]
 24872 01c4 47F6C073 		movw	r3, #32704
 24873 01c8 02EA0303 		and	r3, r2, r3
 24874 01cc 4FEA9313 		lsr	r3, r3, #6
 24875 01d0 4FEAC353 		lsl	r3, r3, #23
 24876 01d4 4FEAD353 		lsr	r3, r3, #23
 24877 01d8 FB60     		str	r3, [r7, #12]
 396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SN >> 6));
 397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLI2SR value */
 399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 24878              		.loc 1 399 0
 24879 01da 4B4B     		ldr	r3, .L18
 24880 01dc D3F88430 		ldr	r3, [r3, #132]
 24881 01e0 03F0E043 		and	r3, r3, #1879048192
 24882 01e4 4FEA1373 		lsr	r3, r3, #28
 24883 01e8 03F00703 		and	r3, r3, #7
 24884 01ec BB60     		str	r3, [r7, #8]
 400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SR >> 28));
 401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLM value */
 403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 24885              		.loc 1 403 0
 24886 01ee 464B     		ldr	r3, .L18
 24887 01f0 5B68     		ldr	r3, [r3, #4]
 24888 01f2 03F03F03 		and	r3, r3, #63
 24889 01f6 3B61     		str	r3, [r7, #16]
 404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the I2S source clock value */
 406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 24890              		.loc 1 406 0
 24891 01f8 444A     		ldr	r2, .L18+4
 24892 01fa 3B69     		ldr	r3, [r7, #16]
 24893 01fc B2FBF3F3 		udiv	r3, r2, r3
 24894 0200 FA68     		ldr	r2, [r7, #12]
 24895 0202 02FB03F2 		mul	r2, r2, r3
 24896 0206 BB68     		ldr	r3, [r7, #8]
 24897 0208 B2FBF3F3 		udiv	r3, r2, r3
 24898 020c 7B61     		str	r3, [r7, #20]
 407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #endif /* I2S_EXTERNAL_CLOCK_VAL */
 408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Compute the Real divider depending on the MCLK output state, with a floating point */
 410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 24899              		.loc 1 410 0
 24900 020e 3B68     		ldr	r3, [r7, #0]
 24901 0210 DB88     		ldrh	r3, [r3, #6]
 24902 0212 B3F5007F 		cmp	r3, #512
 24903 0216 13D1     		bne	.L14
 411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* MCLK output is enabled */
 413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 24904              		.loc 1 413 0
 24905 0218 7B69     		ldr	r3, [r7, #20]
 24906 021a 4FEA1322 		lsr	r2, r3, #8
 24907 021e 1346     		mov	r3, r2
 24908 0220 4FEA8303 		lsl	r3, r3, #2
 24909 0224 9B18     		adds	r3, r3, r2
 24910 0226 4FEA4303 		lsl	r3, r3, #1
 24911 022a 1A46     		mov	r2, r3
 24912 022c 3B68     		ldr	r3, [r7, #0]
 24913 022e 9B68     		ldr	r3, [r3, #8]
 24914 0230 B2FBF3F3 		udiv	r3, r2, r3
 24915 0234 9BB2     		uxth	r3, r3
 24916 0236 03F10503 		add	r3, r3, #5
 24917 023a 9BB2     		uxth	r3, r3
 24918 023c FB61     		str	r3, [r7, #28]
 24919 023e 15E0     		b	.L15
 24920              	.L14:
 414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     else
 416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* MCLK output is disabled */
 418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 
 24921              		.loc 1 418 0
 24922 0240 7B8C     		ldrh	r3, [r7, #34]
 24923 0242 4FEA4313 		lsl	r3, r3, #5
 24924 0246 7A69     		ldr	r2, [r7, #20]
 24925 0248 B2FBF3F2 		udiv	r2, r2, r3
 24926 024c 1346     		mov	r3, r2
 24927 024e 4FEA8303 		lsl	r3, r3, #2
 24928 0252 9B18     		adds	r3, r3, r2
 24929 0254 4FEA4303 		lsl	r3, r3, #1
 24930 0258 1A46     		mov	r2, r3
 24931 025a 3B68     		ldr	r3, [r7, #0]
 24932 025c 9B68     		ldr	r3, [r3, #8]
 24933 025e B2FBF3F3 		udiv	r3, r2, r3
 24934 0262 9BB2     		uxth	r3, r3
 24935 0264 03F10503 		add	r3, r3, #5
 24936 0268 9BB2     		uxth	r3, r3
 24937 026a FB61     		str	r3, [r7, #28]
 24938              	.L15:
 419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Remove the flatting point */
 422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     tmp = tmp / 10;  
 24939              		.loc 1 422 0
 24940 026c FA69     		ldr	r2, [r7, #28]
 24941 026e 284B     		ldr	r3, .L18+8
 24942 0270 A3FB0213 		umull	r1, r3, r3, r2
 24943 0274 4FEAD303 		lsr	r3, r3, #3
 24944 0278 FB61     		str	r3, [r7, #28]
 423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       
 424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Check the parity of the divider */
 425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 24945              		.loc 1 425 0
 24946 027a FB69     		ldr	r3, [r7, #28]
 24947 027c 9BB2     		uxth	r3, r3
 24948 027e 03F00103 		and	r3, r3, #1
 24949 0282 BB84     		strh	r3, [r7, #36]	@ movhi
 426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    
 427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Compute the i2sdiv prescaler */
 428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 24950              		.loc 1 428 0
 24951 0284 BB8C     		ldrh	r3, [r7, #36]
 24952 0286 FA69     		ldr	r2, [r7, #28]
 24953 0288 D31A     		subs	r3, r2, r3
 24954 028a 4FEA5303 		lsr	r3, r3, #1
 24955 028e FB84     		strh	r3, [r7, #38]	@ movhi
 429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    
 430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
 431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t) (i2sodd << 8);
 24956              		.loc 1 431 0
 24957 0290 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 24958 0292 4FEA0323 		lsl	r3, r3, #8
 24959 0296 BB84     		strh	r3, [r7, #36]	@ movhi
 24960              	.L10:
 432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Test if the divider is 1 or 0 or greater than 0xFF */
 435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 24961              		.loc 1 435 0
 24962 0298 FB8C     		ldrh	r3, [r7, #38]
 24963 029a 012B     		cmp	r3, #1
 24964 029c 02D9     		bls	.L16
 24965              		.loc 1 435 0 is_stmt 0 discriminator 1
 24966 029e FB8C     		ldrh	r3, [r7, #38]
 24967 02a0 FF2B     		cmp	r3, #255
 24968 02a2 05D9     		bls	.L17
 24969              	.L16:
 436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the default values */
 438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = 2;
 24970              		.loc 1 438 0 is_stmt 1
 24971 02a4 4FF00203 		mov	r3, #2
 24972 02a8 FB84     		strh	r3, [r7, #38]	@ movhi
 439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = 0;
 24973              		.loc 1 439 0
 24974 02aa 4FF00003 		mov	r3, #0
 24975 02ae BB84     		strh	r3, [r7, #36]	@ movhi
 24976              	.L17:
 440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SPR register the computed value */
 443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCL
 24977              		.loc 1 443 0
 24978 02b0 3B68     		ldr	r3, [r7, #0]
 24979 02b2 DA88     		ldrh	r2, [r3, #6]
 24980 02b4 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 24981 02b6 42EA0303 		orr	r3, r2, r3
 24982 02ba 9AB2     		uxth	r2, r3
 24983 02bc FB8C     		ldrh	r3, [r7, #38]	@ movhi
 24984 02be 42EA0303 		orr	r3, r2, r3
 24985 02c2 9AB2     		uxth	r2, r3
 24986 02c4 7B68     		ldr	r3, [r7, #4]
 24987 02c6 1A84     		strh	r2, [r3, #32]	@ movhi
 444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 24988              		.loc 1 446 0
 24989 02c8 3B68     		ldr	r3, [r7, #0]
 24990 02ca 1A88     		ldrh	r2, [r3, #0]
 447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 24991              		.loc 1 447 0
 24992 02cc 3B68     		ldr	r3, [r7, #0]
 24993 02ce 5988     		ldrh	r1, [r3, #2]
 24994 02d0 3B68     		ldr	r3, [r7, #0]
 24995 02d2 9888     		ldrh	r0, [r3, #4]
 448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 24996              		.loc 1 448 0
 24997 02d4 3B68     		ldr	r3, [r7, #0]
 24998 02d6 9B89     		ldrh	r3, [r3, #12]
 447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 24999              		.loc 1 447 0
 25000 02d8 40EA0303 		orr	r3, r0, r3
 25001 02dc 9BB2     		uxth	r3, r3
 25002 02de 41EA0303 		orr	r3, r1, r3
 25003 02e2 9BB2     		uxth	r3, r3
 446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 25004              		.loc 1 446 0
 25005 02e4 42EA0303 		orr	r3, r2, r3
 25006 02e8 9AB2     		uxth	r2, r3
 25007 02ea 7B8B     		ldrh	r3, [r7, #26]	@ movhi
 25008 02ec 42EA0303 		orr	r3, r2, r3
 25009 02f0 9BB2     		uxth	r3, r3
 25010 02f2 43F40063 		orr	r3, r3, #2048
 25011 02f6 7B83     		strh	r3, [r7, #26]	@ movhi
 449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
 451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR = tmpreg;
 25012              		.loc 1 451 0
 25013 02f8 7B68     		ldr	r3, [r7, #4]
 25014 02fa 7A8B     		ldrh	r2, [r7, #26]	@ movhi
 25015 02fc 9A83     		strh	r2, [r3, #28]	@ movhi
 452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25016              		.loc 1 452 0
 25017 02fe 07F12C07 		add	r7, r7, #44
 25018 0302 BD46     		mov	sp, r7
 25019 0304 80BC     		pop	{r7}
 25020 0306 7047     		bx	lr
 25021              	.L19:
 25022              		.align	2
 25023              	.L18:
 25024 0308 00380240 		.word	1073887232
 25025 030c 00127A00 		.word	8000000
 25026 0310 CDCCCCCC 		.word	-858993459
 25027              		.cfi_endproc
 25028              	.LFE112:
 25030              		.align	2
 25031              		.global	SPI_StructInit
 25032              		.thumb
 25033              		.thumb_func
 25035              	SPI_StructInit:
 25036              	.LFB113:
 453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Fills each SPI_InitStruct member with its default value.
 456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
 457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
 460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25037              		.loc 1 460 0
 25038              		.cfi_startproc
 25039              		@ args = 0, pretend = 0, frame = 8
 25040              		@ frame_needed = 1, uses_anonymous_args = 0
 25041              		@ link register save eliminated.
 25042 0314 80B4     		push	{r7}
 25043              	.LCFI9:
 25044              		.cfi_def_cfa_offset 4
 25045 0316 83B0     		sub	sp, sp, #12
 25046              	.LCFI10:
 25047              		.cfi_def_cfa_offset 16
 25048 0318 00AF     		add	r7, sp, #0
 25049              		.cfi_offset 7, -4
 25050              	.LCFI11:
 25051              		.cfi_def_cfa_register 7
 25052 031a 7860     		str	r0, [r7, #4]
 461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*--------------- Reset SPI init structure parameters values -----------------*/
 462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_Direction member */
 463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 25053              		.loc 1 463 0
 25054 031c 7B68     		ldr	r3, [r7, #4]
 25055 031e 4FF00002 		mov	r2, #0
 25056 0322 1A80     		strh	r2, [r3, #0]	@ movhi
 464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* initialize the SPI_Mode member */
 465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 25057              		.loc 1 465 0
 25058 0324 7B68     		ldr	r3, [r7, #4]
 25059 0326 4FF00002 		mov	r2, #0
 25060 032a 5A80     		strh	r2, [r3, #2]	@ movhi
 466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* initialize the SPI_DataSize member */
 467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 25061              		.loc 1 467 0
 25062 032c 7B68     		ldr	r3, [r7, #4]
 25063 032e 4FF00002 		mov	r2, #0
 25064 0332 9A80     		strh	r2, [r3, #4]	@ movhi
 468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPOL member */
 469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 25065              		.loc 1 469 0
 25066 0334 7B68     		ldr	r3, [r7, #4]
 25067 0336 4FF00002 		mov	r2, #0
 25068 033a DA80     		strh	r2, [r3, #6]	@ movhi
 470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPHA member */
 471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 25069              		.loc 1 471 0
 25070 033c 7B68     		ldr	r3, [r7, #4]
 25071 033e 4FF00002 		mov	r2, #0
 25072 0342 1A81     		strh	r2, [r3, #8]	@ movhi
 472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_NSS member */
 473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 25073              		.loc 1 473 0
 25074 0344 7B68     		ldr	r3, [r7, #4]
 25075 0346 4FF00002 		mov	r2, #0
 25076 034a 5A81     		strh	r2, [r3, #10]	@ movhi
 474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_BaudRatePrescaler member */
 475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 25077              		.loc 1 475 0
 25078 034c 7B68     		ldr	r3, [r7, #4]
 25079 034e 4FF00002 		mov	r2, #0
 25080 0352 9A81     		strh	r2, [r3, #12]	@ movhi
 476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_FirstBit member */
 477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 25081              		.loc 1 477 0
 25082 0354 7B68     		ldr	r3, [r7, #4]
 25083 0356 4FF00002 		mov	r2, #0
 25084 035a DA81     		strh	r2, [r3, #14]	@ movhi
 478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CRCPolynomial member */
 479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CRCPolynomial = 7;
 25085              		.loc 1 479 0
 25086 035c 7B68     		ldr	r3, [r7, #4]
 25087 035e 4FF00702 		mov	r2, #7
 25088 0362 1A82     		strh	r2, [r3, #16]	@ movhi
 480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25089              		.loc 1 480 0
 25090 0364 07F10C07 		add	r7, r7, #12
 25091 0368 BD46     		mov	sp, r7
 25092 036a 80BC     		pop	{r7}
 25093 036c 7047     		bx	lr
 25094              		.cfi_endproc
 25095              	.LFE113:
 25097 036e 00BF     		.align	2
 25098              		.global	I2S_StructInit
 25099              		.thumb
 25100              		.thumb_func
 25102              	I2S_StructInit:
 25103              	.LFB114:
 481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Fills each I2S_InitStruct member with its default value.
 484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
 485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
 488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25104              		.loc 1 488 0
 25105              		.cfi_startproc
 25106              		@ args = 0, pretend = 0, frame = 8
 25107              		@ frame_needed = 1, uses_anonymous_args = 0
 25108              		@ link register save eliminated.
 25109 0370 80B4     		push	{r7}
 25110              	.LCFI12:
 25111              		.cfi_def_cfa_offset 4
 25112 0372 83B0     		sub	sp, sp, #12
 25113              	.LCFI13:
 25114              		.cfi_def_cfa_offset 16
 25115 0374 00AF     		add	r7, sp, #0
 25116              		.cfi_offset 7, -4
 25117              	.LCFI14:
 25118              		.cfi_def_cfa_register 7
 25119 0376 7860     		str	r0, [r7, #4]
 489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*--------------- Reset I2S init structure parameters values -----------------*/
 490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_Mode member */
 491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 25120              		.loc 1 491 0
 25121 0378 7B68     		ldr	r3, [r7, #4]
 25122 037a 4FF00002 		mov	r2, #0
 25123 037e 1A80     		strh	r2, [r3, #0]	@ movhi
 492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_Standard member */
 494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 25124              		.loc 1 494 0
 25125 0380 7B68     		ldr	r3, [r7, #4]
 25126 0382 4FF00002 		mov	r2, #0
 25127 0386 5A80     		strh	r2, [r3, #2]	@ movhi
 495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_DataFormat member */
 497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 25128              		.loc 1 497 0
 25129 0388 7B68     		ldr	r3, [r7, #4]
 25130 038a 4FF00002 		mov	r2, #0
 25131 038e 9A80     		strh	r2, [r3, #4]	@ movhi
 498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_MCLKOutput member */
 500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 25132              		.loc 1 500 0
 25133 0390 7B68     		ldr	r3, [r7, #4]
 25134 0392 4FF00002 		mov	r2, #0
 25135 0396 DA80     		strh	r2, [r3, #6]	@ movhi
 501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_AudioFreq member */
 503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 25136              		.loc 1 503 0
 25137 0398 7B68     		ldr	r3, [r7, #4]
 25138 039a 4FF00202 		mov	r2, #2
 25139 039e 9A60     		str	r2, [r3, #8]
 504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_CPOL member */
 506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 25140              		.loc 1 506 0
 25141 03a0 7B68     		ldr	r3, [r7, #4]
 25142 03a2 4FF00002 		mov	r2, #0
 25143 03a6 9A81     		strh	r2, [r3, #12]	@ movhi
 507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25144              		.loc 1 507 0
 25145 03a8 07F10C07 		add	r7, r7, #12
 25146 03ac BD46     		mov	sp, r7
 25147 03ae 80BC     		pop	{r7}
 25148 03b0 7047     		bx	lr
 25149              		.cfi_endproc
 25150              	.LFE114:
 25152 03b2 00BF     		.align	2
 25153              		.global	SPI_Cmd
 25154              		.thumb
 25155              		.thumb_func
 25157              	SPI_Cmd:
 25158              	.LFB115:
 508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral.
 511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25159              		.loc 1 517 0
 25160              		.cfi_startproc
 25161              		@ args = 0, pretend = 0, frame = 8
 25162              		@ frame_needed = 1, uses_anonymous_args = 0
 25163              		@ link register save eliminated.
 25164 03b4 80B4     		push	{r7}
 25165              	.LCFI15:
 25166              		.cfi_def_cfa_offset 4
 25167 03b6 83B0     		sub	sp, sp, #12
 25168              	.LCFI16:
 25169              		.cfi_def_cfa_offset 16
 25170 03b8 00AF     		add	r7, sp, #0
 25171              		.cfi_offset 7, -4
 25172              	.LCFI17:
 25173              		.cfi_def_cfa_register 7
 25174 03ba 7860     		str	r0, [r7, #4]
 25175 03bc 0B46     		mov	r3, r1
 25176 03be FB70     		strb	r3, [r7, #3]
 518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 25177              		.loc 1 521 0
 25178 03c0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25179 03c2 002B     		cmp	r3, #0
 25180 03c4 08D0     		beq	.L23
 522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral */
 524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_SPE;
 25181              		.loc 1 524 0
 25182 03c6 7B68     		ldr	r3, [r7, #4]
 25183 03c8 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25184 03ca 9BB2     		uxth	r3, r3
 25185 03cc 43F04003 		orr	r3, r3, #64
 25186 03d0 9AB2     		uxth	r2, r3
 25187 03d2 7B68     		ldr	r3, [r7, #4]
 25188 03d4 1A80     		strh	r2, [r3, #0]	@ movhi
 25189 03d6 07E0     		b	.L22
 25190              	.L23:
 525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral */
 529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 25191              		.loc 1 529 0
 25192 03d8 7B68     		ldr	r3, [r7, #4]
 25193 03da 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25194 03dc 9BB2     		uxth	r3, r3
 25195 03de 23F04003 		bic	r3, r3, #64
 25196 03e2 9AB2     		uxth	r2, r3
 25197 03e4 7B68     		ldr	r3, [r7, #4]
 25198 03e6 1A80     		strh	r2, [r3, #0]	@ movhi
 25199              	.L22:
 530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25200              		.loc 1 531 0
 25201 03e8 07F10C07 		add	r7, r7, #12
 25202 03ec BD46     		mov	sp, r7
 25203 03ee 80BC     		pop	{r7}
 25204 03f0 7047     		bx	lr
 25205              		.cfi_endproc
 25206              	.LFE115:
 25208 03f2 00BF     		.align	2
 25209              		.global	I2S_Cmd
 25210              		.thumb
 25211              		.thumb_func
 25213              	I2S_Cmd:
 25214              	.LFB116:
 532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral (in I2S mode).
 535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 2 or 3 to select the SPI peripheral (or I2Sxext 
 536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         for full duplex mode).
 537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         This parameter can be: ENABLE or DISABLE.
 539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25215              		.loc 1 542 0
 25216              		.cfi_startproc
 25217              		@ args = 0, pretend = 0, frame = 8
 25218              		@ frame_needed = 1, uses_anonymous_args = 0
 25219              		@ link register save eliminated.
 25220 03f4 80B4     		push	{r7}
 25221              	.LCFI18:
 25222              		.cfi_def_cfa_offset 4
 25223 03f6 83B0     		sub	sp, sp, #12
 25224              	.LCFI19:
 25225              		.cfi_def_cfa_offset 16
 25226 03f8 00AF     		add	r7, sp, #0
 25227              		.cfi_offset 7, -4
 25228              	.LCFI20:
 25229              		.cfi_def_cfa_register 7
 25230 03fa 7860     		str	r0, [r7, #4]
 25231 03fc 0B46     		mov	r3, r1
 25232 03fe FB70     		strb	r3, [r7, #3]
 543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
 545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 25233              		.loc 1 547 0
 25234 0400 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25235 0402 002B     		cmp	r3, #0
 25236 0404 08D0     		beq	.L26
 548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral (in I2S mode) */
 550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 25237              		.loc 1 550 0
 25238 0406 7B68     		ldr	r3, [r7, #4]
 25239 0408 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 25240 040a 9BB2     		uxth	r3, r3
 25241 040c 43F48063 		orr	r3, r3, #1024
 25242 0410 9AB2     		uxth	r2, r3
 25243 0412 7B68     		ldr	r3, [r7, #4]
 25244 0414 9A83     		strh	r2, [r3, #28]	@ movhi
 25245 0416 07E0     		b	.L25
 25246              	.L26:
 551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral in I2S mode */
 555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 25247              		.loc 1 555 0
 25248 0418 7B68     		ldr	r3, [r7, #4]
 25249 041a 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 25250 041c 9BB2     		uxth	r3, r3
 25251 041e 23F48063 		bic	r3, r3, #1024
 25252 0422 9AB2     		uxth	r2, r3
 25253 0424 7B68     		ldr	r3, [r7, #4]
 25254 0426 9A83     		strh	r2, [r3, #28]	@ movhi
 25255              	.L25:
 556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25256              		.loc 1 557 0
 25257 0428 07F10C07 		add	r7, r7, #12
 25258 042c BD46     		mov	sp, r7
 25259 042e 80BC     		pop	{r7}
 25260 0430 7047     		bx	lr
 25261              		.cfi_endproc
 25262              	.LFE116:
 25264 0432 00BF     		.align	2
 25265              		.global	SPI_DataSizeConfig
 25266              		.thumb
 25267              		.thumb_func
 25269              	SPI_DataSizeConfig:
 25270              	.LFB117:
 558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures the data size for the selected SPI.
 561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_DataSize: specifies the SPI data size.
 563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_16b: Set data frame format to 16bit
 565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_8b: Set data frame format to 8bit
 566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
 569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25271              		.loc 1 569 0
 25272              		.cfi_startproc
 25273              		@ args = 0, pretend = 0, frame = 8
 25274              		@ frame_needed = 1, uses_anonymous_args = 0
 25275              		@ link register save eliminated.
 25276 0434 80B4     		push	{r7}
 25277              	.LCFI21:
 25278              		.cfi_def_cfa_offset 4
 25279 0436 83B0     		sub	sp, sp, #12
 25280              	.LCFI22:
 25281              		.cfi_def_cfa_offset 16
 25282 0438 00AF     		add	r7, sp, #0
 25283              		.cfi_offset 7, -4
 25284              	.LCFI23:
 25285              		.cfi_def_cfa_register 7
 25286 043a 7860     		str	r0, [r7, #4]
 25287 043c 0B46     		mov	r3, r1
 25288 043e 7B80     		strh	r3, [r7, #2]	@ movhi
 570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_DataSize));
 573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear DFF bit */
 574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 25289              		.loc 1 574 0
 25290 0440 7B68     		ldr	r3, [r7, #4]
 25291 0442 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25292 0444 9BB2     		uxth	r3, r3
 25293 0446 23F40063 		bic	r3, r3, #2048
 25294 044a 9AB2     		uxth	r2, r3
 25295 044c 7B68     		ldr	r3, [r7, #4]
 25296 044e 1A80     		strh	r2, [r3, #0]	@ movhi
 575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set new DFF bit value */
 576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_DataSize;
 25297              		.loc 1 576 0
 25298 0450 7B68     		ldr	r3, [r7, #4]
 25299 0452 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25300 0454 9AB2     		uxth	r2, r3
 25301 0456 7B88     		ldrh	r3, [r7, #2]	@ movhi
 25302 0458 42EA0303 		orr	r3, r2, r3
 25303 045c 9AB2     		uxth	r2, r3
 25304 045e 7B68     		ldr	r3, [r7, #4]
 25305 0460 1A80     		strh	r2, [r3, #0]	@ movhi
 577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25306              		.loc 1 577 0
 25307 0462 07F10C07 		add	r7, r7, #12
 25308 0466 BD46     		mov	sp, r7
 25309 0468 80BC     		pop	{r7}
 25310 046a 7047     		bx	lr
 25311              		.cfi_endproc
 25312              	.LFE117:
 25314              		.align	2
 25315              		.global	SPI_BiDirectionalLineConfig
 25316              		.thumb
 25317              		.thumb_func
 25319              	SPI_BiDirectionalLineConfig:
 25320              	.LFB118:
 578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Selects the data transfer direction in bidirectional mode for the specified SPI.
 581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_Direction: specifies the data transfer direction in bidirectional mode. 
 583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Tx: Selects Tx transmission direction
 585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Rx: Selects Rx receive direction
 586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
 589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25321              		.loc 1 589 0
 25322              		.cfi_startproc
 25323              		@ args = 0, pretend = 0, frame = 8
 25324              		@ frame_needed = 1, uses_anonymous_args = 0
 25325              		@ link register save eliminated.
 25326 046c 80B4     		push	{r7}
 25327              	.LCFI24:
 25328              		.cfi_def_cfa_offset 4
 25329 046e 83B0     		sub	sp, sp, #12
 25330              	.LCFI25:
 25331              		.cfi_def_cfa_offset 16
 25332 0470 00AF     		add	r7, sp, #0
 25333              		.cfi_offset 7, -4
 25334              	.LCFI26:
 25335              		.cfi_def_cfa_register 7
 25336 0472 7860     		str	r0, [r7, #4]
 25337 0474 0B46     		mov	r3, r1
 25338 0476 7B80     		strh	r3, [r7, #2]	@ movhi
 590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION(SPI_Direction));
 593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_Direction == SPI_Direction_Tx)
 25339              		.loc 1 593 0
 25340 0478 7B88     		ldrh	r3, [r7, #2]
 25341 047a B3F5804F 		cmp	r3, #16384
 25342 047e 08D1     		bne	.L30
 594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the Tx only mode */
 596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_Direction_Tx;
 25343              		.loc 1 596 0
 25344 0480 7B68     		ldr	r3, [r7, #4]
 25345 0482 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25346 0484 9BB2     		uxth	r3, r3
 25347 0486 43F48043 		orr	r3, r3, #16384
 25348 048a 9AB2     		uxth	r2, r3
 25349 048c 7B68     		ldr	r3, [r7, #4]
 25350 048e 1A80     		strh	r2, [r3, #0]	@ movhi
 25351 0490 07E0     		b	.L29
 25352              	.L30:
 597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the Rx only mode */
 601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_Direction_Rx;
 25353              		.loc 1 601 0
 25354 0492 7B68     		ldr	r3, [r7, #4]
 25355 0494 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25356 0496 9BB2     		uxth	r3, r3
 25357 0498 23F48043 		bic	r3, r3, #16384
 25358 049c 9AB2     		uxth	r2, r3
 25359 049e 7B68     		ldr	r3, [r7, #4]
 25360 04a0 1A80     		strh	r2, [r3, #0]	@ movhi
 25361              	.L29:
 602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25362              		.loc 1 603 0
 25363 04a2 07F10C07 		add	r7, r7, #12
 25364 04a6 BD46     		mov	sp, r7
 25365 04a8 80BC     		pop	{r7}
 25366 04aa 7047     		bx	lr
 25367              		.cfi_endproc
 25368              	.LFE118:
 25370              		.align	2
 25371              		.global	SPI_NSSInternalSoftwareConfig
 25372              		.thumb
 25373              		.thumb_func
 25375              	SPI_NSSInternalSoftwareConfig:
 25376              	.LFB119:
 604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures internally by software the NSS pin for the selected SPI.
 607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_NSSInternalSoft: specifies the SPI NSS internal state.
 609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
 611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
 612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
 615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25377              		.loc 1 615 0
 25378              		.cfi_startproc
 25379              		@ args = 0, pretend = 0, frame = 8
 25380              		@ frame_needed = 1, uses_anonymous_args = 0
 25381              		@ link register save eliminated.
 25382 04ac 80B4     		push	{r7}
 25383              	.LCFI27:
 25384              		.cfi_def_cfa_offset 4
 25385 04ae 83B0     		sub	sp, sp, #12
 25386              	.LCFI28:
 25387              		.cfi_def_cfa_offset 16
 25388 04b0 00AF     		add	r7, sp, #0
 25389              		.cfi_offset 7, -4
 25390              	.LCFI29:
 25391              		.cfi_def_cfa_register 7
 25392 04b2 7860     		str	r0, [r7, #4]
 25393 04b4 0B46     		mov	r3, r1
 25394 04b6 7B80     		strh	r3, [r7, #2]	@ movhi
 616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
 619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 25395              		.loc 1 619 0
 25396 04b8 7A88     		ldrh	r2, [r7, #2]
 25397 04ba 4FF6FF63 		movw	r3, #65279
 25398 04be 9A42     		cmp	r2, r3
 25399 04c0 08D0     		beq	.L33
 620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set NSS pin internally by software */
 622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 25400              		.loc 1 622 0
 25401 04c2 7B68     		ldr	r3, [r7, #4]
 25402 04c4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25403 04c6 9BB2     		uxth	r3, r3
 25404 04c8 43F48073 		orr	r3, r3, #256
 25405 04cc 9AB2     		uxth	r2, r3
 25406 04ce 7B68     		ldr	r3, [r7, #4]
 25407 04d0 1A80     		strh	r2, [r3, #0]	@ movhi
 25408 04d2 07E0     		b	.L32
 25409              	.L33:
 623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Reset NSS pin internally by software */
 627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 25410              		.loc 1 627 0
 25411 04d4 7B68     		ldr	r3, [r7, #4]
 25412 04d6 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25413 04d8 9BB2     		uxth	r3, r3
 25414 04da 23F48073 		bic	r3, r3, #256
 25415 04de 9AB2     		uxth	r2, r3
 25416 04e0 7B68     		ldr	r3, [r7, #4]
 25417 04e2 1A80     		strh	r2, [r3, #0]	@ movhi
 25418              	.L32:
 628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25419              		.loc 1 629 0
 25420 04e4 07F10C07 		add	r7, r7, #12
 25421 04e8 BD46     		mov	sp, r7
 25422 04ea 80BC     		pop	{r7}
 25423 04ec 7047     		bx	lr
 25424              		.cfi_endproc
 25425              	.LFE119:
 25427 04ee 00BF     		.align	2
 25428              		.global	SPI_SSOutputCmd
 25429              		.thumb
 25430              		.thumb_func
 25432              	SPI_SSOutputCmd:
 25433              	.LFB120:
 630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SS output for the selected SPI.
 633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx SS output. 
 635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25434              		.loc 1 639 0
 25435              		.cfi_startproc
 25436              		@ args = 0, pretend = 0, frame = 8
 25437              		@ frame_needed = 1, uses_anonymous_args = 0
 25438              		@ link register save eliminated.
 25439 04f0 80B4     		push	{r7}
 25440              	.LCFI30:
 25441              		.cfi_def_cfa_offset 4
 25442 04f2 83B0     		sub	sp, sp, #12
 25443              	.LCFI31:
 25444              		.cfi_def_cfa_offset 16
 25445 04f4 00AF     		add	r7, sp, #0
 25446              		.cfi_offset 7, -4
 25447              	.LCFI32:
 25448              		.cfi_def_cfa_register 7
 25449 04f6 7860     		str	r0, [r7, #4]
 25450 04f8 0B46     		mov	r3, r1
 25451 04fa FB70     		strb	r3, [r7, #3]
 640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 25452              		.loc 1 643 0
 25453 04fc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25454 04fe 002B     		cmp	r3, #0
 25455 0500 08D0     		beq	.L36
 644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI SS output */
 646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 25456              		.loc 1 646 0
 25457 0502 7B68     		ldr	r3, [r7, #4]
 25458 0504 9B88     		ldrh	r3, [r3, #4]	@ movhi
 25459 0506 9BB2     		uxth	r3, r3
 25460 0508 43F00403 		orr	r3, r3, #4
 25461 050c 9AB2     		uxth	r2, r3
 25462 050e 7B68     		ldr	r3, [r7, #4]
 25463 0510 9A80     		strh	r2, [r3, #4]	@ movhi
 25464 0512 07E0     		b	.L35
 25465              	.L36:
 647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI SS output */
 651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 25466              		.loc 1 651 0
 25467 0514 7B68     		ldr	r3, [r7, #4]
 25468 0516 9B88     		ldrh	r3, [r3, #4]	@ movhi
 25469 0518 9BB2     		uxth	r3, r3
 25470 051a 23F00403 		bic	r3, r3, #4
 25471 051e 9AB2     		uxth	r2, r3
 25472 0520 7B68     		ldr	r3, [r7, #4]
 25473 0522 9A80     		strh	r2, [r3, #4]	@ movhi
 25474              	.L35:
 652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25475              		.loc 1 653 0
 25476 0524 07F10C07 		add	r7, r7, #12
 25477 0528 BD46     		mov	sp, r7
 25478 052a 80BC     		pop	{r7}
 25479 052c 7047     		bx	lr
 25480              		.cfi_endproc
 25481              	.LFE120:
 25483 052e 00BF     		.align	2
 25484              		.global	SPI_TIModeCmd
 25485              		.thumb
 25486              		.thumb_func
 25488              	SPI_TIModeCmd:
 25489              	.LFB121:
 654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
 658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   This function can be called only after the SPI_Init() function has 
 659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         been called. 
 660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   When TI mode is selected, the control bits SSM, SSI, CPOL and CPHA 
 661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         are not taken into consideration and are configured by hardware
 662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         respectively to the TI mode requirements.  
 663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 
 665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI TI communication mode.
 666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25490              		.loc 1 670 0
 25491              		.cfi_startproc
 25492              		@ args = 0, pretend = 0, frame = 8
 25493              		@ frame_needed = 1, uses_anonymous_args = 0
 25494              		@ link register save eliminated.
 25495 0530 80B4     		push	{r7}
 25496              	.LCFI33:
 25497              		.cfi_def_cfa_offset 4
 25498 0532 83B0     		sub	sp, sp, #12
 25499              	.LCFI34:
 25500              		.cfi_def_cfa_offset 16
 25501 0534 00AF     		add	r7, sp, #0
 25502              		.cfi_offset 7, -4
 25503              	.LCFI35:
 25504              		.cfi_def_cfa_register 7
 25505 0536 7860     		str	r0, [r7, #4]
 25506 0538 0B46     		mov	r3, r1
 25507 053a FB70     		strb	r3, [r7, #3]
 671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 25508              		.loc 1 675 0
 25509 053c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25510 053e 002B     		cmp	r3, #0
 25511 0540 08D0     		beq	.L39
 676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the TI mode for the selected SPI peripheral */
 678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_CR2_FRF;
 25512              		.loc 1 678 0
 25513 0542 7B68     		ldr	r3, [r7, #4]
 25514 0544 9B88     		ldrh	r3, [r3, #4]	@ movhi
 25515 0546 9BB2     		uxth	r3, r3
 25516 0548 43F01003 		orr	r3, r3, #16
 25517 054c 9AB2     		uxth	r2, r3
 25518 054e 7B68     		ldr	r3, [r7, #4]
 25519 0550 9A80     		strh	r2, [r3, #4]	@ movhi
 25520 0552 07E0     		b	.L38
 25521              	.L39:
 679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the TI mode for the selected SPI peripheral */
 683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 25522              		.loc 1 683 0
 25523 0554 7B68     		ldr	r3, [r7, #4]
 25524 0556 9B88     		ldrh	r3, [r3, #4]	@ movhi
 25525 0558 9BB2     		uxth	r3, r3
 25526 055a 23F01003 		bic	r3, r3, #16
 25527 055e 9AB2     		uxth	r2, r3
 25528 0560 7B68     		ldr	r3, [r7, #4]
 25529 0562 9A80     		strh	r2, [r3, #4]	@ movhi
 25530              	.L38:
 684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25531              		.loc 1 685 0
 25532 0564 07F10C07 		add	r7, r7, #12
 25533 0568 BD46     		mov	sp, r7
 25534 056a 80BC     		pop	{r7}
 25535 056c 7047     		bx	lr
 25536              		.cfi_endproc
 25537              	.LFE121:
 25539 056e 00BF     		.align	2
 25540              		.global	I2S_FullDuplexConfig
 25541              		.thumb
 25542              		.thumb_func
 25544              	I2S_FullDuplexConfig:
 25545              	.LFB122:
 686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures the full duplex mode for the I2Sx peripheral using its
 689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         extension I2Sxext according to the specified parameters in the 
 690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         I2S_InitStruct.
 691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2Sxext: where x can be  2 or 3 to select the I2S peripheral extension block.
 692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified I2S peripheral
 694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         extension.
 695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The structure pointed by I2S_InitStruct parameter should be the same
 697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         used for the master I2S peripheral. In this case, if the master is 
 698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         configured as transmitter, the slave will be receiver and vice versa.
 699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         Or you can force a different mode by modifying the field I2S_Mode to the
 700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         value I2S_SlaveRx or I2S_SlaveTx indepedently of the master configuration.    
 701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         
 702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The I2S full duplex extension can be configured in slave mode only.    
 703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
 704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
 707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25546              		.loc 1 707 0
 25547              		.cfi_startproc
 25548              		@ args = 0, pretend = 0, frame = 16
 25549              		@ frame_needed = 1, uses_anonymous_args = 0
 25550              		@ link register save eliminated.
 25551 0570 80B4     		push	{r7}
 25552              	.LCFI36:
 25553              		.cfi_def_cfa_offset 4
 25554 0572 85B0     		sub	sp, sp, #20
 25555              	.LCFI37:
 25556              		.cfi_def_cfa_offset 24
 25557 0574 00AF     		add	r7, sp, #0
 25558              		.cfi_offset 7, -4
 25559              	.LCFI38:
 25560              		.cfi_def_cfa_register 7
 25561 0576 7860     		str	r0, [r7, #4]
 25562 0578 3960     		str	r1, [r7, #0]
 708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, tmp = 0;
 25563              		.loc 1 708 0
 25564 057a 4FF00003 		mov	r3, #0
 25565 057e BB81     		strh	r3, [r7, #12]	@ movhi
 25566 0580 4FF00003 		mov	r3, #0
 25567 0584 FB81     		strh	r3, [r7, #14]	@ movhi
 709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_EXT_PERIPH(I2Sxext));
 712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 25568              		.loc 1 719 0
 25569 0586 7B68     		ldr	r3, [r7, #4]
 25570 0588 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 25571 058a 9BB2     		uxth	r3, r3
 25572 058c 23F47A63 		bic	r3, r3, #4000
 25573 0590 23F01F03 		bic	r3, r3, #31
 25574 0594 9AB2     		uxth	r2, r3
 25575 0596 7B68     		ldr	r3, [r7, #4]
 25576 0598 9A83     		strh	r2, [r3, #28]	@ movhi
 720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SPR = 0x0002;
 25577              		.loc 1 720 0
 25578 059a 7B68     		ldr	r3, [r7, #4]
 25579 059c 4FF00202 		mov	r2, #2
 25580 05a0 1A84     		strh	r2, [r3, #32]	@ movhi
 721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = I2Sxext->I2SCFGR;
 25581              		.loc 1 723 0
 25582 05a2 7B68     		ldr	r3, [r7, #4]
 25583 05a4 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 25584 05a6 BB81     		strh	r3, [r7, #12]	@ movhi
 724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the mode to be configured for the extended I2S */
 726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Slav
 25585              		.loc 1 726 0
 25586 05a8 3B68     		ldr	r3, [r7, #0]
 25587 05aa 1B88     		ldrh	r3, [r3, #0]
 25588 05ac B3F5007F 		cmp	r3, #512
 25589 05b0 03D0     		beq	.L42
 25590              		.loc 1 726 0 is_stmt 0 discriminator 1
 25591 05b2 3B68     		ldr	r3, [r7, #0]
 25592 05b4 1B88     		ldrh	r3, [r3, #0]
 25593 05b6 002B     		cmp	r3, #0
 25594 05b8 03D1     		bne	.L43
 25595              	.L42:
 727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     tmp = I2S_Mode_SlaveRx;
 25596              		.loc 1 728 0 is_stmt 1
 25597 05ba 4FF48073 		mov	r3, #256
 25598 05be FB81     		strh	r3, [r7, #14]	@ movhi
 25599 05c0 0CE0     		b	.L44
 25600              	.L43:
 729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Sl
 25601              		.loc 1 732 0
 25602 05c2 3B68     		ldr	r3, [r7, #0]
 25603 05c4 1B88     		ldrh	r3, [r3, #0]
 25604 05c6 B3F5407F 		cmp	r3, #768
 25605 05ca 04D0     		beq	.L45
 25606              		.loc 1 732 0 is_stmt 0 discriminator 1
 25607 05cc 3B68     		ldr	r3, [r7, #0]
 25608 05ce 1B88     		ldrh	r3, [r3, #0]
 25609 05d0 B3F5807F 		cmp	r3, #256
 25610 05d4 02D1     		bne	.L44
 25611              	.L45:
 733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = I2S_Mode_SlaveTx;
 25612              		.loc 1 734 0 is_stmt 1
 25613 05d6 4FF00003 		mov	r3, #0
 25614 05da FB81     		strh	r3, [r7, #14]	@ movhi
 25615              	.L44:
 735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 25616              		.loc 1 741 0
 25617 05dc 3B68     		ldr	r3, [r7, #0]
 25618 05de 5A88     		ldrh	r2, [r3, #2]
 25619 05e0 3B68     		ldr	r3, [r7, #0]
 25620 05e2 9988     		ldrh	r1, [r3, #4]
 742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 25621              		.loc 1 742 0
 25622 05e4 3B68     		ldr	r3, [r7, #0]
 25623 05e6 9B89     		ldrh	r3, [r3, #12]
 741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 25624              		.loc 1 741 0
 25625 05e8 41EA0303 		orr	r3, r1, r3
 25626 05ec 9BB2     		uxth	r3, r3
 25627 05ee 42EA0303 		orr	r3, r2, r3
 25628 05f2 9AB2     		uxth	r2, r3
 740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 25629              		.loc 1 740 0
 25630 05f4 FB89     		ldrh	r3, [r7, #14]	@ movhi
 25631 05f6 42EA0303 		orr	r3, r2, r3
 25632 05fa 9AB2     		uxth	r2, r3
 25633 05fc BB89     		ldrh	r3, [r7, #12]	@ movhi
 25634 05fe 42EA0303 		orr	r3, r2, r3
 25635 0602 9BB2     		uxth	r3, r3
 25636 0604 43F40063 		orr	r3, r3, #2048
 25637 0608 BB81     		strh	r3, [r7, #12]	@ movhi
 743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
 745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR = tmpreg;
 25638              		.loc 1 745 0
 25639 060a 7B68     		ldr	r3, [r7, #4]
 25640 060c BA89     		ldrh	r2, [r7, #12]	@ movhi
 25641 060e 9A83     		strh	r2, [r3, #28]	@ movhi
 746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25642              		.loc 1 746 0
 25643 0610 07F11407 		add	r7, r7, #20
 25644 0614 BD46     		mov	sp, r7
 25645 0616 80BC     		pop	{r7}
 25646 0618 7047     		bx	lr
 25647              		.cfi_endproc
 25648              	.LFE122:
 25650 061a 00BF     		.align	2
 25651              		.global	SPI_I2S_ReceiveData
 25652              		.thumb
 25653              		.thumb_func
 25655              	SPI_I2S_ReceiveData:
 25656              	.LFB123:
 747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group2 Data transfers functions
 753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Data transfers functions
 754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          Data transfers functions
 758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to manage the SPI data transfers
 761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In reception, data are received and then stored into an internal Rx buffer while 
 763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In transmission, data are first stored into an internal Tx buffer before being 
 764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   transmitted.
 765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   The read access of the SPI_DR register can be done using the SPI_I2S_ReceiveData()
 767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   function and returns the Rx buffered value. Whereas a write access to the SPI_DR 
 768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   can be done using SPI_I2S_SendData() function and stores the written data into 
 769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Tx buffer.
 770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the most recent received data by the SPIx/I2Sx peripheral. 
 777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
 779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The value of the received data.
 780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
 782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25657              		.loc 1 782 0
 25658              		.cfi_startproc
 25659              		@ args = 0, pretend = 0, frame = 8
 25660              		@ frame_needed = 1, uses_anonymous_args = 0
 25661              		@ link register save eliminated.
 25662 061c 80B4     		push	{r7}
 25663              	.LCFI39:
 25664              		.cfi_def_cfa_offset 4
 25665 061e 83B0     		sub	sp, sp, #12
 25666              	.LCFI40:
 25667              		.cfi_def_cfa_offset 16
 25668 0620 00AF     		add	r7, sp, #0
 25669              		.cfi_offset 7, -4
 25670              	.LCFI41:
 25671              		.cfi_def_cfa_register 7
 25672 0622 7860     		str	r0, [r7, #4]
 783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the data in the DR register */
 787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return SPIx->DR;
 25673              		.loc 1 787 0
 25674 0624 7B68     		ldr	r3, [r7, #4]
 25675 0626 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25676 0628 9BB2     		uxth	r3, r3
 788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25677              		.loc 1 788 0
 25678 062a 1846     		mov	r0, r3
 25679 062c 07F10C07 		add	r7, r7, #12
 25680 0630 BD46     		mov	sp, r7
 25681 0632 80BC     		pop	{r7}
 25682 0634 7047     		bx	lr
 25683              		.cfi_endproc
 25684              	.LFE123:
 25686 0636 00BF     		.align	2
 25687              		.global	SPI_I2S_SendData
 25688              		.thumb
 25689              		.thumb_func
 25691              	SPI_I2S_SendData:
 25692              	.LFB124:
 789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Transmits a Data through the SPIx/I2Sx peripheral.
 792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
 794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  Data: Data to be transmitted.
 795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
 798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25693              		.loc 1 798 0
 25694              		.cfi_startproc
 25695              		@ args = 0, pretend = 0, frame = 8
 25696              		@ frame_needed = 1, uses_anonymous_args = 0
 25697              		@ link register save eliminated.
 25698 0638 80B4     		push	{r7}
 25699              	.LCFI42:
 25700              		.cfi_def_cfa_offset 4
 25701 063a 83B0     		sub	sp, sp, #12
 25702              	.LCFI43:
 25703              		.cfi_def_cfa_offset 16
 25704 063c 00AF     		add	r7, sp, #0
 25705              		.cfi_offset 7, -4
 25706              	.LCFI44:
 25707              		.cfi_def_cfa_register 7
 25708 063e 7860     		str	r0, [r7, #4]
 25709 0640 0B46     		mov	r3, r1
 25710 0642 7B80     		strh	r3, [r7, #2]	@ movhi
 799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write in the DR register the data to be sent */
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->DR = Data;
 25711              		.loc 1 803 0
 25712 0644 7B68     		ldr	r3, [r7, #4]
 25713 0646 7A88     		ldrh	r2, [r7, #2]	@ movhi
 25714 0648 9A81     		strh	r2, [r3, #12]	@ movhi
 804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25715              		.loc 1 804 0
 25716 064a 07F10C07 		add	r7, r7, #12
 25717 064e BD46     		mov	sp, r7
 25718 0650 80BC     		pop	{r7}
 25719 0652 7047     		bx	lr
 25720              		.cfi_endproc
 25721              	.LFE124:
 25723              		.align	2
 25724              		.global	SPI_CalculateCRC
 25725              		.thumb
 25726              		.thumb_func
 25728              	SPI_CalculateCRC:
 25729              	.LFB125:
 805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group3 Hardware CRC Calculation functions
 811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Hardware CRC Calculation functions
 812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          Hardware CRC Calculation functions
 816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to manage the SPI CRC hardware 
 819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   calculation
 820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI communication using CRC is possible through the following procedure:
 822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. Program the Data direction, Polarity, Phase, First Data, Baud Rate Prescaler, 
 823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         Slave Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
 824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         function.
 825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. Enable the CRC calculation using the SPI_CalculateCRC() function.
 826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. Enable the SPI using the SPI_Cmd() function
 827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      4. Before writing the last data to the TX buffer, set the CRCNext bit using the 
 828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       SPI_TransmitCRC() function to indicate that after transmission of the last 
 829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       data, the CRC should be transmitted.
 830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      5. After transmitting the last data, the SPI transmits the CRC. The SPI_CR1_CRCNEXT
 831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         bit is reset. The CRC is also received and compared against the SPI_RXCRCR 
 832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         value. 
 833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         If the value does not match, the SPI_FLAG_CRCERR flag is set and an interrupt
 834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         can be generated when the SPI_I2S_IT_ERR interrupt is enabled.
 835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note It is advised not to read the calculated CRC values during the communication.
 837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note When the SPI is in slave mode, be careful to enable CRC calculation only 
 839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       when the clock is stable, that is, when the clock is in the steady state. 
 840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       If not, a wrong CRC calculation may be done. In fact, the CRC is sensitive 
 841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       to the SCK slave input clock as soon as CRCEN is set, and this, whatever 
 842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       the value of the SPE bit.
 843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note With high bitrate frequencies, be careful when transmitting the CRC.
 845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       As the number of used CPU cycles has to be as low as possible in the CRC 
 846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       transfer phase, it is forbidden to call software functions in the CRC 
 847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       transmission sequence to avoid errors in the last data and CRC reception. 
 848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       In fact, CRCNEXT bit has to be written before the end of the transmission/reception 
 849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       of the last data.
 850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note For high bit rate frequencies, it is advised to use the DMA mode to avoid the
 852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       degradation of the SPI speed performance due to CPU accesses impacting the 
 853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       SPI bandwidth.
 854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note When the STM32F4xx is configured as slave and the NSS hardware mode is 
 856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       used, the NSS pin needs to be kept low between the data phase and the CRC 
 857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       phase.
 858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note When the SPI is configured in slave mode with the CRC feature enabled, CRC
 860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       calculation takes place even if a high level is applied on the NSS pin. 
 861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       This may happen for example in case of a multi-slave environment where the 
 862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       communication master addresses slaves alternately.
 863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note Between a slave de-selection (high level on NSS) and a new slave selection 
 865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       (low level on NSS), the CRC value should be cleared on both master and slave
 866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       sides in order to resynchronize the master and slave for their respective 
 867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       CRC calculation.
 868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note To clear the CRC, follow the procedure below:
 870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         1. Disable SPI using the SPI_Cmd() function
 871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         2. Disable the CRC calculation using the SPI_CalculateCRC() function.
 872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         3. Enable the CRC calculation using the SPI_CalculateCRC() function.
 873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         4. Enable SPI using the SPI_Cmd() function.
 874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the CRC value calculation of the transferred bytes.
 881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx CRC value calculation.
 883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
 887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25730              		.loc 1 887 0
 25731              		.cfi_startproc
 25732              		@ args = 0, pretend = 0, frame = 8
 25733              		@ frame_needed = 1, uses_anonymous_args = 0
 25734              		@ link register save eliminated.
 25735 0654 80B4     		push	{r7}
 25736              	.LCFI45:
 25737              		.cfi_def_cfa_offset 4
 25738 0656 83B0     		sub	sp, sp, #12
 25739              	.LCFI46:
 25740              		.cfi_def_cfa_offset 16
 25741 0658 00AF     		add	r7, sp, #0
 25742              		.cfi_offset 7, -4
 25743              	.LCFI47:
 25744              		.cfi_def_cfa_register 7
 25745 065a 7860     		str	r0, [r7, #4]
 25746 065c 0B46     		mov	r3, r1
 25747 065e FB70     		strb	r3, [r7, #3]
 888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 25748              		.loc 1 891 0
 25749 0660 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25750 0662 002B     		cmp	r3, #0
 25751 0664 08D0     		beq	.L49
 892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI CRC calculation */
 894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_CRCEN;
 25752              		.loc 1 894 0
 25753 0666 7B68     		ldr	r3, [r7, #4]
 25754 0668 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25755 066a 9BB2     		uxth	r3, r3
 25756 066c 43F40053 		orr	r3, r3, #8192
 25757 0670 9AB2     		uxth	r2, r3
 25758 0672 7B68     		ldr	r3, [r7, #4]
 25759 0674 1A80     		strh	r2, [r3, #0]	@ movhi
 25760 0676 07E0     		b	.L48
 25761              	.L49:
 895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI CRC calculation */
 899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 25762              		.loc 1 899 0
 25763 0678 7B68     		ldr	r3, [r7, #4]
 25764 067a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25765 067c 9BB2     		uxth	r3, r3
 25766 067e 23F40053 		bic	r3, r3, #8192
 25767 0682 9AB2     		uxth	r2, r3
 25768 0684 7B68     		ldr	r3, [r7, #4]
 25769 0686 1A80     		strh	r2, [r3, #0]	@ movhi
 25770              	.L48:
 900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25771              		.loc 1 901 0
 25772 0688 07F10C07 		add	r7, r7, #12
 25773 068c BD46     		mov	sp, r7
 25774 068e 80BC     		pop	{r7}
 25775 0690 7047     		bx	lr
 25776              		.cfi_endproc
 25777              	.LFE125:
 25779 0692 00BF     		.align	2
 25780              		.global	SPI_TransmitCRC
 25781              		.thumb
 25782              		.thumb_func
 25784              	SPI_TransmitCRC:
 25785              	.LFB126:
 902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Transmit the SPIx CRC value.
 905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_TransmitCRC(SPI_TypeDef* SPIx)
 909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25786              		.loc 1 909 0
 25787              		.cfi_startproc
 25788              		@ args = 0, pretend = 0, frame = 8
 25789              		@ frame_needed = 1, uses_anonymous_args = 0
 25790              		@ link register save eliminated.
 25791 0694 80B4     		push	{r7}
 25792              	.LCFI48:
 25793              		.cfi_def_cfa_offset 4
 25794 0696 83B0     		sub	sp, sp, #12
 25795              	.LCFI49:
 25796              		.cfi_def_cfa_offset 16
 25797 0698 00AF     		add	r7, sp, #0
 25798              		.cfi_offset 7, -4
 25799              	.LCFI50:
 25800              		.cfi_def_cfa_register 7
 25801 069a 7860     		str	r0, [r7, #4]
 910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Enable the selected SPI CRC transmission */
 914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_CR1_CRCNEXT;
 25802              		.loc 1 914 0
 25803 069c 7B68     		ldr	r3, [r7, #4]
 25804 069e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25805 06a0 9BB2     		uxth	r3, r3
 25806 06a2 43F48053 		orr	r3, r3, #4096
 25807 06a6 9AB2     		uxth	r2, r3
 25808 06a8 7B68     		ldr	r3, [r7, #4]
 25809 06aa 1A80     		strh	r2, [r3, #0]	@ movhi
 915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25810              		.loc 1 915 0
 25811 06ac 07F10C07 		add	r7, r7, #12
 25812 06b0 BD46     		mov	sp, r7
 25813 06b2 80BC     		pop	{r7}
 25814 06b4 7047     		bx	lr
 25815              		.cfi_endproc
 25816              	.LFE126:
 25818 06b6 00BF     		.align	2
 25819              		.global	SPI_GetCRC
 25820              		.thumb
 25821              		.thumb_func
 25823              	SPI_GetCRC:
 25824              	.LFB127:
 916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the transmit or the receive CRC register value for the specified SPI.
 919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_CRC: specifies the CRC register to be read.
 921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Tx: Selects Tx CRC register
 923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Rx: Selects Rx CRC register
 924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The selected CRC register value..
 925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
 927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25825              		.loc 1 927 0
 25826              		.cfi_startproc
 25827              		@ args = 0, pretend = 0, frame = 16
 25828              		@ frame_needed = 1, uses_anonymous_args = 0
 25829              		@ link register save eliminated.
 25830 06b8 80B4     		push	{r7}
 25831              	.LCFI51:
 25832              		.cfi_def_cfa_offset 4
 25833 06ba 85B0     		sub	sp, sp, #20
 25834              	.LCFI52:
 25835              		.cfi_def_cfa_offset 24
 25836 06bc 00AF     		add	r7, sp, #0
 25837              		.cfi_offset 7, -4
 25838              	.LCFI53:
 25839              		.cfi_def_cfa_register 7
 25840 06be 7860     		str	r0, [r7, #4]
 25841 06c0 0B46     		mov	r3, r1
 25842 06c2 FB70     		strb	r3, [r7, #3]
 928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t crcreg = 0;
 25843              		.loc 1 928 0
 25844 06c4 4FF00003 		mov	r3, #0
 25845 06c8 FB81     		strh	r3, [r7, #14]	@ movhi
 929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC(SPI_CRC));
 932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_CRC != SPI_CRC_Rx)
 25846              		.loc 1 932 0
 25847 06ca FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25848 06cc 012B     		cmp	r3, #1
 25849 06ce 03D0     		beq	.L53
 933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Tx CRC register */
 935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     crcreg = SPIx->TXCRCR;
 25850              		.loc 1 935 0
 25851 06d0 7B68     		ldr	r3, [r7, #4]
 25852 06d2 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 25853 06d4 FB81     		strh	r3, [r7, #14]	@ movhi
 25854 06d6 02E0     		b	.L54
 25855              	.L53:
 936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Rx CRC register */
 940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     crcreg = SPIx->RXCRCR;
 25856              		.loc 1 940 0
 25857 06d8 7B68     		ldr	r3, [r7, #4]
 25858 06da 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 25859 06dc FB81     		strh	r3, [r7, #14]	@ movhi
 25860              	.L54:
 941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the selected CRC register */
 943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return crcreg;
 25861              		.loc 1 943 0
 25862 06de FB89     		ldrh	r3, [r7, #14]
 944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25863              		.loc 1 944 0
 25864 06e0 1846     		mov	r0, r3
 25865 06e2 07F11407 		add	r7, r7, #20
 25866 06e6 BD46     		mov	sp, r7
 25867 06e8 80BC     		pop	{r7}
 25868 06ea 7047     		bx	lr
 25869              		.cfi_endproc
 25870              	.LFE127:
 25872              		.align	2
 25873              		.global	SPI_GetCRCPolynomial
 25874              		.thumb
 25875              		.thumb_func
 25877              	SPI_GetCRCPolynomial:
 25878              	.LFB128:
 945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the CRC Polynomial register value for the specified SPI.
 948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The CRC Polynomial register value.
 950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
 952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25879              		.loc 1 952 0
 25880              		.cfi_startproc
 25881              		@ args = 0, pretend = 0, frame = 8
 25882              		@ frame_needed = 1, uses_anonymous_args = 0
 25883              		@ link register save eliminated.
 25884 06ec 80B4     		push	{r7}
 25885              	.LCFI54:
 25886              		.cfi_def_cfa_offset 4
 25887 06ee 83B0     		sub	sp, sp, #12
 25888              	.LCFI55:
 25889              		.cfi_def_cfa_offset 16
 25890 06f0 00AF     		add	r7, sp, #0
 25891              		.cfi_offset 7, -4
 25892              	.LCFI56:
 25893              		.cfi_def_cfa_register 7
 25894 06f2 7860     		str	r0, [r7, #4]
 953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the CRC polynomial register */
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return SPIx->CRCPR;
 25895              		.loc 1 957 0
 25896 06f4 7B68     		ldr	r3, [r7, #4]
 25897 06f6 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 25898 06f8 9BB2     		uxth	r3, r3
 958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25899              		.loc 1 958 0
 25900 06fa 1846     		mov	r0, r3
 25901 06fc 07F10C07 		add	r7, r7, #12
 25902 0700 BD46     		mov	sp, r7
 25903 0702 80BC     		pop	{r7}
 25904 0704 7047     		bx	lr
 25905              		.cfi_endproc
 25906              	.LFE128:
 25908 0706 00BF     		.align	2
 25909              		.global	SPI_I2S_DMACmd
 25910              		.thumb
 25911              		.thumb_func
 25913              	SPI_I2S_DMACmd:
 25914              	.LFB129:
 959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group4 DMA transfers management functions
 965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   DMA transfers management functions
 966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          DMA transfers management functions
 970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
 980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_DMAReq: specifies the SPI DMA transfer request to be enabled or disabled. 
 981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be any combination of the following values:
 982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Tx: Tx buffer DMA transfer request
 983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Rx: Rx buffer DMA transfer request
 984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI DMA transfer request.
 985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
 989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25915              		.loc 1 989 0
 25916              		.cfi_startproc
 25917              		@ args = 0, pretend = 0, frame = 8
 25918              		@ frame_needed = 1, uses_anonymous_args = 0
 25919              		@ link register save eliminated.
 25920 0708 80B4     		push	{r7}
 25921              	.LCFI57:
 25922              		.cfi_def_cfa_offset 4
 25923 070a 83B0     		sub	sp, sp, #12
 25924              	.LCFI58:
 25925              		.cfi_def_cfa_offset 16
 25926 070c 00AF     		add	r7, sp, #0
 25927              		.cfi_offset 7, -4
 25928              	.LCFI59:
 25929              		.cfi_def_cfa_register 7
 25930 070e 7860     		str	r0, [r7, #4]
 25931 0710 1346     		mov	r3, r2
 25932 0712 0A46     		mov	r2, r1	@ movhi
 25933 0714 7A80     		strh	r2, [r7, #2]	@ movhi
 25934 0716 7B70     		strb	r3, [r7, #1]
 990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
 994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 25935              		.loc 1 995 0
 25936 0718 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 25937 071a 002B     		cmp	r3, #0
 25938 071c 09D0     		beq	.L57
 996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI DMA requests */
 998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_I2S_DMAReq;
 25939              		.loc 1 998 0
 25940 071e 7B68     		ldr	r3, [r7, #4]
 25941 0720 9B88     		ldrh	r3, [r3, #4]	@ movhi
 25942 0722 9AB2     		uxth	r2, r3
 25943 0724 7B88     		ldrh	r3, [r7, #2]	@ movhi
 25944 0726 42EA0303 		orr	r3, r2, r3
 25945 072a 9AB2     		uxth	r2, r3
 25946 072c 7B68     		ldr	r3, [r7, #4]
 25947 072e 9A80     		strh	r2, [r3, #4]	@ movhi
 25948 0730 0BE0     		b	.L56
 25949              	.L57:
 999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI DMA requests */
1003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 25950              		.loc 1 1003 0
 25951 0732 7B68     		ldr	r3, [r7, #4]
 25952 0734 9B88     		ldrh	r3, [r3, #4]	@ movhi
 25953 0736 9AB2     		uxth	r2, r3
 25954 0738 7B88     		ldrh	r3, [r7, #2]	@ movhi
 25955 073a 6FEA0303 		mvn	r3, r3
 25956 073e 9BB2     		uxth	r3, r3
 25957 0740 02EA0303 		and	r3, r2, r3
 25958 0744 9AB2     		uxth	r2, r3
 25959 0746 7B68     		ldr	r3, [r7, #4]
 25960 0748 9A80     		strh	r2, [r3, #4]	@ movhi
 25961              	.L56:
1004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25962              		.loc 1 1005 0
 25963 074a 07F10C07 		add	r7, r7, #12
 25964 074e BD46     		mov	sp, r7
 25965 0750 80BC     		pop	{r7}
 25966 0752 7047     		bx	lr
 25967              		.cfi_endproc
 25968              	.LFE129:
 25970              		.align	2
 25971              		.global	SPI_I2S_ITConfig
 25972              		.thumb
 25973              		.thumb_func
 25975              	SPI_I2S_ITConfig:
 25976              	.LFB130:
1006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
1009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group5 Interrupts and flags management functions
1012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Interrupts and flags management functions
1013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
1014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
1015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
1016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          Interrupts and flags management functions
1017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
1018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to configure the SPI Interrupts 
1020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   sources and check or clear the flags or pending bits status.
1021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   The user should identify which mode will be used in his application to manage 
1022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
1023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
1024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Polling Mode
1025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   =============
1026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In Polling Mode, the SPI/I2S communication can be managed by 9 flags:
1027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_FLAG_TXE : to indicate the status of the transmit buffer register
1028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_FLAG_RXNE : to indicate the status of the receive buffer register
1029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. SPI_I2S_FLAG_BSY : to indicate the state of the communication layer of the SPI.
1030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      4. SPI_FLAG_CRCERR : to indicate if a CRC Calculation error occur              
1031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      5. SPI_FLAG_MODF : to indicate if a Mode Fault error occur
1032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      6. SPI_I2S_FLAG_OVR : to indicate if an Overrun error occur
1033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      7. I2S_FLAG_TIFRFE: to indicate a Frame Format error occurs.
1034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      8. I2S_FLAG_UDR: to indicate an Underrun error occurs.
1035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      9. I2S_FLAG_CHSIDE: to indicate Channel Side.
1036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note Do not use the BSY flag to handle each data transmission or reception.  It is
1038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       better to use the TXE and RXNE flags instead.
1039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In this Mode it is advised to use the following functions:
1041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Interrupt Mode
1045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ===============
1046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In Interrupt Mode, the SPI communication can be managed by 3 interrupt sources
1047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   and 7 pending bits: 
1048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Pending Bits:
1049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ------------- 
1050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_IT_TXE : to indicate the status of the transmit buffer register
1051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_IT_RXNE : to indicate the status of the receive buffer register
1052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. SPI_IT_CRCERR : to indicate if a CRC Calculation error occur (available in SPI mode only)  
1053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      4. SPI_IT_MODF : to indicate if a Mode Fault error occur (available in SPI mode only)
1054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      5. SPI_I2S_IT_OVR : to indicate if an Overrun error occur
1055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      6. I2S_IT_UDR : to indicate an Underrun Error occurs (available in I2S mode only).
1056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      7. I2S_FLAG_TIFRFE : to indicate a Frame Format error occurs (available in TI mode only).
1057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Interrupt Source:
1059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   -----------------
1060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_IT_TXE: specifies the interrupt source for the Tx buffer empty 
1061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                         interrupt.  
1062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                           empty interrupt.
1064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. SPI_I2S_IT_ERR : specifies the interrupt source for the errors interrupt.
1065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In this Mode it is advised to use the following functions:
1067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState);
1068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   DMA Mode
1072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ========
1073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In DMA Mode, the SPI communication can be managed by 2 DMA Channel requests:
1074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In this Mode it is advised to use the following function:
1078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     - void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState);
1079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
1081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
1082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI/I2S interrupts.
1086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to be enabled or disabled. 
1089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Tx buffer empty interrupt mask
1091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Rx buffer not empty interrupt mask
1092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_ERR: Error interrupt mask
1093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the specified SPI interrupt.
1094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
1095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
1098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25977              		.loc 1 1098 0
 25978              		.cfi_startproc
 25979              		@ args = 0, pretend = 0, frame = 16
 25980              		@ frame_needed = 1, uses_anonymous_args = 0
 25981              		@ link register save eliminated.
 25982 0754 80B4     		push	{r7}
 25983              	.LCFI60:
 25984              		.cfi_def_cfa_offset 4
 25985 0756 85B0     		sub	sp, sp, #20
 25986              	.LCFI61:
 25987              		.cfi_def_cfa_offset 24
 25988 0758 00AF     		add	r7, sp, #0
 25989              		.cfi_offset 7, -4
 25990              	.LCFI62:
 25991              		.cfi_def_cfa_register 7
 25992 075a 7860     		str	r0, [r7, #4]
 25993 075c 1346     		mov	r3, r2
 25994 075e 0A46     		mov	r2, r1
 25995 0760 FA70     		strb	r2, [r7, #3]
 25996 0762 BB70     		strb	r3, [r7, #2]
1099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0 ;
 25997              		.loc 1 1099 0
 25998 0764 4FF00003 		mov	r3, #0
 25999 0768 FB81     		strh	r3, [r7, #14]	@ movhi
 26000 076a 4FF00003 		mov	r3, #0
 26001 076e BB81     		strh	r3, [r7, #12]	@ movhi
1100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
1101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
1105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI IT index */
1107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = SPI_I2S_IT >> 4;
 26002              		.loc 1 1107 0
 26003 0770 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26004 0772 4FEA1313 		lsr	r3, r3, #4
 26005 0776 DBB2     		uxtb	r3, r3
 26006 0778 FB81     		strh	r3, [r7, #14]	@ movhi
1108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set the IT mask */
1110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = (uint16_t)1 << (uint16_t)itpos;
 26007              		.loc 1 1110 0
 26008 077a FB89     		ldrh	r3, [r7, #14]
 26009 077c 4FF00102 		mov	r2, #1
 26010 0780 02FA03F3 		lsl	r3, r2, r3
 26011 0784 BB81     		strh	r3, [r7, #12]	@ movhi
1111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 26012              		.loc 1 1112 0
 26013 0786 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 26014 0788 002B     		cmp	r3, #0
 26015 078a 09D0     		beq	.L60
1113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI interrupt */
1115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= itmask;
 26016              		.loc 1 1115 0
 26017 078c 7B68     		ldr	r3, [r7, #4]
 26018 078e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 26019 0790 9AB2     		uxth	r2, r3
 26020 0792 BB89     		ldrh	r3, [r7, #12]	@ movhi
 26021 0794 42EA0303 		orr	r3, r2, r3
 26022 0798 9AB2     		uxth	r2, r3
 26023 079a 7B68     		ldr	r3, [r7, #4]
 26024 079c 9A80     		strh	r2, [r3, #4]	@ movhi
 26025 079e 0BE0     		b	.L59
 26026              	.L60:
1116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI interrupt */
1120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~itmask;
 26027              		.loc 1 1120 0
 26028 07a0 7B68     		ldr	r3, [r7, #4]
 26029 07a2 9B88     		ldrh	r3, [r3, #4]	@ movhi
 26030 07a4 9AB2     		uxth	r2, r3
 26031 07a6 BB89     		ldrh	r3, [r7, #12]	@ movhi
 26032 07a8 6FEA0303 		mvn	r3, r3
 26033 07ac 9BB2     		uxth	r3, r3
 26034 07ae 02EA0303 		and	r3, r2, r3
 26035 07b2 9AB2     		uxth	r2, r3
 26036 07b4 7B68     		ldr	r3, [r7, #4]
 26037 07b6 9A80     		strh	r2, [r3, #4]	@ movhi
 26038              	.L59:
1121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 26039              		.loc 1 1122 0
 26040 07b8 07F11407 		add	r7, r7, #20
 26041 07bc BD46     		mov	sp, r7
 26042 07be 80BC     		pop	{r7}
 26043 07c0 7047     		bx	lr
 26044              		.cfi_endproc
 26045              	.LFE130:
 26047 07c2 00BF     		.align	2
 26048              		.global	SPI_I2S_GetFlagStatus
 26049              		.thumb
 26050              		.thumb_func
 26052              	SPI_I2S_GetFlagStatus:
 26053              	.LFB131:
1123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx flag is set or not.
1126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to check. 
1129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TXE: Transmit buffer empty flag.
1131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_RXNE: Receive buffer not empty flag.
1132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_BSY: Busy flag.
1133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_OVR: Overrun flag.
1134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_MODF: Mode Fault flag.
1135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.
1136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TIFRFE: Format Error.
1137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_UDR: Underrun Error flag.
1138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
1139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_FLAG (SET or RESET).
1140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 26054              		.loc 1 1142 0
 26055              		.cfi_startproc
 26056              		@ args = 0, pretend = 0, frame = 16
 26057              		@ frame_needed = 1, uses_anonymous_args = 0
 26058              		@ link register save eliminated.
 26059 07c4 80B4     		push	{r7}
 26060              	.LCFI63:
 26061              		.cfi_def_cfa_offset 4
 26062 07c6 85B0     		sub	sp, sp, #20
 26063              	.LCFI64:
 26064              		.cfi_def_cfa_offset 24
 26065 07c8 00AF     		add	r7, sp, #0
 26066              		.cfi_offset 7, -4
 26067              	.LCFI65:
 26068              		.cfi_def_cfa_register 7
 26069 07ca 7860     		str	r0, [r7, #4]
 26070 07cc 0B46     		mov	r3, r1
 26071 07ce 7B80     		strh	r3, [r7, #2]	@ movhi
1143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   FlagStatus bitstatus = RESET;
 26072              		.loc 1 1143 0
 26073 07d0 4FF00003 		mov	r3, #0
 26074 07d4 FB73     		strb	r3, [r7, #15]
1144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
1147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
1148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI flag */
1149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 26075              		.loc 1 1149 0
 26076 07d6 7B68     		ldr	r3, [r7, #4]
 26077 07d8 1B89     		ldrh	r3, [r3, #8]	@ movhi
 26078 07da 9AB2     		uxth	r2, r3
 26079 07dc 7B88     		ldrh	r3, [r7, #2]	@ movhi
 26080 07de 02EA0303 		and	r3, r2, r3
 26081 07e2 9BB2     		uxth	r3, r3
 26082 07e4 002B     		cmp	r3, #0
 26083 07e6 03D0     		beq	.L63
1150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is set */
1152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = SET;
 26084              		.loc 1 1152 0
 26085 07e8 4FF00103 		mov	r3, #1
 26086 07ec FB73     		strb	r3, [r7, #15]
 26087 07ee 02E0     		b	.L64
 26088              	.L63:
1153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is reset */
1157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = RESET;
 26089              		.loc 1 1157 0
 26090 07f0 4FF00003 		mov	r3, #0
 26091 07f4 FB73     		strb	r3, [r7, #15]
 26092              	.L64:
1158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_FLAG status */
1160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return  bitstatus;
 26093              		.loc 1 1160 0
 26094 07f6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 26095              		.loc 1 1161 0
 26096 07f8 1846     		mov	r0, r3
 26097 07fa 07F11407 		add	r7, r7, #20
 26098 07fe BD46     		mov	sp, r7
 26099 0800 80BC     		pop	{r7}
 26100 0802 7047     		bx	lr
 26101              		.cfi_endproc
 26102              	.LFE131:
 26104              		.align	2
 26105              		.global	SPI_I2S_ClearFlag
 26106              		.thumb
 26107              		.thumb_func
 26109              	SPI_I2S_ClearFlag:
 26110              	.LFB132:
1162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) flag.
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to clear. 
1168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This function clears only CRCERR flag.
1169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.  
1170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
1171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   OVR (OverRun error) flag is cleared by software sequence: a read 
1172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_DR register (SPI_I2S_ReceiveData()) followed by a read 
1173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()).
1174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun error) flag is cleared by a read operation to 
1175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_SR register (SPI_I2S_GetFlagStatus()).   
1176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) flag is cleared by software sequence: a read/write 
1177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by a 
1178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
1179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
1180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 26111              		.loc 1 1183 0
 26112              		.cfi_startproc
 26113              		@ args = 0, pretend = 0, frame = 8
 26114              		@ frame_needed = 1, uses_anonymous_args = 0
 26115              		@ link register save eliminated.
 26116 0804 80B4     		push	{r7}
 26117              	.LCFI66:
 26118              		.cfi_def_cfa_offset 4
 26119 0806 83B0     		sub	sp, sp, #12
 26120              	.LCFI67:
 26121              		.cfi_def_cfa_offset 16
 26122 0808 00AF     		add	r7, sp, #0
 26123              		.cfi_offset 7, -4
 26124              	.LCFI68:
 26125              		.cfi_def_cfa_register 7
 26126 080a 7860     		str	r0, [r7, #4]
 26127 080c 0B46     		mov	r3, r1
 26128 080e 7B80     		strh	r3, [r7, #2]	@ movhi
1184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
1187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
1188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) flag */
1189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 26129              		.loc 1 1189 0
 26130 0810 7B88     		ldrh	r3, [r7, #2]	@ movhi
 26131 0812 6FEA0303 		mvn	r3, r3
 26132 0816 9AB2     		uxth	r2, r3
 26133 0818 7B68     		ldr	r3, [r7, #4]
 26134 081a 1A81     		strh	r2, [r3, #8]	@ movhi
1190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 26135              		.loc 1 1190 0
 26136 081c 07F10C07 		add	r7, r7, #12
 26137 0820 BD46     		mov	sp, r7
 26138 0822 80BC     		pop	{r7}
 26139 0824 7047     		bx	lr
 26140              		.cfi_endproc
 26141              	.LFE132:
 26143 0826 00BF     		.align	2
 26144              		.global	SPI_I2S_GetITStatus
 26145              		.thumb
 26146              		.thumb_func
 26148              	SPI_I2S_GetITStatus:
 26149              	.LFB133:
1191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx interrupt has occurred or not.
1194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to check. 
1197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Transmit buffer empty interrupt.
1199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Receive buffer not empty interrupt.
1200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_OVR: Overrun interrupt.
1201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_MODF: Mode Fault interrupt.
1202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_IT_UDR: Underrun interrupt.  
1204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
1205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_IT (SET or RESET).
1206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 26150              		.loc 1 1208 0
 26151              		.cfi_startproc
 26152              		@ args = 0, pretend = 0, frame = 16
 26153              		@ frame_needed = 1, uses_anonymous_args = 0
 26154              		@ link register save eliminated.
 26155 0828 80B4     		push	{r7}
 26156              	.LCFI69:
 26157              		.cfi_def_cfa_offset 4
 26158 082a 85B0     		sub	sp, sp, #20
 26159              	.LCFI70:
 26160              		.cfi_def_cfa_offset 24
 26161 082c 00AF     		add	r7, sp, #0
 26162              		.cfi_offset 7, -4
 26163              	.LCFI71:
 26164              		.cfi_def_cfa_register 7
 26165 082e 7860     		str	r0, [r7, #4]
 26166 0830 0B46     		mov	r3, r1
 26167 0832 FB70     		strb	r3, [r7, #3]
1209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ITStatus bitstatus = RESET;
 26168              		.loc 1 1209 0
 26169 0834 4FF00003 		mov	r3, #0
 26170 0838 FB73     		strb	r3, [r7, #15]
1210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 26171              		.loc 1 1210 0
 26172 083a 4FF00003 		mov	r3, #0
 26173 083e BB81     		strh	r3, [r7, #12]	@ movhi
 26174 0840 4FF00003 		mov	r3, #0
 26175 0844 7B81     		strh	r3, [r7, #10]	@ movhi
 26176 0846 4FF00003 		mov	r3, #0
 26177 084a 3B81     		strh	r3, [r7, #8]	@ movhi
1211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
1215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT index */
1217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 26178              		.loc 1 1217 0
 26179 084c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26180 084e 03F00F03 		and	r3, r3, #15
 26181 0852 4FF00102 		mov	r2, #1
 26182 0856 02FA03F3 		lsl	r3, r2, r3
 26183 085a BB81     		strh	r3, [r7, #12]	@ movhi
1218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT IT mask */
1220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = SPI_I2S_IT >> 4;
 26184              		.loc 1 1220 0
 26185 085c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26186 085e 4FEA1313 		lsr	r3, r3, #4
 26187 0862 DBB2     		uxtb	r3, r3
 26188 0864 7B81     		strh	r3, [r7, #10]	@ movhi
1221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set the IT mask */
1223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = 0x01 << itmask;
 26189              		.loc 1 1223 0
 26190 0866 7B89     		ldrh	r3, [r7, #10]
 26191 0868 4FF00102 		mov	r2, #1
 26192 086c 02FA03F3 		lsl	r3, r2, r3
 26193 0870 7B81     		strh	r3, [r7, #10]	@ movhi
1224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT enable bit status */
1226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   enablestatus = (SPIx->CR2 & itmask) ;
 26194              		.loc 1 1226 0
 26195 0872 7B68     		ldr	r3, [r7, #4]
 26196 0874 9B88     		ldrh	r3, [r3, #4]	@ movhi
 26197 0876 9AB2     		uxth	r2, r3
 26198 0878 7B89     		ldrh	r3, [r7, #10]	@ movhi
 26199 087a 02EA0303 		and	r3, r2, r3
 26200 087e 3B81     		strh	r3, [r7, #8]	@ movhi
1227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI interrupt */
1229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 26201              		.loc 1 1229 0
 26202 0880 7B68     		ldr	r3, [r7, #4]
 26203 0882 1B89     		ldrh	r3, [r3, #8]	@ movhi
 26204 0884 9AB2     		uxth	r2, r3
 26205 0886 BB89     		ldrh	r3, [r7, #12]	@ movhi
 26206 0888 02EA0303 		and	r3, r2, r3
 26207 088c 9BB2     		uxth	r3, r3
 26208 088e 002B     		cmp	r3, #0
 26209 0890 06D0     		beq	.L67
 26210              		.loc 1 1229 0 is_stmt 0 discriminator 1
 26211 0892 3B89     		ldrh	r3, [r7, #8]
 26212 0894 002B     		cmp	r3, #0
 26213 0896 03D0     		beq	.L67
1230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is set */
1232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = SET;
 26214              		.loc 1 1232 0 is_stmt 1
 26215 0898 4FF00103 		mov	r3, #1
 26216 089c FB73     		strb	r3, [r7, #15]
 26217 089e 02E0     		b	.L68
 26218              	.L67:
1233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is reset */
1237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = RESET;
 26219              		.loc 1 1237 0
 26220 08a0 4FF00003 		mov	r3, #0
 26221 08a4 FB73     		strb	r3, [r7, #15]
 26222              	.L68:
1238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_IT status */
1240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return bitstatus;
 26223              		.loc 1 1240 0
 26224 08a6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 26225              		.loc 1 1241 0
 26226 08a8 1846     		mov	r0, r3
 26227 08aa 07F11407 		add	r7, r7, #20
 26228 08ae BD46     		mov	sp, r7
 26229 08b0 80BC     		pop	{r7}
 26230 08b2 7047     		bx	lr
 26231              		.cfi_endproc
 26232              	.LFE133:
 26234              		.align	2
 26235              		.global	SPI_I2S_ClearITPendingBit
 26236              		.thumb
 26237              		.thumb_func
 26239              	SPI_I2S_ClearITPendingBit:
 26240              	.LFB134:
1242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) interrupt pending bit.
1245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt pending bit to clear.
1248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         This function clears only CRCERR interrupt pending bit.   
1249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
1251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   OVR (OverRun Error) interrupt pending bit is cleared by software 
1252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          sequence: a read operation to SPI_DR register (SPI_I2S_ReceiveData()) 
1253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          followed by a read operation to SPI_SR register (SPI_I2S_GetITStatus()).
1254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun Error) interrupt pending bit is cleared by a read 
1255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetITStatus()).   
1256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) interrupt pending bit is cleared by software sequence:
1257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          a read/write operation to SPI_SR register (SPI_I2S_GetITStatus()) 
1258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
1259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          the SPI).
1260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 26241              		.loc 1 1263 0
 26242              		.cfi_startproc
 26243              		@ args = 0, pretend = 0, frame = 16
 26244              		@ frame_needed = 1, uses_anonymous_args = 0
 26245              		@ link register save eliminated.
 26246 08b4 80B4     		push	{r7}
 26247              	.LCFI72:
 26248              		.cfi_def_cfa_offset 4
 26249 08b6 85B0     		sub	sp, sp, #20
 26250              	.LCFI73:
 26251              		.cfi_def_cfa_offset 24
 26252 08b8 00AF     		add	r7, sp, #0
 26253              		.cfi_offset 7, -4
 26254              	.LCFI74:
 26255              		.cfi_def_cfa_register 7
 26256 08ba 7860     		str	r0, [r7, #4]
 26257 08bc 0B46     		mov	r3, r1
 26258 08be FB70     		strb	r3, [r7, #3]
1264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0;
 26259              		.loc 1 1264 0
 26260 08c0 4FF00003 		mov	r3, #0
 26261 08c4 FB81     		strh	r3, [r7, #14]	@ movhi
1265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
1268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S IT index */
1270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 26262              		.loc 1 1270 0
 26263 08c6 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26264 08c8 03F00F03 		and	r3, r3, #15
 26265 08cc 4FF00102 		mov	r2, #1
 26266 08d0 02FA03F3 		lsl	r3, r2, r3
 26267 08d4 FB81     		strh	r3, [r7, #14]	@ movhi
1271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
1273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~itpos;
 26268              		.loc 1 1273 0
 26269 08d6 FB89     		ldrh	r3, [r7, #14]	@ movhi
 26270 08d8 6FEA0303 		mvn	r3, r3
 26271 08dc 9AB2     		uxth	r2, r3
 26272 08de 7B68     		ldr	r3, [r7, #4]
 26273 08e0 1A81     		strh	r2, [r3, #8]	@ movhi
1274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 26274              		.loc 1 1274 0
 26275 08e2 07F11407 		add	r7, r7, #20
 26276 08e6 BD46     		mov	sp, r7
 26277 08e8 80BC     		pop	{r7}
 26278 08ea 7047     		bx	lr
 26279              		.cfi_endproc
 26280              	.LFE134:
 26282              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_spi.c
     /tmp/ccTdfJbC.s:24581  .text:00000000 $t
     /tmp/ccTdfJbC.s:24586  .text:00000000 SPI_I2S_DeInit
     /tmp/ccTdfJbC.s:24655  .text:00000074 $d
     /tmp/ccTdfJbC.s:24661  .text:00000080 $t
     /tmp/ccTdfJbC.s:24666  .text:00000080 SPI_Init
     /tmp/ccTdfJbC.s:24772  .text:00000118 I2S_Init
     /tmp/ccTdfJbC.s:25024  .text:00000308 $d
     /tmp/ccTdfJbC.s:25030  .text:00000314 $t
     /tmp/ccTdfJbC.s:25035  .text:00000314 SPI_StructInit
     /tmp/ccTdfJbC.s:25102  .text:00000370 I2S_StructInit
     /tmp/ccTdfJbC.s:25157  .text:000003b4 SPI_Cmd
     /tmp/ccTdfJbC.s:25213  .text:000003f4 I2S_Cmd
     /tmp/ccTdfJbC.s:25269  .text:00000434 SPI_DataSizeConfig
     /tmp/ccTdfJbC.s:25319  .text:0000046c SPI_BiDirectionalLineConfig
     /tmp/ccTdfJbC.s:25375  .text:000004ac SPI_NSSInternalSoftwareConfig
     /tmp/ccTdfJbC.s:25432  .text:000004f0 SPI_SSOutputCmd
     /tmp/ccTdfJbC.s:25488  .text:00000530 SPI_TIModeCmd
     /tmp/ccTdfJbC.s:25544  .text:00000570 I2S_FullDuplexConfig
     /tmp/ccTdfJbC.s:25655  .text:0000061c SPI_I2S_ReceiveData
     /tmp/ccTdfJbC.s:25691  .text:00000638 SPI_I2S_SendData
     /tmp/ccTdfJbC.s:25728  .text:00000654 SPI_CalculateCRC
     /tmp/ccTdfJbC.s:25784  .text:00000694 SPI_TransmitCRC
     /tmp/ccTdfJbC.s:25823  .text:000006b8 SPI_GetCRC
     /tmp/ccTdfJbC.s:25877  .text:000006ec SPI_GetCRCPolynomial
     /tmp/ccTdfJbC.s:25913  .text:00000708 SPI_I2S_DMACmd
     /tmp/ccTdfJbC.s:25975  .text:00000754 SPI_I2S_ITConfig
     /tmp/ccTdfJbC.s:26052  .text:000007c4 SPI_I2S_GetFlagStatus
     /tmp/ccTdfJbC.s:26109  .text:00000804 SPI_I2S_ClearFlag
     /tmp/ccTdfJbC.s:26148  .text:00000828 SPI_I2S_GetITStatus
     /tmp/ccTdfJbC.s:26239  .text:000008b4 SPI_I2S_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
