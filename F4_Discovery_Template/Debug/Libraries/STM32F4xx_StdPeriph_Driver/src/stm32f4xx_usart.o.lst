   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f4xx_usart.c"
  23              	.Ltext0:
  24              		.file 1 "../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c"
 24578              		.align	2
 24579              		.global	USART_DeInit
 24580              		.thumb
 24581              		.thumb_func
 24583              	USART_DeInit:
 24584              	.LFB110:
   1:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
   2:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
   3:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @file    stm32f4xx_usart.c
   4:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @version V1.0.2
   6:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @date    05-March-2012
   7:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          functionalities of the Universal synchronous asynchronous receiver
   9:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          transmitter (USART):           
  10:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Initialization and Configuration
  11:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Data transfers
  12:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Multi-Processor Communication
  13:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - LIN mode
  14:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Half-duplex mode
  15:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Smartcard mode
  16:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - IrDA mode
  17:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - DMA transfers management
  18:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Interrupts and flags management 
  19:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           
  20:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  @verbatim
  21:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *      
  22:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          ===================================================================
  23:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                                 How to use this driver
  24:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          ===================================================================
  25:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          1. Enable peripheral clock using the follwoing functions
  26:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             RCC_APB2PeriphClockCmd(RCC_APB2Periph_USARTx, ENABLE) for USART1 and USART6 
  27:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE) for USART2, USART3, UART4 or 
  28:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  29:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          2.  According to the USART mode, enable the GPIO clocks using 
  30:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *              RCC_AHB1PeriphClockCmd() function. (The I/O can be TX, RX, CTS, 
  31:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *              or/and SCLK). 
  32:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  33:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          3. Peripheral's alternate function: 
  34:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  35:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  36:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Configure the desired pin in alternate function by:
  37:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  38:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  39:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  40:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Call GPIO_Init() function
  41:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        
  42:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          4. Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware 
  43:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             flow control and Mode(Receiver/Transmitter) using the USART_Init()
  44:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             function.
  45:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  46:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          5. For synchronous mode, enable the clock and program the polarity,
  47:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             phase and last bit using the USART_ClockInit() function.
  48:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  49:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          5. Enable the NVIC and the corresponding interrupt using the function 
  50:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             USART_ITConfig() if you need to use interrupt mode. 
  51:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  52:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          6. When using the DMA mode 
  53:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   - Configure the DMA using DMA_Init() function
  54:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   - Active the needed channel Request using USART_DMACmd() function
  55:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * 
  56:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          7. Enable the USART using the USART_Cmd() function.
  57:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * 
  58:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          8. Enable the DMA using the DMA_Cmd() function, when using DMA mode. 
  59:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  60:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          Refer to Multi-Processor, LIN, half-duplex, Smartcard, IrDA sub-sections
  61:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          for more details
  62:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          
  63:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          In order to reach higher communication baudrates, it is possible to
  64:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          enable the oversampling by 8 mode using the function USART_OverSampling8Cmd().
  65:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This function should be called after enabling the USART clock (RCC_APBxPeriphClockCmd(
  66:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          and before calling the function USART_Init().
  67:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          
  68:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  @endverbatim
  69:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        
  70:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
  71:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @attention
  72:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  73:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  74:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  75:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  76:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * You may not use this file except in compliance with the License.
  77:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * You may obtain a copy of the License at:
  78:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  79:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  80:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  81:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * Unless required by applicable law or agreed to in writing, software 
  82:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  83:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  84:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * See the License for the specific language governing permissions and
  85:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * limitations under the License.
  86:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  87:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
  88:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */ 
  89:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  90:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Includes ------------------------------------------------------------------*/
  91:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_usart.h"
  92:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_rcc.h"
  93:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  94:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  95:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
  96:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
  97:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  98:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART 
  99:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief USART driver modules
 100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private typedef -----------------------------------------------------------*/
 104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private define ------------------------------------------------------------*/
 105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR1 register clear Mask ((~(uint16_t)0xE9F3)) */
 107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR1_CLEAR_MASK            ((uint16_t)(USART_CR1_M | USART_CR1_PCE | \
 108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_PS | USART_CR1_TE | \
 109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_RE))
 110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR2 register clock bits clear Mask ((~(uint16_t)0xF0FF)) */
 112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR2_CLOCK_CLEAR_MASK      ((uint16_t)(USART_CR2_CLKEN | USART_CR2_CPOL | \
 113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR2_CPHA | USART_CR2_LBCL))
 114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR3 register clear Mask ((~(uint16_t)0xFCFF)) */
 116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR3_CLEAR_MASK            ((uint16_t)(USART_CR3_RTSE | USART_CR3_CTSE))
 117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART Interrupts mask */
 119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define IT_MASK                   ((uint16_t)0x001F)
 120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private macro -------------------------------------------------------------*/
 122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private variables ---------------------------------------------------------*/
 123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private function prototypes -----------------------------------------------*/
 124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private functions ---------------------------------------------------------*/
 125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Private_Functions
 127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group1 Initialization and Configuration functions
 131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Initialization and Configuration functions 
 132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                   Initialization and Configuration functions
 136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to initialize the USART 
 139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   in asynchronous and in synchronous modes.
 140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    - For the asynchronous mode only these parameters can be configured: 
 141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Baud Rate
 142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Word Length 
 143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Stop Bit
 144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Parity: If the parity is enabled, then the MSB bit of the data written
 145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           in the data register is transmitted but is changed by the parity bit.
 146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           Depending on the frame length defined by the M bit (8-bits or 9-bits),
 147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           the possible USART frame formats are as listed in the following table:
 148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+     
 149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |   M bit |  PCE bit  |            USART frame                |
 150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------------------|---------------------------------------|             
 151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+            
 159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Hardware flow control
 160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Receiver/transmitter modes
 161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART_Init() function follows the USART  asynchronous configuration procedure
 163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   (details for the procedure are available in reference manual (RM0090)).
 164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   - For the synchronous mode in addition to the asynchronous mode parameters these 
 166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     parameters should be also configured:
 167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Clock Enabled
 168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART polarity
 169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART phase
 170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART LastBit
 171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   These parameters can be configured using the USART_ClockInit() function.
 173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 24585              		.loc 1 185 0
 24586              		.cfi_startproc
 24587              		@ args = 0, pretend = 0, frame = 8
 24588              		@ frame_needed = 1, uses_anonymous_args = 0
 24589 0000 80B5     		push	{r7, lr}
 24590              	.LCFI0:
 24591              		.cfi_def_cfa_offset 8
 24592 0002 82B0     		sub	sp, sp, #8
 24593              	.LCFI1:
 24594              		.cfi_def_cfa_offset 16
 24595 0004 00AF     		add	r7, sp, #0
 24596              		.cfi_offset 14, -4
 24597              		.cfi_offset 7, -8
 24598              	.LCFI2:
 24599              		.cfi_def_cfa_register 7
 24600 0006 7860     		str	r0, [r7, #4]
 186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USARTx == USART1)
 24601              		.loc 1 189 0
 24602 0008 7A68     		ldr	r2, [r7, #4]
 24603 000a 344B     		ldr	r3, .L8
 24604 000c 9A42     		cmp	r2, r3
 24605 000e 0CD1     		bne	.L2
 190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 24606              		.loc 1 191 0
 24607 0010 4FF01000 		mov	r0, #16
 24608 0014 4FF00101 		mov	r1, #1
 24609 0018 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 24610              		.loc 1 192 0
 24611 001c 4FF01000 		mov	r0, #16
 24612 0020 4FF00001 		mov	r1, #0
 24613 0024 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 24614 0028 53E0     		b	.L1
 24615              	.L2:
 193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART2)
 24616              		.loc 1 194 0
 24617 002a 7A68     		ldr	r2, [r7, #4]
 24618 002c 2C4B     		ldr	r3, .L8+4
 24619 002e 9A42     		cmp	r2, r3
 24620 0030 0CD1     		bne	.L4
 195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 24621              		.loc 1 196 0
 24622 0032 4FF40030 		mov	r0, #131072
 24623 0036 4FF00101 		mov	r1, #1
 24624 003a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 24625              		.loc 1 197 0
 24626 003e 4FF40030 		mov	r0, #131072
 24627 0042 4FF00001 		mov	r1, #0
 24628 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 24629 004a 42E0     		b	.L1
 24630              	.L4:
 198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART3)
 24631              		.loc 1 199 0
 24632 004c 7A68     		ldr	r2, [r7, #4]
 24633 004e 254B     		ldr	r3, .L8+8
 24634 0050 9A42     		cmp	r2, r3
 24635 0052 0CD1     		bne	.L5
 200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 24636              		.loc 1 201 0
 24637 0054 4FF48020 		mov	r0, #262144
 24638 0058 4FF00101 		mov	r1, #1
 24639 005c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 24640              		.loc 1 202 0
 24641 0060 4FF48020 		mov	r0, #262144
 24642 0064 4FF00001 		mov	r1, #0
 24643 0068 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 24644 006c 31E0     		b	.L1
 24645              	.L5:
 203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }    
 204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART4)
 24646              		.loc 1 204 0
 24647 006e 7A68     		ldr	r2, [r7, #4]
 24648 0070 1D4B     		ldr	r3, .L8+12
 24649 0072 9A42     		cmp	r2, r3
 24650 0074 0CD1     		bne	.L6
 205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 24651              		.loc 1 206 0
 24652 0076 4FF40020 		mov	r0, #524288
 24653 007a 4FF00101 		mov	r1, #1
 24654 007e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 24655              		.loc 1 207 0
 24656 0082 4FF40020 		mov	r0, #524288
 24657 0086 4FF00001 		mov	r1, #0
 24658 008a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 24659 008e 20E0     		b	.L1
 24660              	.L6:
 208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART5)
 24661              		.loc 1 209 0
 24662 0090 7A68     		ldr	r2, [r7, #4]
 24663 0092 164B     		ldr	r3, .L8+16
 24664 0094 9A42     		cmp	r2, r3
 24665 0096 0CD1     		bne	.L7
 210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 24666              		.loc 1 211 0
 24667 0098 4FF48010 		mov	r0, #1048576
 24668 009c 4FF00101 		mov	r1, #1
 24669 00a0 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 24670              		.loc 1 212 0
 24671 00a4 4FF48010 		mov	r0, #1048576
 24672 00a8 4FF00001 		mov	r1, #0
 24673 00ac FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 24674 00b0 0FE0     		b	.L1
 24675              	.L7:
 213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }     
 214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     if (USARTx == USART6)
 24676              		.loc 1 216 0
 24677 00b2 7A68     		ldr	r2, [r7, #4]
 24678 00b4 0E4B     		ldr	r3, .L8+20
 24679 00b6 9A42     		cmp	r2, r3
 24680 00b8 0BD1     		bne	.L1
 217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     { 
 218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 24681              		.loc 1 218 0
 24682 00ba 4FF02000 		mov	r0, #32
 24683 00be 4FF00101 		mov	r1, #1
 24684 00c2 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 24685              		.loc 1 219 0
 24686 00c6 4FF02000 		mov	r0, #32
 24687 00ca 4FF00001 		mov	r1, #0
 24688 00ce FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 24689              	.L1:
 220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     }
 221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 24690              		.loc 1 222 0
 24691 00d2 07F10807 		add	r7, r7, #8
 24692 00d6 BD46     		mov	sp, r7
 24693 00d8 80BD     		pop	{r7, pc}
 24694              	.L9:
 24695 00da 00BF     		.align	2
 24696              	.L8:
 24697 00dc 00100140 		.word	1073811456
 24698 00e0 00440040 		.word	1073759232
 24699 00e4 00480040 		.word	1073760256
 24700 00e8 004C0040 		.word	1073761280
 24701 00ec 00500040 		.word	1073762304
 24702 00f0 00140140 		.word	1073812480
 24703              		.cfi_endproc
 24704              	.LFE110:
 24706              		.align	2
 24707              		.global	USART_Init
 24708              		.thumb
 24709              		.thumb_func
 24711              	USART_Init:
 24712              	.LFB111:
 223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         parameters in the USART_InitStruct .
 227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
 230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         the configuration information for the specified USART peripheral.
 231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 24713              		.loc 1 234 0
 24714              		.cfi_startproc
 24715              		@ args = 0, pretend = 0, frame = 40
 24716              		@ frame_needed = 1, uses_anonymous_args = 0
 24717 00f4 80B5     		push	{r7, lr}
 24718              	.LCFI3:
 24719              		.cfi_def_cfa_offset 8
 24720 00f6 8AB0     		sub	sp, sp, #40
 24721              	.LCFI4:
 24722              		.cfi_def_cfa_offset 48
 24723 00f8 00AF     		add	r7, sp, #0
 24724              		.cfi_offset 14, -4
 24725              		.cfi_offset 7, -8
 24726              	.LCFI5:
 24727              		.cfi_def_cfa_register 7
 24728 00fa 7860     		str	r0, [r7, #4]
 24729 00fc 3960     		str	r1, [r7, #0]
 235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 24730              		.loc 1 235 0
 24731 00fe 4FF00003 		mov	r3, #0
 24732 0102 7B62     		str	r3, [r7, #36]
 24733 0104 4FF00003 		mov	r3, #0
 24734 0108 3B62     		str	r3, [r7, #32]
 236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t integerdivider = 0x00;
 24735              		.loc 1 236 0
 24736 010a 4FF00003 		mov	r3, #0
 24737 010e FB61     		str	r3, [r7, #28]
 237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t fractionaldivider = 0x00;
 24738              		.loc 1 237 0
 24739 0110 4FF00003 		mov	r3, #0
 24740 0114 BB61     		str	r3, [r7, #24]
 238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
 250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 24741              		.loc 1 256 0
 24742 0116 7B68     		ldr	r3, [r7, #4]
 24743 0118 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 24744 011a 9BB2     		uxth	r3, r3
 24745 011c 7B62     		str	r3, [r7, #36]
 257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear STOP[13:12] bits */
 259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 24746              		.loc 1 259 0
 24747 011e 7B6A     		ldr	r3, [r7, #36]
 24748 0120 23F44053 		bic	r3, r3, #12288
 24749 0124 7B62     		str	r3, [r7, #36]
 260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
 262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set STOP[13:12] bits according to USART_StopBits value */
 263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 24750              		.loc 1 263 0
 24751 0126 3B68     		ldr	r3, [r7, #0]
 24752 0128 DB88     		ldrh	r3, [r3, #6]
 24753 012a 7A6A     		ldr	r2, [r7, #36]
 24754 012c 42EA0303 		orr	r3, r2, r3
 24755 0130 7B62     		str	r3, [r7, #36]
 264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 24756              		.loc 1 266 0
 24757 0132 7B6A     		ldr	r3, [r7, #36]
 24758 0134 9AB2     		uxth	r2, r3
 24759 0136 7B68     		ldr	r3, [r7, #4]
 24760 0138 1A82     		strh	r2, [r3, #16]	@ movhi
 267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR1;
 24761              		.loc 1 269 0
 24762 013a 7B68     		ldr	r3, [r7, #4]
 24763 013c 9B89     		ldrh	r3, [r3, #12]	@ movhi
 24764 013e 9BB2     		uxth	r3, r3
 24765 0140 7B62     		str	r3, [r7, #36]
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 24766              		.loc 1 272 0
 24767 0142 7B6A     		ldr	r3, [r7, #36]
 24768 0144 23F4B053 		bic	r3, r3, #5632
 24769 0148 23F00C03 		bic	r3, r3, #12
 24770 014c 7B62     		str	r3, [r7, #36]
 273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Word Length, Parity and mode: 
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set the M bits according to USART_WordLength value 
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set PCE and PS bits according to USART_Parity value
 277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set TE and RE bits according to USART_Mode value */
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 24771              		.loc 1 278 0
 24772 014e 3B68     		ldr	r3, [r7, #0]
 24773 0150 9A88     		ldrh	r2, [r3, #4]
 24774 0152 3B68     		ldr	r3, [r7, #0]
 24775 0154 1B89     		ldrh	r3, [r3, #8]
 24776 0156 42EA0303 		orr	r3, r2, r3
 24777 015a 9AB2     		uxth	r2, r3
 279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 24778              		.loc 1 279 0
 24779 015c 3B68     		ldr	r3, [r7, #0]
 24780 015e 5B89     		ldrh	r3, [r3, #10]
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 24781              		.loc 1 278 0
 24782 0160 42EA0303 		orr	r3, r2, r3
 24783 0164 9BB2     		uxth	r3, r3
 24784 0166 7A6A     		ldr	r2, [r7, #36]
 24785 0168 42EA0303 		orr	r3, r2, r3
 24786 016c 7B62     		str	r3, [r7, #36]
 280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR1 */
 282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 = (uint16_t)tmpreg;
 24787              		.loc 1 282 0
 24788 016e 7B6A     		ldr	r3, [r7, #36]
 24789 0170 9AB2     		uxth	r2, r3
 24790 0172 7B68     		ldr	r3, [r7, #4]
 24791 0174 9A81     		strh	r2, [r3, #12]	@ movhi
 283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR3 Configuration -----------------------*/  
 285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR3;
 24792              		.loc 1 285 0
 24793 0176 7B68     		ldr	r3, [r7, #4]
 24794 0178 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 24795 017a 9BB2     		uxth	r3, r3
 24796 017c 7B62     		str	r3, [r7, #36]
 286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CTSE and RTSE bits */
 288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 24797              		.loc 1 288 0
 24798 017e 7B6A     		ldr	r3, [r7, #36]
 24799 0180 23F44073 		bic	r3, r3, #768
 24800 0184 7B62     		str	r3, [r7, #36]
 289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART HFC : 
 291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 24801              		.loc 1 292 0
 24802 0186 3B68     		ldr	r3, [r7, #0]
 24803 0188 9B89     		ldrh	r3, [r3, #12]
 24804 018a 7A6A     		ldr	r2, [r7, #36]
 24805 018c 42EA0303 		orr	r3, r2, r3
 24806 0190 7B62     		str	r3, [r7, #36]
 293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR3 */
 295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 = (uint16_t)tmpreg;
 24807              		.loc 1 295 0
 24808 0192 7B6A     		ldr	r3, [r7, #36]
 24809 0194 9AB2     		uxth	r2, r3
 24810 0196 7B68     		ldr	r3, [r7, #4]
 24811 0198 9A82     		strh	r2, [r3, #20]	@ movhi
 296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART BRR Configuration -----------------------*/
 298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Baud Rate */
 299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 24812              		.loc 1 299 0
 24813 019a 07F10803 		add	r3, r7, #8
 24814 019e 1846     		mov	r0, r3
 24815 01a0 FFF7FEFF 		bl	RCC_GetClocksFreq
 300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx == USART1) || (USARTx == USART6))
 24816              		.loc 1 301 0
 24817 01a4 7A68     		ldr	r2, [r7, #4]
 24818 01a6 3A4B     		ldr	r3, .L18
 24819 01a8 9A42     		cmp	r2, r3
 24820 01aa 03D0     		beq	.L11
 24821              		.loc 1 301 0 is_stmt 0 discriminator 1
 24822 01ac 7A68     		ldr	r2, [r7, #4]
 24823 01ae 394B     		ldr	r3, .L18+4
 24824 01b0 9A42     		cmp	r2, r3
 24825 01b2 02D1     		bne	.L12
 24826              	.L11:
 302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 24827              		.loc 1 303 0 is_stmt 1
 24828 01b4 7B69     		ldr	r3, [r7, #20]
 24829 01b6 3B62     		str	r3, [r7, #32]
 24830 01b8 01E0     		b	.L13
 24831              	.L12:
 304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 24832              		.loc 1 307 0
 24833 01ba 3B69     		ldr	r3, [r7, #16]
 24834 01bc 3B62     		str	r3, [r7, #32]
 24835              	.L13:
 308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the integer part */
 311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 24836              		.loc 1 311 0
 24837 01be 7B68     		ldr	r3, [r7, #4]
 24838 01c0 9B89     		ldrh	r3, [r3, #12]	@ movhi
 24839 01c2 9BB2     		uxth	r3, r3
 24840 01c4 9BB2     		uxth	r3, r3
 24841 01c6 1BB2     		sxth	r3, r3
 24842 01c8 002B     		cmp	r3, #0
 24843 01ca 0FDA     		bge	.L14
 312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 8 Samples */
 314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 24844              		.loc 1 314 0
 24845 01cc 3A6A     		ldr	r2, [r7, #32]
 24846 01ce 1346     		mov	r3, r2
 24847 01d0 4FEA8303 		lsl	r3, r3, #2
 24848 01d4 9B18     		adds	r3, r3, r2
 24849 01d6 4FEA8302 		lsl	r2, r3, #2
 24850 01da 9A18     		adds	r2, r3, r2
 24851 01dc 3B68     		ldr	r3, [r7, #0]
 24852 01de 1B68     		ldr	r3, [r3, #0]
 24853 01e0 4FEA4303 		lsl	r3, r3, #1
 24854 01e4 B2FBF3F3 		udiv	r3, r2, r3
 24855 01e8 FB61     		str	r3, [r7, #28]
 24856 01ea 0EE0     		b	.L15
 24857              	.L14:
 315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 16 Samples */
 319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 24858              		.loc 1 319 0
 24859 01ec 3A6A     		ldr	r2, [r7, #32]
 24860 01ee 1346     		mov	r3, r2
 24861 01f0 4FEA8303 		lsl	r3, r3, #2
 24862 01f4 9B18     		adds	r3, r3, r2
 24863 01f6 4FEA8302 		lsl	r2, r3, #2
 24864 01fa 9A18     		adds	r2, r3, r2
 24865 01fc 3B68     		ldr	r3, [r7, #0]
 24866 01fe 1B68     		ldr	r3, [r3, #0]
 24867 0200 4FEA8303 		lsl	r3, r3, #2
 24868 0204 B2FBF3F3 		udiv	r3, r2, r3
 24869 0208 FB61     		str	r3, [r7, #28]
 24870              	.L15:
 320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 24871              		.loc 1 321 0
 24872 020a FA69     		ldr	r2, [r7, #28]
 24873 020c 224B     		ldr	r3, .L18+8
 24874 020e A3FB0213 		umull	r1, r3, r3, r2
 24875 0212 4FEA5313 		lsr	r3, r3, #5
 24876 0216 4FEA0313 		lsl	r3, r3, #4
 24877 021a 7B62     		str	r3, [r7, #36]
 322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the fractional part */
 324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 24878              		.loc 1 324 0
 24879 021c 7B6A     		ldr	r3, [r7, #36]
 24880 021e 4FEA1313 		lsr	r3, r3, #4
 24881 0222 4FF06402 		mov	r2, #100
 24882 0226 02FB03F3 		mul	r3, r2, r3
 24883 022a FA69     		ldr	r2, [r7, #28]
 24884 022c D31A     		subs	r3, r2, r3
 24885 022e BB61     		str	r3, [r7, #24]
 325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Implement the fractional part in the register */
 327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 24886              		.loc 1 327 0
 24887 0230 7B68     		ldr	r3, [r7, #4]
 24888 0232 9B89     		ldrh	r3, [r3, #12]	@ movhi
 24889 0234 9BB2     		uxth	r3, r3
 24890 0236 9BB2     		uxth	r3, r3
 24891 0238 1BB2     		sxth	r3, r3
 24892 023a 002B     		cmp	r3, #0
 24893 023c 10DA     		bge	.L16
 328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 24894              		.loc 1 329 0
 24895 023e BB69     		ldr	r3, [r7, #24]
 24896 0240 4FEAC303 		lsl	r3, r3, #3
 24897 0244 03F13202 		add	r2, r3, #50
 24898 0248 134B     		ldr	r3, .L18+8
 24899 024a A3FB0213 		umull	r1, r3, r3, r2
 24900 024e 4FEA5313 		lsr	r3, r3, #5
 24901 0252 03F00703 		and	r3, r3, #7
 24902 0256 7A6A     		ldr	r2, [r7, #36]
 24903 0258 42EA0303 		orr	r3, r2, r3
 24904 025c 7B62     		str	r3, [r7, #36]
 24905 025e 0FE0     		b	.L17
 24906              	.L16:
 330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 24907              		.loc 1 333 0
 24908 0260 BB69     		ldr	r3, [r7, #24]
 24909 0262 4FEA0313 		lsl	r3, r3, #4
 24910 0266 03F13202 		add	r2, r3, #50
 24911 026a 0B4B     		ldr	r3, .L18+8
 24912 026c A3FB0213 		umull	r1, r3, r3, r2
 24913 0270 4FEA5313 		lsr	r3, r3, #5
 24914 0274 03F00F03 		and	r3, r3, #15
 24915 0278 7A6A     		ldr	r2, [r7, #36]
 24916 027a 42EA0303 		orr	r3, r2, r3
 24917 027e 7B62     		str	r3, [r7, #36]
 24918              	.L17:
 334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART BRR register */
 337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->BRR = (uint16_t)tmpreg;
 24919              		.loc 1 337 0
 24920 0280 7B6A     		ldr	r3, [r7, #36]
 24921 0282 9AB2     		uxth	r2, r3
 24922 0284 7B68     		ldr	r3, [r7, #4]
 24923 0286 1A81     		strh	r2, [r3, #8]	@ movhi
 338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 24924              		.loc 1 338 0
 24925 0288 07F12807 		add	r7, r7, #40
 24926 028c BD46     		mov	sp, r7
 24927 028e 80BD     		pop	{r7, pc}
 24928              	.L19:
 24929              		.align	2
 24930              	.L18:
 24931 0290 00100140 		.word	1073811456
 24932 0294 00140140 		.word	1073812480
 24933 0298 1F85EB51 		.word	1374389535
 24934              		.cfi_endproc
 24935              	.LFE111:
 24937              		.align	2
 24938              		.global	USART_StructInit
 24939              		.thumb
 24940              		.thumb_func
 24942              	USART_StructInit:
 24943              	.LFB112:
 339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
 343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         be initialized.
 344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 24944              		.loc 1 347 0
 24945              		.cfi_startproc
 24946              		@ args = 0, pretend = 0, frame = 8
 24947              		@ frame_needed = 1, uses_anonymous_args = 0
 24948              		@ link register save eliminated.
 24949 029c 80B4     		push	{r7}
 24950              	.LCFI6:
 24951              		.cfi_def_cfa_offset 4
 24952 029e 83B0     		sub	sp, sp, #12
 24953              	.LCFI7:
 24954              		.cfi_def_cfa_offset 16
 24955 02a0 00AF     		add	r7, sp, #0
 24956              		.cfi_offset 7, -4
 24957              	.LCFI8:
 24958              		.cfi_def_cfa_register 7
 24959 02a2 7860     		str	r0, [r7, #4]
 348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_InitStruct members default value */
 349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 24960              		.loc 1 349 0
 24961 02a4 7B68     		ldr	r3, [r7, #4]
 24962 02a6 4FF41652 		mov	r2, #9600
 24963 02aa 1A60     		str	r2, [r3, #0]
 350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 24964              		.loc 1 350 0
 24965 02ac 7B68     		ldr	r3, [r7, #4]
 24966 02ae 4FF00002 		mov	r2, #0
 24967 02b2 9A80     		strh	r2, [r3, #4]	@ movhi
 351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 24968              		.loc 1 351 0
 24969 02b4 7B68     		ldr	r3, [r7, #4]
 24970 02b6 4FF00002 		mov	r2, #0
 24971 02ba DA80     		strh	r2, [r3, #6]	@ movhi
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 24972              		.loc 1 352 0
 24973 02bc 7B68     		ldr	r3, [r7, #4]
 24974 02be 4FF00002 		mov	r2, #0
 24975 02c2 1A81     		strh	r2, [r3, #8]	@ movhi
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 24976              		.loc 1 353 0
 24977 02c4 7B68     		ldr	r3, [r7, #4]
 24978 02c6 4FF00C02 		mov	r2, #12
 24979 02ca 5A81     		strh	r2, [r3, #10]	@ movhi
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 24980              		.loc 1 354 0
 24981 02cc 7B68     		ldr	r3, [r7, #4]
 24982 02ce 4FF00002 		mov	r2, #0
 24983 02d2 9A81     		strh	r2, [r3, #12]	@ movhi
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 24984              		.loc 1 355 0
 24985 02d4 07F10C07 		add	r7, r7, #12
 24986 02d8 BD46     		mov	sp, r7
 24987 02da 80BC     		pop	{r7}
 24988 02dc 7047     		bx	lr
 24989              		.cfi_endproc
 24990              	.LFE112:
 24992 02de 00BF     		.align	2
 24993              		.global	USART_ClockInit
 24994              		.thumb
 24995              		.thumb_func
 24997              	USART_ClockInit:
 24998              	.LFB113:
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         specified parameters in the USART_ClockInitStruct .
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART peripheral.
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure that
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         contains the configuration information for the specified  USART peripheral.
 363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
 364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 24999              		.loc 1 367 0
 25000              		.cfi_startproc
 25001              		@ args = 0, pretend = 0, frame = 16
 25002              		@ frame_needed = 1, uses_anonymous_args = 0
 25003              		@ link register save eliminated.
 25004 02e0 80B4     		push	{r7}
 25005              	.LCFI9:
 25006              		.cfi_def_cfa_offset 4
 25007 02e2 85B0     		sub	sp, sp, #20
 25008              	.LCFI10:
 25009              		.cfi_def_cfa_offset 24
 25010 02e4 00AF     		add	r7, sp, #0
 25011              		.cfi_offset 7, -4
 25012              	.LCFI11:
 25013              		.cfi_def_cfa_register 7
 25014 02e6 7860     		str	r0, [r7, #4]
 25015 02e8 3960     		str	r1, [r7, #0]
 368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00;
 25016              		.loc 1 368 0
 25017 02ea 4FF00003 		mov	r3, #0
 25018 02ee FB60     		str	r3, [r7, #12]
 369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 25019              		.loc 1 377 0
 25020 02f0 7B68     		ldr	r3, [r7, #4]
 25021 02f2 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 25022 02f4 9BB2     		uxth	r3, r3
 25023 02f6 FB60     		str	r3, [r7, #12]
 378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 25024              		.loc 1 379 0
 25025 02f8 FB68     		ldr	r3, [r7, #12]
 25026 02fa 23F47063 		bic	r3, r3, #3840
 25027 02fe FB60     		str	r3, [r7, #12]
 380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 25028              		.loc 1 385 0
 25029 0300 3B68     		ldr	r3, [r7, #0]
 25030 0302 1A88     		ldrh	r2, [r3, #0]
 25031 0304 3B68     		ldr	r3, [r7, #0]
 25032 0306 5B88     		ldrh	r3, [r3, #2]
 386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 25033              		.loc 1 386 0
 25034 0308 42EA0303 		orr	r3, r2, r3
 25035 030c 9AB2     		uxth	r2, r3
 25036 030e 3B68     		ldr	r3, [r7, #0]
 25037 0310 9B88     		ldrh	r3, [r3, #4]
 25038 0312 42EA0303 		orr	r3, r2, r3
 25039 0316 9AB2     		uxth	r2, r3
 25040 0318 3B68     		ldr	r3, [r7, #0]
 25041 031a DB88     		ldrh	r3, [r3, #6]
 25042 031c 42EA0303 		orr	r3, r2, r3
 25043 0320 9BB2     		uxth	r3, r3
 385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 25044              		.loc 1 385 0
 25045 0322 FA68     		ldr	r2, [r7, #12]
 25046 0324 42EA0303 		orr	r3, r2, r3
 25047 0328 FB60     		str	r3, [r7, #12]
 387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 25048              		.loc 1 388 0
 25049 032a FB68     		ldr	r3, [r7, #12]
 25050 032c 9AB2     		uxth	r2, r3
 25051 032e 7B68     		ldr	r3, [r7, #4]
 25052 0330 1A82     		strh	r2, [r3, #16]	@ movhi
 389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25053              		.loc 1 389 0
 25054 0332 07F11407 		add	r7, r7, #20
 25055 0336 BD46     		mov	sp, r7
 25056 0338 80BC     		pop	{r7}
 25057 033a 7047     		bx	lr
 25058              		.cfi_endproc
 25059              	.LFE113:
 25061              		.align	2
 25062              		.global	USART_ClockStructInit
 25063              		.thumb
 25064              		.thumb_func
 25066              	USART_ClockStructInit:
 25067              	.LFB114:
 390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
 394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         which will be initialized.
 395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25068              		.loc 1 398 0
 25069              		.cfi_startproc
 25070              		@ args = 0, pretend = 0, frame = 8
 25071              		@ frame_needed = 1, uses_anonymous_args = 0
 25072              		@ link register save eliminated.
 25073 033c 80B4     		push	{r7}
 25074              	.LCFI12:
 25075              		.cfi_def_cfa_offset 4
 25076 033e 83B0     		sub	sp, sp, #12
 25077              	.LCFI13:
 25078              		.cfi_def_cfa_offset 16
 25079 0340 00AF     		add	r7, sp, #0
 25080              		.cfi_offset 7, -4
 25081              	.LCFI14:
 25082              		.cfi_def_cfa_register 7
 25083 0342 7860     		str	r0, [r7, #4]
 399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_ClockInitStruct members default value */
 400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 25084              		.loc 1 400 0
 25085 0344 7B68     		ldr	r3, [r7, #4]
 25086 0346 4FF00002 		mov	r2, #0
 25087 034a 1A80     		strh	r2, [r3, #0]	@ movhi
 401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 25088              		.loc 1 401 0
 25089 034c 7B68     		ldr	r3, [r7, #4]
 25090 034e 4FF00002 		mov	r2, #0
 25091 0352 5A80     		strh	r2, [r3, #2]	@ movhi
 402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 25092              		.loc 1 402 0
 25093 0354 7B68     		ldr	r3, [r7, #4]
 25094 0356 4FF00002 		mov	r2, #0
 25095 035a 9A80     		strh	r2, [r3, #4]	@ movhi
 403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 25096              		.loc 1 403 0
 25097 035c 7B68     		ldr	r3, [r7, #4]
 25098 035e 4FF00002 		mov	r2, #0
 25099 0362 DA80     		strh	r2, [r3, #6]	@ movhi
 404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25100              		.loc 1 404 0
 25101 0364 07F10C07 		add	r7, r7, #12
 25102 0368 BD46     		mov	sp, r7
 25103 036a 80BC     		pop	{r7}
 25104 036c 7047     		bx	lr
 25105              		.cfi_endproc
 25106              	.LFE114:
 25108 036e 00BF     		.align	2
 25109              		.global	USART_Cmd
 25110              		.thumb
 25111              		.thumb_func
 25113              	USART_Cmd:
 25114              	.LFB115:
 405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25115              		.loc 1 415 0
 25116              		.cfi_startproc
 25117              		@ args = 0, pretend = 0, frame = 8
 25118              		@ frame_needed = 1, uses_anonymous_args = 0
 25119              		@ link register save eliminated.
 25120 0370 80B4     		push	{r7}
 25121              	.LCFI15:
 25122              		.cfi_def_cfa_offset 4
 25123 0372 83B0     		sub	sp, sp, #12
 25124              	.LCFI16:
 25125              		.cfi_def_cfa_offset 16
 25126 0374 00AF     		add	r7, sp, #0
 25127              		.cfi_offset 7, -4
 25128              	.LCFI17:
 25129              		.cfi_def_cfa_register 7
 25130 0376 7860     		str	r0, [r7, #4]
 25131 0378 0B46     		mov	r3, r1
 25132 037a FB70     		strb	r3, [r7, #3]
 416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 25133              		.loc 1 420 0
 25134 037c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25135 037e 002B     		cmp	r3, #0
 25136 0380 08D0     		beq	.L24
 421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
 25137              		.loc 1 423 0
 25138 0382 7B68     		ldr	r3, [r7, #4]
 25139 0384 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25140 0386 9BB2     		uxth	r3, r3
 25141 0388 43F40053 		orr	r3, r3, #8192
 25142 038c 9AB2     		uxth	r2, r3
 25143 038e 7B68     		ldr	r3, [r7, #4]
 25144 0390 9A81     		strh	r2, [r3, #12]	@ movhi
 25145 0392 07E0     		b	.L23
 25146              	.L24:
 424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 25147              		.loc 1 428 0
 25148 0394 7B68     		ldr	r3, [r7, #4]
 25149 0396 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25150 0398 9BB2     		uxth	r3, r3
 25151 039a 23F40053 		bic	r3, r3, #8192
 25152 039e 9AB2     		uxth	r2, r3
 25153 03a0 7B68     		ldr	r3, [r7, #4]
 25154 03a2 9A81     		strh	r2, [r3, #12]	@ movhi
 25155              	.L23:
 429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25156              		.loc 1 430 0
 25157 03a4 07F10C07 		add	r7, r7, #12
 25158 03a8 BD46     		mov	sp, r7
 25159 03aa 80BC     		pop	{r7}
 25160 03ac 7047     		bx	lr
 25161              		.cfi_endproc
 25162              	.LFE115:
 25164 03ae 00BF     		.align	2
 25165              		.global	USART_SetPrescaler
 25166              		.thumb
 25167              		.thumb_func
 25169              	USART_SetPrescaler:
 25170              	.LFB116:
 431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the system clock prescaler.
 434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock. 
 437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The function is used for IrDA mode with UART4 and UART5.   
 438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** { 
 25171              		.loc 1 441 0
 25172              		.cfi_startproc
 25173              		@ args = 0, pretend = 0, frame = 8
 25174              		@ frame_needed = 1, uses_anonymous_args = 0
 25175              		@ link register save eliminated.
 25176 03b0 80B4     		push	{r7}
 25177              	.LCFI18:
 25178              		.cfi_def_cfa_offset 4
 25179 03b2 83B0     		sub	sp, sp, #12
 25180              	.LCFI19:
 25181              		.cfi_def_cfa_offset 16
 25182 03b4 00AF     		add	r7, sp, #0
 25183              		.cfi_offset 7, -4
 25184              	.LCFI20:
 25185              		.cfi_def_cfa_register 7
 25186 03b6 7860     		str	r0, [r7, #4]
 25187 03b8 0B46     		mov	r3, r1
 25188 03ba FB70     		strb	r3, [r7, #3]
 442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART prescaler */
 446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_GT;
 25189              		.loc 1 446 0
 25190 03bc 7B68     		ldr	r3, [r7, #4]
 25191 03be 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 25192 03c0 9BB2     		uxth	r3, r3
 25193 03c2 23F0FF03 		bic	r3, r3, #255
 25194 03c6 9AB2     		uxth	r2, r3
 25195 03c8 7B68     		ldr	r3, [r7, #4]
 25196 03ca 1A83     		strh	r2, [r3, #24]	@ movhi
 447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART prescaler */
 448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 25197              		.loc 1 448 0
 25198 03cc 7B68     		ldr	r3, [r7, #4]
 25199 03ce 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 25200 03d0 9AB2     		uxth	r2, r3
 25201 03d2 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25202 03d4 9BB2     		uxth	r3, r3
 25203 03d6 42EA0303 		orr	r3, r2, r3
 25204 03da 9AB2     		uxth	r2, r3
 25205 03dc 7B68     		ldr	r3, [r7, #4]
 25206 03de 1A83     		strh	r2, [r3, #24]	@ movhi
 449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25207              		.loc 1 449 0
 25208 03e0 07F10C07 		add	r7, r7, #12
 25209 03e4 BD46     		mov	sp, r7
 25210 03e6 80BC     		pop	{r7}
 25211 03e8 7047     		bx	lr
 25212              		.cfi_endproc
 25213              	.LFE116:
 25215 03ea 00BF     		.align	2
 25216              		.global	USART_OverSampling8Cmd
 25217              		.thumb
 25218              		.thumb_func
 25220              	USART_OverSampling8Cmd:
 25221              	.LFB117:
 450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   This function has to be called before calling USART_Init() function
 454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         in order to have correct baudrate Divider value.
 455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART 8x oversampling mode.
 458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25222              		.loc 1 462 0
 25223              		.cfi_startproc
 25224              		@ args = 0, pretend = 0, frame = 8
 25225              		@ frame_needed = 1, uses_anonymous_args = 0
 25226              		@ link register save eliminated.
 25227 03ec 80B4     		push	{r7}
 25228              	.LCFI21:
 25229              		.cfi_def_cfa_offset 4
 25230 03ee 83B0     		sub	sp, sp, #12
 25231              	.LCFI22:
 25232              		.cfi_def_cfa_offset 16
 25233 03f0 00AF     		add	r7, sp, #0
 25234              		.cfi_offset 7, -4
 25235              	.LCFI23:
 25236              		.cfi_def_cfa_register 7
 25237 03f2 7860     		str	r0, [r7, #4]
 25238 03f4 0B46     		mov	r3, r1
 25239 03f6 FB70     		strb	r3, [r7, #3]
 463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 25240              		.loc 1 467 0
 25241 03f8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25242 03fa 002B     		cmp	r3, #0
 25243 03fc 0AD0     		beq	.L28
 468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 25244              		.loc 1 470 0
 25245 03fe 7B68     		ldr	r3, [r7, #4]
 25246 0400 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25247 0402 9BB2     		uxth	r3, r3
 25248 0404 6FEA4343 		mvn	r3, r3, lsl #17
 25249 0408 6FEA5343 		mvn	r3, r3, lsr #17
 25250 040c 9AB2     		uxth	r2, r3
 25251 040e 7B68     		ldr	r3, [r7, #4]
 25252 0410 9A81     		strh	r2, [r3, #12]	@ movhi
 25253 0412 09E0     		b	.L27
 25254              	.L28:
 471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 25255              		.loc 1 475 0
 25256 0414 7B68     		ldr	r3, [r7, #4]
 25257 0416 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25258 0418 9BB2     		uxth	r3, r3
 25259 041a 4FEA4343 		lsl	r3, r3, #17
 25260 041e 4FEA5343 		lsr	r3, r3, #17
 25261 0422 9AB2     		uxth	r2, r3
 25262 0424 7B68     		ldr	r3, [r7, #4]
 25263 0426 9A81     		strh	r2, [r3, #12]	@ movhi
 25264              	.L27:
 476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }  
 25265              		.loc 1 477 0
 25266 0428 07F10C07 		add	r7, r7, #12
 25267 042c BD46     		mov	sp, r7
 25268 042e 80BC     		pop	{r7}
 25269 0430 7047     		bx	lr
 25270              		.cfi_endproc
 25271              	.LFE117:
 25273 0432 00BF     		.align	2
 25274              		.global	USART_OneBitMethodCmd
 25275              		.thumb
 25276              		.thumb_func
 25278              	USART_OneBitMethodCmd:
 25279              	.LFB118:
 478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25280              		.loc 1 488 0
 25281              		.cfi_startproc
 25282              		@ args = 0, pretend = 0, frame = 8
 25283              		@ frame_needed = 1, uses_anonymous_args = 0
 25284              		@ link register save eliminated.
 25285 0434 80B4     		push	{r7}
 25286              	.LCFI24:
 25287              		.cfi_def_cfa_offset 4
 25288 0436 83B0     		sub	sp, sp, #12
 25289              	.LCFI25:
 25290              		.cfi_def_cfa_offset 16
 25291 0438 00AF     		add	r7, sp, #0
 25292              		.cfi_offset 7, -4
 25293              	.LCFI26:
 25294              		.cfi_def_cfa_register 7
 25295 043a 7860     		str	r0, [r7, #4]
 25296 043c 0B46     		mov	r3, r1
 25297 043e FB70     		strb	r3, [r7, #3]
 489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 25298              		.loc 1 493 0
 25299 0440 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25300 0442 002B     		cmp	r3, #0
 25301 0444 08D0     		beq	.L31
 494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 25302              		.loc 1 496 0
 25303 0446 7B68     		ldr	r3, [r7, #4]
 25304 0448 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 25305 044a 9BB2     		uxth	r3, r3
 25306 044c 43F40063 		orr	r3, r3, #2048
 25307 0450 9AB2     		uxth	r2, r3
 25308 0452 7B68     		ldr	r3, [r7, #4]
 25309 0454 9A82     		strh	r2, [r3, #20]	@ movhi
 25310 0456 07E0     		b	.L30
 25311              	.L31:
 497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
 501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 25312              		.loc 1 501 0
 25313 0458 7B68     		ldr	r3, [r7, #4]
 25314 045a 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 25315 045c 9BB2     		uxth	r3, r3
 25316 045e 23F40063 		bic	r3, r3, #2048
 25317 0462 9AB2     		uxth	r2, r3
 25318 0464 7B68     		ldr	r3, [r7, #4]
 25319 0466 9A82     		strh	r2, [r3, #20]	@ movhi
 25320              	.L30:
 502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25321              		.loc 1 503 0
 25322 0468 07F10C07 		add	r7, r7, #12
 25323 046c BD46     		mov	sp, r7
 25324 046e 80BC     		pop	{r7}
 25325 0470 7047     		bx	lr
 25326              		.cfi_endproc
 25327              	.LFE118:
 25329 0472 00BF     		.align	2
 25330              		.global	USART_SendData
 25331              		.thumb
 25332              		.thumb_func
 25334              	USART_SendData:
 25335              	.LFB119:
 504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group2 Data transfers functions
 510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Data transfers functions 
 511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                             Data transfers functions
 515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART data 
 518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   transfers.
 519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   During an USART reception, data shifts in least significant bit first through 
 521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the RX pin. In this mode, the USART_DR register consists of a buffer (RDR) 
 522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   between the internal bus and the received shift register.
 523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   When a transmission is taking place, a write instruction to the USART_DR register 
 525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   stores the data in the TDR register and which is copied in the shift register 
 526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   at the end of the current transmission.
 527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The read access of the USART_DR register can be done using the USART_ReceiveData()
 529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   function and returns the RDR buffered value. Whereas a write access to the USART_DR 
 530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   can be done using USART_SendData() function and stores the written data into 
 531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   TDR buffer.
 532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  Data: the data to transmit.
 542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25336              		.loc 1 545 0
 25337              		.cfi_startproc
 25338              		@ args = 0, pretend = 0, frame = 8
 25339              		@ frame_needed = 1, uses_anonymous_args = 0
 25340              		@ link register save eliminated.
 25341 0474 80B4     		push	{r7}
 25342              	.LCFI27:
 25343              		.cfi_def_cfa_offset 4
 25344 0476 83B0     		sub	sp, sp, #12
 25345              	.LCFI28:
 25346              		.cfi_def_cfa_offset 16
 25347 0478 00AF     		add	r7, sp, #0
 25348              		.cfi_offset 7, -4
 25349              	.LCFI29:
 25350              		.cfi_def_cfa_register 7
 25351 047a 7860     		str	r0, [r7, #4]
 25352 047c 0B46     		mov	r3, r1
 25353 047e 7B80     		strh	r3, [r7, #2]	@ movhi
 546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Transmit Data */
 551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->DR = (Data & (uint16_t)0x01FF);
 25354              		.loc 1 551 0
 25355 0480 7B88     		ldrh	r3, [r7, #2]	@ movhi
 25356 0482 4FEAC353 		lsl	r3, r3, #23
 25357 0486 4FEAD353 		lsr	r3, r3, #23
 25358 048a 9AB2     		uxth	r2, r3
 25359 048c 7B68     		ldr	r3, [r7, #4]
 25360 048e 9A80     		strh	r2, [r3, #4]	@ movhi
 552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25361              		.loc 1 552 0
 25362 0490 07F10C07 		add	r7, r7, #12
 25363 0494 BD46     		mov	sp, r7
 25364 0496 80BC     		pop	{r7}
 25365 0498 7047     		bx	lr
 25366              		.cfi_endproc
 25367              	.LFE119:
 25369 049a 00BF     		.align	2
 25370              		.global	USART_ReceiveData
 25371              		.thumb
 25372              		.thumb_func
 25374              	USART_ReceiveData:
 25375              	.LFB120:
 553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The received data.
 559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25376              		.loc 1 561 0
 25377              		.cfi_startproc
 25378              		@ args = 0, pretend = 0, frame = 8
 25379              		@ frame_needed = 1, uses_anonymous_args = 0
 25380              		@ link register save eliminated.
 25381 049c 80B4     		push	{r7}
 25382              	.LCFI30:
 25383              		.cfi_def_cfa_offset 4
 25384 049e 83B0     		sub	sp, sp, #12
 25385              	.LCFI31:
 25386              		.cfi_def_cfa_offset 16
 25387 04a0 00AF     		add	r7, sp, #0
 25388              		.cfi_offset 7, -4
 25389              	.LCFI32:
 25390              		.cfi_def_cfa_register 7
 25391 04a2 7860     		str	r0, [r7, #4]
 562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Receive Data */
 566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 25392              		.loc 1 566 0
 25393 04a4 7B68     		ldr	r3, [r7, #4]
 25394 04a6 9B88     		ldrh	r3, [r3, #4]	@ movhi
 25395 04a8 9BB2     		uxth	r3, r3
 25396 04aa 4FEAC353 		lsl	r3, r3, #23
 25397 04ae 4FEAD353 		lsr	r3, r3, #23
 25398 04b2 9BB2     		uxth	r3, r3
 567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25399              		.loc 1 567 0
 25400 04b4 1846     		mov	r0, r3
 25401 04b6 07F10C07 		add	r7, r7, #12
 25402 04ba BD46     		mov	sp, r7
 25403 04bc 80BC     		pop	{r7}
 25404 04be 7047     		bx	lr
 25405              		.cfi_endproc
 25406              	.LFE120:
 25408              		.align	2
 25409              		.global	USART_SetAddress
 25410              		.thumb
 25411              		.thumb_func
 25413              	USART_SetAddress:
 25414              	.LFB121:
 568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group3 MultiProcessor Communication functions
 574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Multi-Processor Communication functions 
 575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                     Multi-Processor Communication functions
 579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   multiprocessor communication.
 583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   For instance one of the USARTs can be the master, its TX output is connected to 
 585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the RX input of the other USART. The others are slaves, their respective TX outputs 
 586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   are logically ANDed together and connected to the RX input of the master.
 587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART multiprocessor communication is possible through the following procedure:
 589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 9 bits, Stop bits, Parity, Mode transmitter 
 590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the wake up method (USART_WakeUp_IdleLine or USART_WakeUp_AddressMark)
 594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         using USART_WakeUpConfig() function only for the slaves.
 595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the USART using the USART_Cmd() function.
 596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Enter the USART slaves in mute mode using USART_ReceiverWakeUpCmd() function.
 597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART Slave exit from mute mode when receive the wake up condition.
 599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the address of the USART node.
 606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
 609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25415              		.loc 1 612 0
 25416              		.cfi_startproc
 25417              		@ args = 0, pretend = 0, frame = 8
 25418              		@ frame_needed = 1, uses_anonymous_args = 0
 25419              		@ link register save eliminated.
 25420 04c0 80B4     		push	{r7}
 25421              	.LCFI33:
 25422              		.cfi_def_cfa_offset 4
 25423 04c2 83B0     		sub	sp, sp, #12
 25424              	.LCFI34:
 25425              		.cfi_def_cfa_offset 16
 25426 04c4 00AF     		add	r7, sp, #0
 25427              		.cfi_offset 7, -4
 25428              	.LCFI35:
 25429              		.cfi_def_cfa_register 7
 25430 04c6 7860     		str	r0, [r7, #4]
 25431 04c8 0B46     		mov	r3, r1
 25432 04ca FB70     		strb	r3, [r7, #3]
 613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ADDRESS(USART_Address)); 
 616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART address */
 618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 25433              		.loc 1 618 0
 25434 04cc 7B68     		ldr	r3, [r7, #4]
 25435 04ce 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 25436 04d0 9BB2     		uxth	r3, r3
 25437 04d2 23F00F03 		bic	r3, r3, #15
 25438 04d6 9AB2     		uxth	r2, r3
 25439 04d8 7B68     		ldr	r3, [r7, #4]
 25440 04da 1A82     		strh	r2, [r3, #16]	@ movhi
 619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART address node */
 620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_Address;
 25441              		.loc 1 620 0
 25442 04dc 7B68     		ldr	r3, [r7, #4]
 25443 04de 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 25444 04e0 9AB2     		uxth	r2, r3
 25445 04e2 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25446 04e4 9BB2     		uxth	r3, r3
 25447 04e6 42EA0303 		orr	r3, r2, r3
 25448 04ea 9AB2     		uxth	r2, r3
 25449 04ec 7B68     		ldr	r3, [r7, #4]
 25450 04ee 1A82     		strh	r2, [r3, #16]	@ movhi
 621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25451              		.loc 1 621 0
 25452 04f0 07F10C07 		add	r7, r7, #12
 25453 04f4 BD46     		mov	sp, r7
 25454 04f6 80BC     		pop	{r7}
 25455 04f8 7047     		bx	lr
 25456              		.cfi_endproc
 25457              	.LFE121:
 25459 04fa 00BF     		.align	2
 25460              		.global	USART_ReceiverWakeUpCmd
 25461              		.thumb
 25462              		.thumb_func
 25464              	USART_ReceiverWakeUpCmd:
 25465              	.LFB122:
 622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Determines if the USART is in mute mode or not.
 625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART mute mode.
 628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25466              		.loc 1 632 0
 25467              		.cfi_startproc
 25468              		@ args = 0, pretend = 0, frame = 8
 25469              		@ frame_needed = 1, uses_anonymous_args = 0
 25470              		@ link register save eliminated.
 25471 04fc 80B4     		push	{r7}
 25472              	.LCFI36:
 25473              		.cfi_def_cfa_offset 4
 25474 04fe 83B0     		sub	sp, sp, #12
 25475              	.LCFI37:
 25476              		.cfi_def_cfa_offset 16
 25477 0500 00AF     		add	r7, sp, #0
 25478              		.cfi_offset 7, -4
 25479              	.LCFI38:
 25480              		.cfi_def_cfa_register 7
 25481 0502 7860     		str	r0, [r7, #4]
 25482 0504 0B46     		mov	r3, r1
 25483 0506 FB70     		strb	r3, [r7, #3]
 633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 25484              		.loc 1 637 0
 25485 0508 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25486 050a 002B     		cmp	r3, #0
 25487 050c 08D0     		beq	.L37
 638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
 640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_RWU;
 25488              		.loc 1 640 0
 25489 050e 7B68     		ldr	r3, [r7, #4]
 25490 0510 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25491 0512 9BB2     		uxth	r3, r3
 25492 0514 43F00203 		orr	r3, r3, #2
 25493 0518 9AB2     		uxth	r2, r3
 25494 051a 7B68     		ldr	r3, [r7, #4]
 25495 051c 9A81     		strh	r2, [r3, #12]	@ movhi
 25496 051e 07E0     		b	.L36
 25497              	.L37:
 641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
 645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 25498              		.loc 1 645 0
 25499 0520 7B68     		ldr	r3, [r7, #4]
 25500 0522 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25501 0524 9BB2     		uxth	r3, r3
 25502 0526 23F00203 		bic	r3, r3, #2
 25503 052a 9AB2     		uxth	r2, r3
 25504 052c 7B68     		ldr	r3, [r7, #4]
 25505 052e 9A81     		strh	r2, [r3, #12]	@ movhi
 25506              	.L36:
 646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25507              		.loc 1 647 0
 25508 0530 07F10C07 		add	r7, r7, #12
 25509 0534 BD46     		mov	sp, r7
 25510 0536 80BC     		pop	{r7}
 25511 0538 7047     		bx	lr
 25512              		.cfi_endproc
 25513              	.LFE122:
 25515 053a 00BF     		.align	2
 25516              		.global	USART_WakeUpConfig
 25517              		.thumb
 25518              		.thumb_func
 25520              	USART_WakeUpConfig:
 25521              	.LFB123:
 648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Selects the USART WakeUp method.
 650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
 656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
 659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25522              		.loc 1 659 0
 25523              		.cfi_startproc
 25524              		@ args = 0, pretend = 0, frame = 8
 25525              		@ frame_needed = 1, uses_anonymous_args = 0
 25526              		@ link register save eliminated.
 25527 053c 80B4     		push	{r7}
 25528              	.LCFI39:
 25529              		.cfi_def_cfa_offset 4
 25530 053e 83B0     		sub	sp, sp, #12
 25531              	.LCFI40:
 25532              		.cfi_def_cfa_offset 16
 25533 0540 00AF     		add	r7, sp, #0
 25534              		.cfi_offset 7, -4
 25535              	.LCFI41:
 25536              		.cfi_def_cfa_register 7
 25537 0542 7860     		str	r0, [r7, #4]
 25538 0544 0B46     		mov	r3, r1
 25539 0546 7B80     		strh	r3, [r7, #2]	@ movhi
 660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WAKEUP(USART_WakeUp));
 663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 25540              		.loc 1 664 0
 25541 0548 7B68     		ldr	r3, [r7, #4]
 25542 054a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25543 054c 9BB2     		uxth	r3, r3
 25544 054e 23F40063 		bic	r3, r3, #2048
 25545 0552 9AB2     		uxth	r2, r3
 25546 0554 7B68     		ldr	r3, [r7, #4]
 25547 0556 9A81     		strh	r2, [r3, #12]	@ movhi
 665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 25548              		.loc 1 665 0
 25549 0558 7B68     		ldr	r3, [r7, #4]
 25550 055a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25551 055c 9AB2     		uxth	r2, r3
 25552 055e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 25553 0560 42EA0303 		orr	r3, r2, r3
 25554 0564 9AB2     		uxth	r2, r3
 25555 0566 7B68     		ldr	r3, [r7, #4]
 25556 0568 9A81     		strh	r2, [r3, #12]	@ movhi
 666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25557              		.loc 1 666 0
 25558 056a 07F10C07 		add	r7, r7, #12
 25559 056e BD46     		mov	sp, r7
 25560 0570 80BC     		pop	{r7}
 25561 0572 7047     		bx	lr
 25562              		.cfi_endproc
 25563              	.LFE123:
 25565              		.align	2
 25566              		.global	USART_LINBreakDetectLengthConfig
 25567              		.thumb
 25568              		.thumb_func
 25570              	USART_LINBreakDetectLengthConfig:
 25571              	.LFB124:
 667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group4 LIN mode functions
 673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   LIN mode functions 
 674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                 LIN mode functions
 678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART LIN 
 681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Mode communication.
 682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In LIN mode, 8-bit data format with 1 stop bit is required in accordance with 
 684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the LIN standard.
 685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Only this LIN Feature is supported by the USART IP:
 687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     - LIN Master Synchronous Break send capability and LIN slave break detection
 688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       capability :  13-bit break generation and 10/11 bit break detection
 689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART LIN Master transmitter communication is possible through the following procedure:
 692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_Init() function.
 695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Enable the LIN mode using the USART_LINCmd() function.
 697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Send the break character using USART_SendBreak() function.
 698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART LIN Master receiver communication is possible through the following procedure:
 700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_Init() function.
 703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the break detection length using the USART_LINBreakDetectLengthConfig()
 705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the LIN mode using the USART_LINCmd() function.
 707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In LIN mode, the following bits must be kept cleared:
 710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - CLKEN in the USART_CR2 register,
 711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - STOP[1:0], SCEN, HDSEL and IREN in the USART_CR3 register.
 712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the USART LIN Break detection length.
 719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
 722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
 724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
 725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
 728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25572              		.loc 1 728 0
 25573              		.cfi_startproc
 25574              		@ args = 0, pretend = 0, frame = 8
 25575              		@ frame_needed = 1, uses_anonymous_args = 0
 25576              		@ link register save eliminated.
 25577 0574 80B4     		push	{r7}
 25578              	.LCFI42:
 25579              		.cfi_def_cfa_offset 4
 25580 0576 83B0     		sub	sp, sp, #12
 25581              	.LCFI43:
 25582              		.cfi_def_cfa_offset 16
 25583 0578 00AF     		add	r7, sp, #0
 25584              		.cfi_offset 7, -4
 25585              	.LCFI44:
 25586              		.cfi_def_cfa_register 7
 25587 057a 7860     		str	r0, [r7, #4]
 25588 057c 0B46     		mov	r3, r1
 25589 057e 7B80     		strh	r3, [r7, #2]	@ movhi
 729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 25590              		.loc 1 733 0
 25591 0580 7B68     		ldr	r3, [r7, #4]
 25592 0582 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 25593 0584 9BB2     		uxth	r3, r3
 25594 0586 23F02003 		bic	r3, r3, #32
 25595 058a 9AB2     		uxth	r2, r3
 25596 058c 7B68     		ldr	r3, [r7, #4]
 25597 058e 1A82     		strh	r2, [r3, #16]	@ movhi
 734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 25598              		.loc 1 734 0
 25599 0590 7B68     		ldr	r3, [r7, #4]
 25600 0592 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 25601 0594 9AB2     		uxth	r2, r3
 25602 0596 7B88     		ldrh	r3, [r7, #2]	@ movhi
 25603 0598 42EA0303 		orr	r3, r2, r3
 25604 059c 9AB2     		uxth	r2, r3
 25605 059e 7B68     		ldr	r3, [r7, #4]
 25606 05a0 1A82     		strh	r2, [r3, #16]	@ movhi
 735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25607              		.loc 1 735 0
 25608 05a2 07F10C07 		add	r7, r7, #12
 25609 05a6 BD46     		mov	sp, r7
 25610 05a8 80BC     		pop	{r7}
 25611 05aa 7047     		bx	lr
 25612              		.cfi_endproc
 25613              	.LFE124:
 25615              		.align	2
 25616              		.global	USART_LINCmd
 25617              		.thumb
 25618              		.thumb_func
 25620              	USART_LINCmd:
 25621              	.LFB125:
 736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's LIN mode.
 739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART LIN mode.
 742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25622              		.loc 1 746 0
 25623              		.cfi_startproc
 25624              		@ args = 0, pretend = 0, frame = 8
 25625              		@ frame_needed = 1, uses_anonymous_args = 0
 25626              		@ link register save eliminated.
 25627 05ac 80B4     		push	{r7}
 25628              	.LCFI45:
 25629              		.cfi_def_cfa_offset 4
 25630 05ae 83B0     		sub	sp, sp, #12
 25631              	.LCFI46:
 25632              		.cfi_def_cfa_offset 16
 25633 05b0 00AF     		add	r7, sp, #0
 25634              		.cfi_offset 7, -4
 25635              	.LCFI47:
 25636              		.cfi_def_cfa_register 7
 25637 05b2 7860     		str	r0, [r7, #4]
 25638 05b4 0B46     		mov	r3, r1
 25639 05b6 FB70     		strb	r3, [r7, #3]
 747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 25640              		.loc 1 751 0
 25641 05b8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25642 05ba 002B     		cmp	r3, #0
 25643 05bc 08D0     		beq	.L42
 752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 25644              		.loc 1 754 0
 25645 05be 7B68     		ldr	r3, [r7, #4]
 25646 05c0 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 25647 05c2 9BB2     		uxth	r3, r3
 25648 05c4 43F48043 		orr	r3, r3, #16384
 25649 05c8 9AB2     		uxth	r2, r3
 25650 05ca 7B68     		ldr	r3, [r7, #4]
 25651 05cc 1A82     		strh	r2, [r3, #16]	@ movhi
 25652 05ce 07E0     		b	.L41
 25653              	.L42:
 755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
 759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 25654              		.loc 1 759 0
 25655 05d0 7B68     		ldr	r3, [r7, #4]
 25656 05d2 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 25657 05d4 9BB2     		uxth	r3, r3
 25658 05d6 23F48043 		bic	r3, r3, #16384
 25659 05da 9AB2     		uxth	r2, r3
 25660 05dc 7B68     		ldr	r3, [r7, #4]
 25661 05de 1A82     		strh	r2, [r3, #16]	@ movhi
 25662              	.L41:
 760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25663              		.loc 1 761 0
 25664 05e0 07F10C07 		add	r7, r7, #12
 25665 05e4 BD46     		mov	sp, r7
 25666 05e6 80BC     		pop	{r7}
 25667 05e8 7047     		bx	lr
 25668              		.cfi_endproc
 25669              	.LFE125:
 25671 05ea 00BF     		.align	2
 25672              		.global	USART_SendBreak
 25673              		.thumb
 25674              		.thumb_func
 25676              	USART_SendBreak:
 25677              	.LFB126:
 762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits break characters.
 765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendBreak(USART_TypeDef* USARTx)
 770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25678              		.loc 1 770 0
 25679              		.cfi_startproc
 25680              		@ args = 0, pretend = 0, frame = 8
 25681              		@ frame_needed = 1, uses_anonymous_args = 0
 25682              		@ link register save eliminated.
 25683 05ec 80B4     		push	{r7}
 25684              	.LCFI48:
 25685              		.cfi_def_cfa_offset 4
 25686 05ee 83B0     		sub	sp, sp, #12
 25687              	.LCFI49:
 25688              		.cfi_def_cfa_offset 16
 25689 05f0 00AF     		add	r7, sp, #0
 25690              		.cfi_offset 7, -4
 25691              	.LCFI50:
 25692              		.cfi_def_cfa_register 7
 25693 05f2 7860     		str	r0, [r7, #4]
 771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Send break characters */
 775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_CR1_SBK;
 25694              		.loc 1 775 0
 25695 05f4 7B68     		ldr	r3, [r7, #4]
 25696 05f6 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25697 05f8 9BB2     		uxth	r3, r3
 25698 05fa 43F00103 		orr	r3, r3, #1
 25699 05fe 9AB2     		uxth	r2, r3
 25700 0600 7B68     		ldr	r3, [r7, #4]
 25701 0602 9A81     		strh	r2, [r3, #12]	@ movhi
 776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25702              		.loc 1 776 0
 25703 0604 07F10C07 		add	r7, r7, #12
 25704 0608 BD46     		mov	sp, r7
 25705 060a 80BC     		pop	{r7}
 25706 060c 7047     		bx	lr
 25707              		.cfi_endproc
 25708              	.LFE126:
 25710 060e 00BF     		.align	2
 25711              		.global	USART_HalfDuplexCmd
 25712              		.thumb
 25713              		.thumb_func
 25715              	USART_HalfDuplexCmd:
 25716              	.LFB127:
 777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group5 Halfduplex mode function
 783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Half-duplex mode function 
 784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                          Half-duplex mode function
 788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Half-duplex communication.
 792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART can be configured to follow a single-wire half-duplex protocol where 
 794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the TX and RX lines are internally connected.
 795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART Half duplex communication is possible through the following procedure:
 797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length, Stop bits, Parity, Mode transmitter 
 798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Enable the USART using the USART_Cmd() function.
 802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the half duplex mode using USART_HalfDuplexCmd() function.
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note The RX pin is no longer used
 806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In Half-duplex mode the following bits must be kept cleared:
 807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN and CLKEN bits in the USART_CR2 register.
 808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - SCEN and IREN bits in the USART_CR3 register.
 809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Half Duplex communication.
 816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART Communication.
 819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25717              		.loc 1 823 0
 25718              		.cfi_startproc
 25719              		@ args = 0, pretend = 0, frame = 8
 25720              		@ frame_needed = 1, uses_anonymous_args = 0
 25721              		@ link register save eliminated.
 25722 0610 80B4     		push	{r7}
 25723              	.LCFI51:
 25724              		.cfi_def_cfa_offset 4
 25725 0612 83B0     		sub	sp, sp, #12
 25726              	.LCFI52:
 25727              		.cfi_def_cfa_offset 16
 25728 0614 00AF     		add	r7, sp, #0
 25729              		.cfi_offset 7, -4
 25730              	.LCFI53:
 25731              		.cfi_def_cfa_register 7
 25732 0616 7860     		str	r0, [r7, #4]
 25733 0618 0B46     		mov	r3, r1
 25734 061a FB70     		strb	r3, [r7, #3]
 824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 25735              		.loc 1 828 0
 25736 061c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25737 061e 002B     		cmp	r3, #0
 25738 0620 08D0     		beq	.L46
 829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 25739              		.loc 1 831 0
 25740 0622 7B68     		ldr	r3, [r7, #4]
 25741 0624 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 25742 0626 9BB2     		uxth	r3, r3
 25743 0628 43F00803 		orr	r3, r3, #8
 25744 062c 9AB2     		uxth	r2, r3
 25745 062e 7B68     		ldr	r3, [r7, #4]
 25746 0630 9A82     		strh	r2, [r3, #20]	@ movhi
 25747 0632 07E0     		b	.L45
 25748              	.L46:
 832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
 836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 25749              		.loc 1 836 0
 25750 0634 7B68     		ldr	r3, [r7, #4]
 25751 0636 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 25752 0638 9BB2     		uxth	r3, r3
 25753 063a 23F00803 		bic	r3, r3, #8
 25754 063e 9AB2     		uxth	r2, r3
 25755 0640 7B68     		ldr	r3, [r7, #4]
 25756 0642 9A82     		strh	r2, [r3, #20]	@ movhi
 25757              	.L45:
 837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25758              		.loc 1 838 0
 25759 0644 07F10C07 		add	r7, r7, #12
 25760 0648 BD46     		mov	sp, r7
 25761 064a 80BC     		pop	{r7}
 25762 064c 7047     		bx	lr
 25763              		.cfi_endproc
 25764              	.LFE127:
 25766 064e 00BF     		.align	2
 25767              		.global	USART_SetGuardTime
 25768              		.thumb
 25769              		.thumb_func
 25771              	USART_SetGuardTime:
 25772              	.LFB128:
 839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group6 Smartcard mode functions
 846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Smartcard mode functions 
 847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                Smartcard mode functions
 851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Smartcard communication.
 855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The Smartcard interface is designed to support asynchronous protocol Smartcards as
 857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   defined in the ISO 7816-3 standard.
 858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART can provide a clock to the smartcard through the SCLK output.
 860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In smartcard mode, SCLK is not associated to the communication but is simply derived 
 861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   from the internal peripheral input clock through a 5-bit prescaler.
 862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Smartcard communication is possible through the following procedure:
 864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Configures the Smartcard Prescaler using the USART_SetPrescaler() function.
 865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the Smartcard Guard Time using the USART_SetGuardTime() function.
 866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Program the USART clock using the USART_ClockInit() function as following:
 867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Clock enabled
 868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART CPOL Low
 869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART CPHA on first edge
 870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Last Bit Clock Enabled
 871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Program the Smartcard interface using the USART_Init() function as following:
 872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Word Length = 9 Bits
 873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - 1.5 Stop Bit
 874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Even parity
 875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - BaudRate = 12096 baud
 876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Hardware flow control disabled (RTS and CTS signals)
 877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Tx and Rx enabled
 878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Optionally you can enable the parity error interrupt using the USART_ITConfig()
 879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function
 880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. Enable the USART using the USART_Cmd() function.
 881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. Enable the Smartcard NACK using the USART_SmartCardNACKCmd() function.
 882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. Enable the Smartcard interface using the USART_SmartCardCmd() function.
 883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Please refer to the ISO 7816-3 specification for more details.
 885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note It is also possible to choose 0.5 stop bit for receiving but it is recommended 
 888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       to use 1.5 stop bits for both transmitting and receiving to avoid switching 
 889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       between the two configurations.
 890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In smartcard mode, the following bits must be kept cleared:
 891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN bit in the USART_CR2 register.
 892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - HDSEL and IREN bits in the USART_CR3 register.
 893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note Smartcard mode is available on USART peripherals only (not available on UART4 
 894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       and UART5 peripherals).
 895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the specified USART guard time.
 902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_GuardTime: specifies the guard time.   
 905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
 908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {    
 25773              		.loc 1 908 0
 25774              		.cfi_startproc
 25775              		@ args = 0, pretend = 0, frame = 8
 25776              		@ frame_needed = 1, uses_anonymous_args = 0
 25777              		@ link register save eliminated.
 25778 0650 80B4     		push	{r7}
 25779              	.LCFI54:
 25780              		.cfi_def_cfa_offset 4
 25781 0652 83B0     		sub	sp, sp, #12
 25782              	.LCFI55:
 25783              		.cfi_def_cfa_offset 16
 25784 0654 00AF     		add	r7, sp, #0
 25785              		.cfi_offset 7, -4
 25786              	.LCFI56:
 25787              		.cfi_def_cfa_register 7
 25788 0656 7860     		str	r0, [r7, #4]
 25789 0658 0B46     		mov	r3, r1
 25790 065a FB70     		strb	r3, [r7, #3]
 909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART Guard time */
 913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 25791              		.loc 1 913 0
 25792 065c 7B68     		ldr	r3, [r7, #4]
 25793 065e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 25794 0660 9BB2     		uxth	r3, r3
 25795 0662 03F0FF03 		and	r3, r3, #255
 25796 0666 9AB2     		uxth	r2, r3
 25797 0668 7B68     		ldr	r3, [r7, #4]
 25798 066a 1A83     		strh	r2, [r3, #24]	@ movhi
 914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART guard time */
 915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 25799              		.loc 1 915 0
 25800 066c 7B68     		ldr	r3, [r7, #4]
 25801 066e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 25802 0670 9AB2     		uxth	r2, r3
 25803 0672 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25804 0674 9BB2     		uxth	r3, r3
 25805 0676 4FEA0323 		lsl	r3, r3, #8
 25806 067a 9BB2     		uxth	r3, r3
 25807 067c 42EA0303 		orr	r3, r2, r3
 25808 0680 9AB2     		uxth	r2, r3
 25809 0682 7B68     		ldr	r3, [r7, #4]
 25810 0684 1A83     		strh	r2, [r3, #24]	@ movhi
 916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25811              		.loc 1 916 0
 25812 0686 07F10C07 		add	r7, r7, #12
 25813 068a BD46     		mov	sp, r7
 25814 068c 80BC     		pop	{r7}
 25815 068e 7047     		bx	lr
 25816              		.cfi_endproc
 25817              	.LFE128:
 25819              		.align	2
 25820              		.global	USART_SmartCardCmd
 25821              		.thumb
 25822              		.thumb_func
 25824              	USART_SmartCardCmd:
 25825              	.LFB129:
 917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Smart Card mode.
 920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the Smart Card mode.
 923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
 924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25826              		.loc 1 927 0
 25827              		.cfi_startproc
 25828              		@ args = 0, pretend = 0, frame = 8
 25829              		@ frame_needed = 1, uses_anonymous_args = 0
 25830              		@ link register save eliminated.
 25831 0690 80B4     		push	{r7}
 25832              	.LCFI57:
 25833              		.cfi_def_cfa_offset 4
 25834 0692 83B0     		sub	sp, sp, #12
 25835              	.LCFI58:
 25836              		.cfi_def_cfa_offset 16
 25837 0694 00AF     		add	r7, sp, #0
 25838              		.cfi_offset 7, -4
 25839              	.LCFI59:
 25840              		.cfi_def_cfa_register 7
 25841 0696 7860     		str	r0, [r7, #4]
 25842 0698 0B46     		mov	r3, r1
 25843 069a FB70     		strb	r3, [r7, #3]
 928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 25844              		.loc 1 931 0
 25845 069c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25846 069e 002B     		cmp	r3, #0
 25847 06a0 08D0     		beq	.L50
 932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
 934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 25848              		.loc 1 934 0
 25849 06a2 7B68     		ldr	r3, [r7, #4]
 25850 06a4 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 25851 06a6 9BB2     		uxth	r3, r3
 25852 06a8 43F02003 		orr	r3, r3, #32
 25853 06ac 9AB2     		uxth	r2, r3
 25854 06ae 7B68     		ldr	r3, [r7, #4]
 25855 06b0 9A82     		strh	r2, [r3, #20]	@ movhi
 25856 06b2 07E0     		b	.L49
 25857              	.L50:
 935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
 939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 25858              		.loc 1 939 0
 25859 06b4 7B68     		ldr	r3, [r7, #4]
 25860 06b6 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 25861 06b8 9BB2     		uxth	r3, r3
 25862 06ba 23F02003 		bic	r3, r3, #32
 25863 06be 9AB2     		uxth	r2, r3
 25864 06c0 7B68     		ldr	r3, [r7, #4]
 25865 06c2 9A82     		strh	r2, [r3, #20]	@ movhi
 25866              	.L49:
 940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25867              		.loc 1 941 0
 25868 06c4 07F10C07 		add	r7, r7, #12
 25869 06c8 BD46     		mov	sp, r7
 25870 06ca 80BC     		pop	{r7}
 25871 06cc 7047     		bx	lr
 25872              		.cfi_endproc
 25873              	.LFE129:
 25875 06ce 00BF     		.align	2
 25876              		.global	USART_SmartCardNACKCmd
 25877              		.thumb
 25878              		.thumb_func
 25880              	USART_SmartCardNACKCmd:
 25881              	.LFB130:
 942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables NACK transmission.
 945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the NACK transmission.
 948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
 949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25882              		.loc 1 952 0
 25883              		.cfi_startproc
 25884              		@ args = 0, pretend = 0, frame = 8
 25885              		@ frame_needed = 1, uses_anonymous_args = 0
 25886              		@ link register save eliminated.
 25887 06d0 80B4     		push	{r7}
 25888              	.LCFI60:
 25889              		.cfi_def_cfa_offset 4
 25890 06d2 83B0     		sub	sp, sp, #12
 25891              	.LCFI61:
 25892              		.cfi_def_cfa_offset 16
 25893 06d4 00AF     		add	r7, sp, #0
 25894              		.cfi_offset 7, -4
 25895              	.LCFI62:
 25896              		.cfi_def_cfa_register 7
 25897 06d6 7860     		str	r0, [r7, #4]
 25898 06d8 0B46     		mov	r3, r1
 25899 06da FB70     		strb	r3, [r7, #3]
 953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx)); 
 955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 25900              		.loc 1 956 0
 25901 06dc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25902 06de 002B     		cmp	r3, #0
 25903 06e0 08D0     		beq	.L53
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
 959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 25904              		.loc 1 959 0
 25905 06e2 7B68     		ldr	r3, [r7, #4]
 25906 06e4 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 25907 06e6 9BB2     		uxth	r3, r3
 25908 06e8 43F01003 		orr	r3, r3, #16
 25909 06ec 9AB2     		uxth	r2, r3
 25910 06ee 7B68     		ldr	r3, [r7, #4]
 25911 06f0 9A82     		strh	r2, [r3, #20]	@ movhi
 25912 06f2 07E0     		b	.L52
 25913              	.L53:
 960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 25914              		.loc 1 964 0
 25915 06f4 7B68     		ldr	r3, [r7, #4]
 25916 06f6 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 25917 06f8 9BB2     		uxth	r3, r3
 25918 06fa 23F01003 		bic	r3, r3, #16
 25919 06fe 9AB2     		uxth	r2, r3
 25920 0700 7B68     		ldr	r3, [r7, #4]
 25921 0702 9A82     		strh	r2, [r3, #20]	@ movhi
 25922              	.L52:
 965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25923              		.loc 1 966 0
 25924 0704 07F10C07 		add	r7, r7, #12
 25925 0708 BD46     		mov	sp, r7
 25926 070a 80BC     		pop	{r7}
 25927 070c 7047     		bx	lr
 25928              		.cfi_endproc
 25929              	.LFE130:
 25931 070e 00BF     		.align	2
 25932              		.global	USART_IrDAConfig
 25933              		.thumb
 25934              		.thumb_func
 25936              	USART_IrDAConfig:
 25937              	.LFB131:
 967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group7 IrDA mode functions
 973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   IrDA mode functions 
 974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                 IrDA mode functions
 978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA communication.
 982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
 984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver 
 985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
 986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   While receiving data, transmission should be avoided as the data to be transmitted
 987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   could be corrupted.
 988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA communication is possible through the following procedure:
 990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8 bits, Stop bits, Parity, Transmitter/Receiver 
 991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         modes and hardware flow control values using the USART_Init() function.
 992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the IrDA pulse width by configuring the prescaler using  
 994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_SetPrescaler() function.
 995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Configures the IrDA  USART_IrDAMode_LowPower or USART_IrDAMode_Normal mode
 996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         using the USART_IrDAConfig() function.
 997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Enable the IrDA using the USART_IrDACmd() function.
 998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note A pulse of width less than two and greater than one PSC period(s) may or may
1000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       not be rejected.
1001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note The receiver set up time should be managed by software. The IrDA physical layer
1002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       specification specifies a minimum of 10 ms delay between transmission and 
1003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       reception (IrDA is a half duplex protocol).
1004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In IrDA mode, the following bits must be kept cleared:
1005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN, STOP and CLKEN bits in the USART_CR2 register.
1006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - SCEN and HDSEL bits in the USART_CR3 register.
1007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Configures the USART's IrDA interface.
1014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
1017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_LowPower
1019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_Normal
1020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
1023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25938              		.loc 1 1023 0
 25939              		.cfi_startproc
 25940              		@ args = 0, pretend = 0, frame = 8
 25941              		@ frame_needed = 1, uses_anonymous_args = 0
 25942              		@ link register save eliminated.
 25943 0710 80B4     		push	{r7}
 25944              	.LCFI63:
 25945              		.cfi_def_cfa_offset 4
 25946 0712 83B0     		sub	sp, sp, #12
 25947              	.LCFI64:
 25948              		.cfi_def_cfa_offset 16
 25949 0714 00AF     		add	r7, sp, #0
 25950              		.cfi_offset 7, -4
 25951              	.LCFI65:
 25952              		.cfi_def_cfa_register 7
 25953 0716 7860     		str	r0, [r7, #4]
 25954 0718 0B46     		mov	r3, r1
 25955 071a 7B80     		strh	r3, [r7, #2]	@ movhi
1024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
1027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 25956              		.loc 1 1028 0
 25957 071c 7B68     		ldr	r3, [r7, #4]
 25958 071e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 25959 0720 9BB2     		uxth	r3, r3
 25960 0722 23F00403 		bic	r3, r3, #4
 25961 0726 9AB2     		uxth	r2, r3
 25962 0728 7B68     		ldr	r3, [r7, #4]
 25963 072a 9A82     		strh	r2, [r3, #20]	@ movhi
1029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 25964              		.loc 1 1029 0
 25965 072c 7B68     		ldr	r3, [r7, #4]
 25966 072e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 25967 0730 9AB2     		uxth	r2, r3
 25968 0732 7B88     		ldrh	r3, [r7, #2]	@ movhi
 25969 0734 42EA0303 		orr	r3, r2, r3
 25970 0738 9AB2     		uxth	r2, r3
 25971 073a 7B68     		ldr	r3, [r7, #4]
 25972 073c 9A82     		strh	r2, [r3, #20]	@ movhi
1030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25973              		.loc 1 1030 0
 25974 073e 07F10C07 		add	r7, r7, #12
 25975 0742 BD46     		mov	sp, r7
 25976 0744 80BC     		pop	{r7}
 25977 0746 7047     		bx	lr
 25978              		.cfi_endproc
 25979              	.LFE131:
 25981              		.align	2
 25982              		.global	USART_IrDACmd
 25983              		.thumb
 25984              		.thumb_func
 25986              	USART_IrDACmd:
 25987              	.LFB132:
1031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
1034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the IrDA mode.
1037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
1041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25988              		.loc 1 1041 0
 25989              		.cfi_startproc
 25990              		@ args = 0, pretend = 0, frame = 8
 25991              		@ frame_needed = 1, uses_anonymous_args = 0
 25992              		@ link register save eliminated.
 25993 0748 80B4     		push	{r7}
 25994              	.LCFI66:
 25995              		.cfi_def_cfa_offset 4
 25996 074a 83B0     		sub	sp, sp, #12
 25997              	.LCFI67:
 25998              		.cfi_def_cfa_offset 16
 25999 074c 00AF     		add	r7, sp, #0
 26000              		.cfi_offset 7, -4
 26001              	.LCFI68:
 26002              		.cfi_def_cfa_register 7
 26003 074e 7860     		str	r0, [r7, #4]
 26004 0750 0B46     		mov	r3, r1
 26005 0752 FB70     		strb	r3, [r7, #3]
1042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 26006              		.loc 1 1046 0
 26007 0754 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26008 0756 002B     		cmp	r3, #0
 26009 0758 08D0     		beq	.L57
1047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
1049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
 26010              		.loc 1 1049 0
 26011 075a 7B68     		ldr	r3, [r7, #4]
 26012 075c 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 26013 075e 9BB2     		uxth	r3, r3
 26014 0760 43F00203 		orr	r3, r3, #2
 26015 0764 9AB2     		uxth	r2, r3
 26016 0766 7B68     		ldr	r3, [r7, #4]
 26017 0768 9A82     		strh	r2, [r3, #20]	@ movhi
 26018 076a 07E0     		b	.L56
 26019              	.L57:
1050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
1054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 26020              		.loc 1 1054 0
 26021 076c 7B68     		ldr	r3, [r7, #4]
 26022 076e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 26023 0770 9BB2     		uxth	r3, r3
 26024 0772 23F00203 		bic	r3, r3, #2
 26025 0776 9AB2     		uxth	r2, r3
 26026 0778 7B68     		ldr	r3, [r7, #4]
 26027 077a 9A82     		strh	r2, [r3, #20]	@ movhi
 26028              	.L56:
1055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 26029              		.loc 1 1056 0
 26030 077c 07F10C07 		add	r7, r7, #12
 26031 0780 BD46     		mov	sp, r7
 26032 0782 80BC     		pop	{r7}
 26033 0784 7047     		bx	lr
 26034              		.cfi_endproc
 26035              	.LFE132:
 26037 0786 00BF     		.align	2
 26038              		.global	USART_DMACmd
 26039              		.thumb
 26040              		.thumb_func
 26042              	USART_DMACmd:
 26043              	.LFB133:
1057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group8 DMA transfers management functions
1063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   DMA transfers management functions
1064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                       DMA transfers management functions
1068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface.
1076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
1079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Tx: USART DMA transmit request
1081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Rx: USART DMA receive request
1082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the DMA Request sources.
1083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.   
1084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 26044              		.loc 1 1087 0
 26045              		.cfi_startproc
 26046              		@ args = 0, pretend = 0, frame = 8
 26047              		@ frame_needed = 1, uses_anonymous_args = 0
 26048              		@ link register save eliminated.
 26049 0788 80B4     		push	{r7}
 26050              	.LCFI69:
 26051              		.cfi_def_cfa_offset 4
 26052 078a 83B0     		sub	sp, sp, #12
 26053              	.LCFI70:
 26054              		.cfi_def_cfa_offset 16
 26055 078c 00AF     		add	r7, sp, #0
 26056              		.cfi_offset 7, -4
 26057              	.LCFI71:
 26058              		.cfi_def_cfa_register 7
 26059 078e 7860     		str	r0, [r7, #4]
 26060 0790 1346     		mov	r3, r2
 26061 0792 0A46     		mov	r2, r1	@ movhi
 26062 0794 7A80     		strh	r2, [r7, #2]	@ movhi
 26063 0796 7B70     		strb	r3, [r7, #1]
1088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
1091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
1092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 26064              		.loc 1 1093 0
 26065 0798 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 26066 079a 002B     		cmp	r3, #0
 26067 079c 09D0     		beq	.L60
1094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
1096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 26068              		.loc 1 1097 0
 26069 079e 7B68     		ldr	r3, [r7, #4]
 26070 07a0 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 26071 07a2 9AB2     		uxth	r2, r3
 26072 07a4 7B88     		ldrh	r3, [r7, #2]	@ movhi
 26073 07a6 42EA0303 		orr	r3, r2, r3
 26074 07aa 9AB2     		uxth	r2, r3
 26075 07ac 7B68     		ldr	r3, [r7, #4]
 26076 07ae 9A82     		strh	r2, [r3, #20]	@ movhi
 26077 07b0 0BE0     		b	.L59
 26078              	.L60:
1098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
1102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 26079              		.loc 1 1103 0
 26080 07b2 7B68     		ldr	r3, [r7, #4]
 26081 07b4 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 26082 07b6 9AB2     		uxth	r2, r3
 26083 07b8 7B88     		ldrh	r3, [r7, #2]	@ movhi
 26084 07ba 6FEA0303 		mvn	r3, r3
 26085 07be 9BB2     		uxth	r3, r3
 26086 07c0 02EA0303 		and	r3, r2, r3
 26087 07c4 9AB2     		uxth	r2, r3
 26088 07c6 7B68     		ldr	r3, [r7, #4]
 26089 07c8 9A82     		strh	r2, [r3, #20]	@ movhi
 26090              	.L59:
1104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 26091              		.loc 1 1105 0
 26092 07ca 07F10C07 		add	r7, r7, #12
 26093 07ce BD46     		mov	sp, r7
 26094 07d0 80BC     		pop	{r7}
 26095 07d2 7047     		bx	lr
 26096              		.cfi_endproc
 26097              	.LFE133:
 26099              		.align	2
 26100              		.global	USART_ITConfig
 26101              		.thumb
 26102              		.thumb_func
 26104              	USART_ITConfig:
 26105              	.LFB134:
1106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group9 Interrupts and flags management functions
1112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Interrupts and flags management functions 
1113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                    Interrupts and flags management functions
1117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to configure the USART 
1120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupts sources, DMA channels requests and check or clear the flags or 
1121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   pending bits status.
1122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The user should identify which mode will be used in his application to manage 
1123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
1124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Polling Mode
1126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   =============
1127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In Polling Mode, the SPI communication can be managed by 10 flags:
1128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_FLAG_TXE : to indicate the status of the transmit buffer register
1129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_FLAG_RXNE : to indicate the status of the receive buffer register
1130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_FLAG_TC : to indicate the status of the transmit operation
1131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_FLAG_IDLE : to indicate the status of the Idle Line             
1132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_FLAG_CTS : to indicate the status of the nCTS input
1133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_FLAG_LBD : to indicate the status of the LIN break detection
1134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_FLAG_NE : to indicate if a noise error occur
1135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_FLAG_FE : to indicate if a frame error occur
1136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      9. USART_FLAG_PE : to indicate if a parity error occur
1137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      10. USART_FLAG_ORE : to indicate if an Overrun error occur
1138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following functions:
1140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       - FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       - void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupt Mode
1144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ===============
1145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In Interrupt Mode, the USART communication can be managed by 8 interrupt sources
1146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   and 10 pending bits: 
1147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Pending Bits:
1149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ------------- 
1150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_IT_TXE : to indicate the status of the transmit buffer register
1151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_IT_RXNE : to indicate the status of the receive buffer register
1152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_IT_TC : to indicate the status of the transmit operation
1153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_IT_IDLE : to indicate the status of the Idle Line             
1154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_IT_CTS : to indicate the status of the nCTS input
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_IT_LBD : to indicate the status of the LIN break detection
1156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_IT_NE : to indicate if a noise error occur
1157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_IT_FE : to indicate if a frame error occur
1158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      9. USART_IT_PE : to indicate if a parity error occur
1159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      10. USART_IT_ORE : to indicate if an Overrun error occur
1160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupt Source:
1162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   -----------------
1163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_IT_TXE : specifies the interrupt source for the Tx buffer empty 
1164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                         empty interrupt.
1167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_IT_TC : specifies the interrupt source for the Transmit complete 
1168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_IT_IDLE : specifies the interrupt source for the Idle Line interrupt.             
1170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_IT_CTS : specifies the interrupt source for the CTS interrupt. 
1171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_IT_LBD : specifies the interrupt source for the LIN break detection
1172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_IT_PE : specifies the interrupt source for the parity error interrupt. 
1174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_IT_ERR :  specifies the interrupt source for the errors interrupt.
1175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note Some parameters are coded in order to use them as interrupt source or as pending bits.
1177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following functions:
1179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
1180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
1181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);
1182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   DMA Mode
1184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ========
1185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In DMA Mode, the USART communication can be managed by 2 DMA Channel requests:
1186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following function:
1190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState);
1191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
1198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
1201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt
1203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
1210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
1211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
1215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 26106              		.loc 1 1215 0
 26107              		.cfi_startproc
 26108              		@ args = 0, pretend = 0, frame = 24
 26109              		@ frame_needed = 1, uses_anonymous_args = 0
 26110              		@ link register save eliminated.
 26111 07d4 80B4     		push	{r7}
 26112              	.LCFI72:
 26113              		.cfi_def_cfa_offset 4
 26114 07d6 87B0     		sub	sp, sp, #28
 26115              	.LCFI73:
 26116              		.cfi_def_cfa_offset 32
 26117 07d8 00AF     		add	r7, sp, #0
 26118              		.cfi_offset 7, -4
 26119              	.LCFI74:
 26120              		.cfi_def_cfa_register 7
 26121 07da 7860     		str	r0, [r7, #4]
 26122 07dc 1346     		mov	r3, r2
 26123 07de 0A46     		mov	r2, r1	@ movhi
 26124 07e0 7A80     		strh	r2, [r7, #2]	@ movhi
 26125 07e2 7B70     		strb	r3, [r7, #1]
1216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 26126              		.loc 1 1216 0
 26127 07e4 4FF00003 		mov	r3, #0
 26128 07e8 3B61     		str	r3, [r7, #16]
 26129 07ea 4FF00003 		mov	r3, #0
 26130 07ee FB60     		str	r3, [r7, #12]
 26131 07f0 4FF00003 		mov	r3, #0
 26132 07f4 BB60     		str	r3, [r7, #8]
1217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartxbase = 0x00;
 26133              		.loc 1 1217 0
 26134 07f6 4FF00003 		mov	r3, #0
 26135 07fa 7B61     		str	r3, [r7, #20]
1218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
1221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartxbase = (uint32_t)USARTx;
 26136              		.loc 1 1229 0
 26137 07fc 7B68     		ldr	r3, [r7, #4]
 26138 07fe 7B61     		str	r3, [r7, #20]
1230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 26139              		.loc 1 1232 0
 26140 0800 7B88     		ldrh	r3, [r7, #2]	@ movhi
 26141 0802 DBB2     		uxtb	r3, r3
 26142 0804 4FEA5313 		lsr	r3, r3, #5
 26143 0808 DBB2     		uxtb	r3, r3
 26144 080a 3B61     		str	r3, [r7, #16]
1233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itpos = USART_IT & IT_MASK;
 26145              		.loc 1 1235 0
 26146 080c 7B88     		ldrh	r3, [r7, #2]
 26147 080e 03F01F03 		and	r3, r3, #31
 26148 0812 FB60     		str	r3, [r7, #12]
1236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 26149              		.loc 1 1236 0
 26150 0814 FB68     		ldr	r3, [r7, #12]
 26151 0816 4FF00102 		mov	r2, #1
 26152 081a 02FA03F3 		lsl	r3, r2, r3
 26153 081e BB60     		str	r3, [r7, #8]
1237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT is in CR1 register */
 26154              		.loc 1 1238 0
 26155 0820 3B69     		ldr	r3, [r7, #16]
 26156 0822 012B     		cmp	r3, #1
 26157 0824 04D1     		bne	.L63
1239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x0C;
 26158              		.loc 1 1240 0
 26159 0826 7B69     		ldr	r3, [r7, #20]
 26160 0828 03F10C03 		add	r3, r3, #12
 26161 082c 7B61     		str	r3, [r7, #20]
 26162 082e 0BE0     		b	.L64
 26163              	.L63:
1241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT is in CR2 register */
 26164              		.loc 1 1242 0
 26165 0830 3B69     		ldr	r3, [r7, #16]
 26166 0832 022B     		cmp	r3, #2
 26167 0834 04D1     		bne	.L65
1243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x10;
 26168              		.loc 1 1244 0
 26169 0836 7B69     		ldr	r3, [r7, #20]
 26170 0838 03F11003 		add	r3, r3, #16
 26171 083c 7B61     		str	r3, [r7, #20]
 26172 083e 03E0     		b	.L64
 26173              	.L65:
1245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT is in CR3 register */
1247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x14; 
 26174              		.loc 1 1248 0
 26175 0840 7B69     		ldr	r3, [r7, #20]
 26176 0842 03F11403 		add	r3, r3, #20
 26177 0846 7B61     		str	r3, [r7, #20]
 26178              	.L64:
1249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 26179              		.loc 1 1250 0
 26180 0848 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 26181 084a 002B     		cmp	r3, #0
 26182 084c 07D0     		beq	.L66
1251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 26183              		.loc 1 1252 0
 26184 084e 7B69     		ldr	r3, [r7, #20]
 26185 0850 7A69     		ldr	r2, [r7, #20]
 26186 0852 1168     		ldr	r1, [r2, #0]
 26187 0854 BA68     		ldr	r2, [r7, #8]
 26188 0856 41EA0202 		orr	r2, r1, r2
 26189 085a 1A60     		str	r2, [r3, #0]
 26190 085c 08E0     		b	.L62
 26191              	.L66:
1253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 26192              		.loc 1 1256 0
 26193 085e 7B69     		ldr	r3, [r7, #20]
 26194 0860 7A69     		ldr	r2, [r7, #20]
 26195 0862 1168     		ldr	r1, [r2, #0]
 26196 0864 BA68     		ldr	r2, [r7, #8]
 26197 0866 6FEA0202 		mvn	r2, r2
 26198 086a 01EA0202 		and	r2, r1, r2
 26199 086e 1A60     		str	r2, [r3, #0]
 26200              	.L62:
1257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 26201              		.loc 1 1258 0
 26202 0870 07F11C07 		add	r7, r7, #28
 26203 0874 BD46     		mov	sp, r7
 26204 0876 80BC     		pop	{r7}
 26205 0878 7047     		bx	lr
 26206              		.cfi_endproc
 26207              	.LFE134:
 26209 087a 00BF     		.align	2
 26210              		.global	USART_GetFlagStatus
 26211              		.thumb
 26212              		.thumb_func
 26214              	USART_GetFlagStatus:
 26215              	.LFB135:
1259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
1262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
1265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5)
1267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag
1268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TXE:  Transmit data register empty flag
1269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag
1270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag
1271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_IDLE: Idle Line detection flag
1272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag
1273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_NE:   Noise Error flag
1274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_FE:   Framing Error flag
1275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_PE:   Parity Error flag
1276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
1277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 26216              		.loc 1 1279 0
 26217              		.cfi_startproc
 26218              		@ args = 0, pretend = 0, frame = 16
 26219              		@ frame_needed = 1, uses_anonymous_args = 0
 26220              		@ link register save eliminated.
 26221 087c 80B4     		push	{r7}
 26222              	.LCFI75:
 26223              		.cfi_def_cfa_offset 4
 26224 087e 85B0     		sub	sp, sp, #20
 26225              	.LCFI76:
 26226              		.cfi_def_cfa_offset 24
 26227 0880 00AF     		add	r7, sp, #0
 26228              		.cfi_offset 7, -4
 26229              	.LCFI77:
 26230              		.cfi_def_cfa_register 7
 26231 0882 7860     		str	r0, [r7, #4]
 26232 0884 0B46     		mov	r3, r1
 26233 0886 7B80     		strh	r3, [r7, #2]	@ movhi
1280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   FlagStatus bitstatus = RESET;
 26234              		.loc 1 1280 0
 26235 0888 4FF00003 		mov	r3, #0
 26236 088c FB73     		strb	r3, [r7, #15]
1281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
1284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_FLAG == USART_FLAG_CTS)
1287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 26237              		.loc 1 1291 0
 26238 088e 7B68     		ldr	r3, [r7, #4]
 26239 0890 1B88     		ldrh	r3, [r3, #0]	@ movhi
 26240 0892 9AB2     		uxth	r2, r3
 26241 0894 7B88     		ldrh	r3, [r7, #2]	@ movhi
 26242 0896 02EA0303 		and	r3, r2, r3
 26243 089a 9BB2     		uxth	r3, r3
 26244 089c 002B     		cmp	r3, #0
 26245 089e 03D0     		beq	.L69
1292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
 26246              		.loc 1 1293 0
 26247 08a0 4FF00103 		mov	r3, #1
 26248 08a4 FB73     		strb	r3, [r7, #15]
 26249 08a6 02E0     		b	.L70
 26250              	.L69:
1294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
 26251              		.loc 1 1297 0
 26252 08a8 4FF00003 		mov	r3, #0
 26253 08ac FB73     		strb	r3, [r7, #15]
 26254              	.L70:
1298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;
 26255              		.loc 1 1299 0
 26256 08ae FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 26257              		.loc 1 1300 0
 26258 08b0 1846     		mov	r0, r3
 26259 08b2 07F11407 		add	r7, r7, #20
 26260 08b6 BD46     		mov	sp, r7
 26261 08b8 80BC     		pop	{r7}
 26262 08ba 7047     		bx	lr
 26263              		.cfi_endproc
 26264              	.LFE135:
 26266              		.align	2
 26267              		.global	USART_ClearFlag
 26268              		.thumb
 26269              		.thumb_func
 26271              	USART_ClearFlag:
 26272              	.LFB136:
1301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's pending flags.
1304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
1307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5).
1309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag.
1310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag.
1311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag.
1312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) flags are cleared by software 
1315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          sequence: a read operation to USART_SR register (USART_GetFlagStatus()) 
1316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          followed by a read operation to USART_DR register (USART_ReceiveData()).
1317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE flag can be also cleared by a read to the USART_DR register 
1318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC flag can be also cleared by software sequence: a read operation to 
1320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          USART_SR register (USART_GetFlagStatus()) followed by a write operation
1321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          to USART_DR register (USART_SendData()).
1322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE flag is cleared only by a write to the USART_DR register 
1323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 26273              		.loc 1 1328 0
 26274              		.cfi_startproc
 26275              		@ args = 0, pretend = 0, frame = 8
 26276              		@ frame_needed = 1, uses_anonymous_args = 0
 26277              		@ link register save eliminated.
 26278 08bc 80B4     		push	{r7}
 26279              	.LCFI78:
 26280              		.cfi_def_cfa_offset 4
 26281 08be 83B0     		sub	sp, sp, #12
 26282              	.LCFI79:
 26283              		.cfi_def_cfa_offset 16
 26284 08c0 00AF     		add	r7, sp, #0
 26285              		.cfi_offset 7, -4
 26286              	.LCFI80:
 26287              		.cfi_def_cfa_register 7
 26288 08c2 7860     		str	r0, [r7, #4]
 26289 08c4 0B46     		mov	r3, r1
 26290 08c6 7B80     		strh	r3, [r7, #2]	@ movhi
1329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
1332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
1335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        
1339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~USART_FLAG;
 26291              		.loc 1 1339 0
 26292 08c8 7B88     		ldrh	r3, [r7, #2]	@ movhi
 26293 08ca 6FEA0303 		mvn	r3, r3
 26294 08ce 9AB2     		uxth	r2, r3
 26295 08d0 7B68     		ldr	r3, [r7, #4]
 26296 08d2 1A80     		strh	r2, [r3, #0]	@ movhi
1340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 26297              		.loc 1 1340 0
 26298 08d4 07F10C07 		add	r7, r7, #12
 26299 08d8 BD46     		mov	sp, r7
 26300 08da 80BC     		pop	{r7}
 26301 08dc 7047     		bx	lr
 26302              		.cfi_endproc
 26303              	.LFE136:
 26305 08de 00BF     		.align	2
 26306              		.global	USART_GetITStatus
 26307              		.thumb
 26308              		.thumb_func
 26310              	USART_GetITStatus:
 26311              	.LFB137:
1341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
1344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
1347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_RX : OverRun Error interrupt if the RXNEIE bit is set
1355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_ER : OverRun Error interrupt if the EIE bit is set  
1356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_NE:   Noise Error interrupt
1357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_FE:   Framing Error interrupt
1358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
1360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
1362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 26312              		.loc 1 1362 0
 26313              		.cfi_startproc
 26314              		@ args = 0, pretend = 0, frame = 24
 26315              		@ frame_needed = 1, uses_anonymous_args = 0
 26316              		@ link register save eliminated.
 26317 08e0 80B4     		push	{r7}
 26318              	.LCFI81:
 26319              		.cfi_def_cfa_offset 4
 26320 08e2 87B0     		sub	sp, sp, #28
 26321              	.LCFI82:
 26322              		.cfi_def_cfa_offset 32
 26323 08e4 00AF     		add	r7, sp, #0
 26324              		.cfi_offset 7, -4
 26325              	.LCFI83:
 26326              		.cfi_def_cfa_register 7
 26327 08e6 7860     		str	r0, [r7, #4]
 26328 08e8 0B46     		mov	r3, r1
 26329 08ea 7B80     		strh	r3, [r7, #2]	@ movhi
1363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 26330              		.loc 1 1363 0
 26331 08ec 4FF00003 		mov	r3, #0
 26332 08f0 FB60     		str	r3, [r7, #12]
 26333 08f2 4FF00003 		mov	r3, #0
 26334 08f6 7B61     		str	r3, [r7, #20]
 26335 08f8 4FF00003 		mov	r3, #0
 26336 08fc BB60     		str	r3, [r7, #8]
1364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ITStatus bitstatus = RESET;
 26337              		.loc 1 1364 0
 26338 08fe 4FF00003 		mov	r3, #0
 26339 0902 FB74     		strb	r3, [r7, #19]
1365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
1368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */ 
1370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 26340              		.loc 1 1376 0
 26341 0904 7B88     		ldrh	r3, [r7, #2]	@ movhi
 26342 0906 DBB2     		uxtb	r3, r3
 26343 0908 4FEA5313 		lsr	r3, r3, #5
 26344 090c DBB2     		uxtb	r3, r3
 26345 090e BB60     		str	r3, [r7, #8]
1377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = USART_IT & IT_MASK;
 26346              		.loc 1 1378 0
 26347 0910 7B88     		ldrh	r3, [r7, #2]
 26348 0912 03F01F03 		and	r3, r3, #31
 26349 0916 7B61     		str	r3, [r7, #20]
1379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 26350              		.loc 1 1379 0
 26351 0918 7B69     		ldr	r3, [r7, #20]
 26352 091a 4FF00102 		mov	r2, #1
 26353 091e 02FA03F3 		lsl	r3, r2, r3
 26354 0922 7B61     		str	r3, [r7, #20]
1380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 26355              		.loc 1 1381 0
 26356 0924 BB68     		ldr	r3, [r7, #8]
 26357 0926 012B     		cmp	r3, #1
 26358 0928 07D1     		bne	.L73
1382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR1;
 26359              		.loc 1 1383 0
 26360 092a 7B68     		ldr	r3, [r7, #4]
 26361 092c 9B89     		ldrh	r3, [r3, #12]	@ movhi
 26362 092e 9BB2     		uxth	r3, r3
 26363 0930 7A69     		ldr	r2, [r7, #20]
 26364 0932 02EA0303 		and	r3, r2, r3
 26365 0936 7B61     		str	r3, [r7, #20]
 26366 0938 11E0     		b	.L74
 26367              	.L73:
1384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 26368              		.loc 1 1385 0
 26369 093a BB68     		ldr	r3, [r7, #8]
 26370 093c 022B     		cmp	r3, #2
 26371 093e 07D1     		bne	.L75
1386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR2;
 26372              		.loc 1 1387 0
 26373 0940 7B68     		ldr	r3, [r7, #4]
 26374 0942 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 26375 0944 9BB2     		uxth	r3, r3
 26376 0946 7A69     		ldr	r2, [r7, #20]
 26377 0948 02EA0303 		and	r3, r2, r3
 26378 094c 7B61     		str	r3, [r7, #20]
 26379 094e 06E0     		b	.L74
 26380              	.L75:
1388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT  is in CR3 register */
1390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR3;
 26381              		.loc 1 1391 0
 26382 0950 7B68     		ldr	r3, [r7, #4]
 26383 0952 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 26384 0954 9BB2     		uxth	r3, r3
 26385 0956 7A69     		ldr	r2, [r7, #20]
 26386 0958 02EA0303 		and	r3, r2, r3
 26387 095c 7B61     		str	r3, [r7, #20]
 26388              	.L74:
1392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 26389              		.loc 1 1394 0
 26390 095e 7B88     		ldrh	r3, [r7, #2]
 26391 0960 4FEA1323 		lsr	r3, r3, #8
 26392 0964 9BB2     		uxth	r3, r3
 26393 0966 FB60     		str	r3, [r7, #12]
1395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 26394              		.loc 1 1395 0
 26395 0968 FB68     		ldr	r3, [r7, #12]
 26396 096a 4FF00102 		mov	r2, #1
 26397 096e 02FA03F3 		lsl	r3, r2, r3
 26398 0972 FB60     		str	r3, [r7, #12]
1396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos &= USARTx->SR;
 26399              		.loc 1 1396 0
 26400 0974 7B68     		ldr	r3, [r7, #4]
 26401 0976 1B88     		ldrh	r3, [r3, #0]	@ movhi
 26402 0978 9BB2     		uxth	r3, r3
 26403 097a FA68     		ldr	r2, [r7, #12]
 26404 097c 02EA0303 		and	r3, r2, r3
 26405 0980 FB60     		str	r3, [r7, #12]
1397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 26406              		.loc 1 1397 0
 26407 0982 7B69     		ldr	r3, [r7, #20]
 26408 0984 002B     		cmp	r3, #0
 26409 0986 06D0     		beq	.L76
 26410              		.loc 1 1397 0 is_stmt 0 discriminator 1
 26411 0988 FB68     		ldr	r3, [r7, #12]
 26412 098a 002B     		cmp	r3, #0
 26413 098c 03D0     		beq	.L76
1398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
 26414              		.loc 1 1399 0 is_stmt 1
 26415 098e 4FF00103 		mov	r3, #1
 26416 0992 FB74     		strb	r3, [r7, #19]
 26417 0994 02E0     		b	.L77
 26418              	.L76:
1400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
 26419              		.loc 1 1403 0
 26420 0996 4FF00003 		mov	r3, #0
 26421 099a FB74     		strb	r3, [r7, #19]
 26422              	.L77:
1404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;  
 26423              		.loc 1 1406 0
 26424 099c FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 26425              		.loc 1 1407 0
 26426 099e 1846     		mov	r0, r3
 26427 09a0 07F11C07 		add	r7, r7, #28
 26428 09a4 BD46     		mov	sp, r7
 26429 09a6 80BC     		pop	{r7}
 26430 09a8 7047     		bx	lr
 26431              		.cfi_endproc
 26432              	.LFE137:
 26434 09aa 00BF     		.align	2
 26435              		.global	USART_ClearITPendingBit
 26436              		.thumb
 26437              		.thumb_func
 26439              	USART_ClearITPendingBit:
 26440              	.LFB138:
1408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt. 
1418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt.
1419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
1420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) pending bits are cleared by 
1422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          software sequence: a read operation to USART_SR register 
1423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_GetITStatus()) followed by a read operation to USART_DR register 
1424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE pending bit can be also cleared by a read to the USART_DR register 
1426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC pending bit can be also cleared by software sequence: a read 
1428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_SR register (USART_GetITStatus()) followed by a write 
1429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_DR register (USART_SendData()).
1430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE pending bit is cleared only by a write to the USART_DR register 
1431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  
1433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
1436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 26441              		.loc 1 1436 0
 26442              		.cfi_startproc
 26443              		@ args = 0, pretend = 0, frame = 16
 26444              		@ frame_needed = 1, uses_anonymous_args = 0
 26445              		@ link register save eliminated.
 26446 09ac 80B4     		push	{r7}
 26447              	.LCFI84:
 26448              		.cfi_def_cfa_offset 4
 26449 09ae 85B0     		sub	sp, sp, #20
 26450              	.LCFI85:
 26451              		.cfi_def_cfa_offset 24
 26452 09b0 00AF     		add	r7, sp, #0
 26453              		.cfi_offset 7, -4
 26454              	.LCFI86:
 26455              		.cfi_def_cfa_register 7
 26456 09b2 7860     		str	r0, [r7, #4]
 26457 09b4 0B46     		mov	r3, r1
 26458 09b6 7B80     		strh	r3, [r7, #2]	@ movhi
1437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint16_t bitpos = 0x00, itmask = 0x00;
 26459              		.loc 1 1437 0
 26460 09b8 4FF00003 		mov	r3, #0
 26461 09bc FB81     		strh	r3, [r7, #14]	@ movhi
 26462 09be 4FF00003 		mov	r3, #0
 26463 09c2 BB81     		strh	r3, [r7, #12]	@ movhi
1438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
1441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 26464              		.loc 1 1448 0
 26465 09c4 7B88     		ldrh	r3, [r7, #2]
 26466 09c6 4FEA1323 		lsr	r3, r3, #8
 26467 09ca FB81     		strh	r3, [r7, #14]	@ movhi
1449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 26468              		.loc 1 1449 0
 26469 09cc FB89     		ldrh	r3, [r7, #14]
 26470 09ce 4FF00102 		mov	r2, #1
 26471 09d2 02FA03F3 		lsl	r3, r2, r3
 26472 09d6 BB81     		strh	r3, [r7, #12]	@ movhi
1450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~itmask;
 26473              		.loc 1 1450 0
 26474 09d8 BB89     		ldrh	r3, [r7, #12]	@ movhi
 26475 09da 6FEA0303 		mvn	r3, r3
 26476 09de 9AB2     		uxth	r2, r3
 26477 09e0 7B68     		ldr	r3, [r7, #4]
 26478 09e2 1A80     		strh	r2, [r3, #0]	@ movhi
1451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 26479              		.loc 1 1451 0
 26480 09e4 07F11407 		add	r7, r7, #20
 26481 09e8 BD46     		mov	sp, r7
 26482 09ea 80BC     		pop	{r7}
 26483 09ec 7047     		bx	lr
 26484              		.cfi_endproc
 26485              	.LFE138:
 26487              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_usart.c
     /tmp/ccDYtKsj.s:24578  .text:00000000 $t
     /tmp/ccDYtKsj.s:24583  .text:00000000 USART_DeInit
     /tmp/ccDYtKsj.s:24697  .text:000000dc $d
     /tmp/ccDYtKsj.s:24706  .text:000000f4 $t
     /tmp/ccDYtKsj.s:24711  .text:000000f4 USART_Init
     /tmp/ccDYtKsj.s:24931  .text:00000290 $d
     /tmp/ccDYtKsj.s:24937  .text:0000029c $t
     /tmp/ccDYtKsj.s:24942  .text:0000029c USART_StructInit
     /tmp/ccDYtKsj.s:24997  .text:000002e0 USART_ClockInit
     /tmp/ccDYtKsj.s:25066  .text:0000033c USART_ClockStructInit
     /tmp/ccDYtKsj.s:25113  .text:00000370 USART_Cmd
     /tmp/ccDYtKsj.s:25169  .text:000003b0 USART_SetPrescaler
     /tmp/ccDYtKsj.s:25220  .text:000003ec USART_OverSampling8Cmd
     /tmp/ccDYtKsj.s:25278  .text:00000434 USART_OneBitMethodCmd
     /tmp/ccDYtKsj.s:25334  .text:00000474 USART_SendData
     /tmp/ccDYtKsj.s:25374  .text:0000049c USART_ReceiveData
     /tmp/ccDYtKsj.s:25413  .text:000004c0 USART_SetAddress
     /tmp/ccDYtKsj.s:25464  .text:000004fc USART_ReceiverWakeUpCmd
     /tmp/ccDYtKsj.s:25520  .text:0000053c USART_WakeUpConfig
     /tmp/ccDYtKsj.s:25570  .text:00000574 USART_LINBreakDetectLengthConfig
     /tmp/ccDYtKsj.s:25620  .text:000005ac USART_LINCmd
     /tmp/ccDYtKsj.s:25676  .text:000005ec USART_SendBreak
     /tmp/ccDYtKsj.s:25715  .text:00000610 USART_HalfDuplexCmd
     /tmp/ccDYtKsj.s:25771  .text:00000650 USART_SetGuardTime
     /tmp/ccDYtKsj.s:25824  .text:00000690 USART_SmartCardCmd
     /tmp/ccDYtKsj.s:25880  .text:000006d0 USART_SmartCardNACKCmd
     /tmp/ccDYtKsj.s:25936  .text:00000710 USART_IrDAConfig
     /tmp/ccDYtKsj.s:25986  .text:00000748 USART_IrDACmd
     /tmp/ccDYtKsj.s:26042  .text:00000788 USART_DMACmd
     /tmp/ccDYtKsj.s:26104  .text:000007d4 USART_ITConfig
     /tmp/ccDYtKsj.s:26214  .text:0000087c USART_GetFlagStatus
     /tmp/ccDYtKsj.s:26271  .text:000008bc USART_ClearFlag
     /tmp/ccDYtKsj.s:26310  .text:000008e0 USART_GetITStatus
     /tmp/ccDYtKsj.s:26439  .text:000009ac USART_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
